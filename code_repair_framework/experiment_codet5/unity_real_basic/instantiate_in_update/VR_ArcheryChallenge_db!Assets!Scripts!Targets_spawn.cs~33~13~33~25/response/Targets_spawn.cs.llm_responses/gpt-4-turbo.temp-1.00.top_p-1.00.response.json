"{\"id\":\"chatcmpl-Bq0IjYu7opSKvmBGjXYs7gZQB4mGP\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing Unity.XR.CoreUtils;\\nusing UnityEngine;\\nusing System;\\n\\npublic class Targets : MonoBehaviour\\n{\\n    public GameObject targetPrefab;\\n    public string level; // Integer representing the difficulty level\\n    public float spawnInterval = 3f; // Seconds between spawns\\n    public int maxTargets = 10; // Max targets allowed in scene\\n\\n    private float spawnTimer = 0f;\\n    private float spawnRange = 5f; // Range for spawning\\n    private List<GameObject> targetPool = new List<GameObject>();\\n    private int poolSize = 10; // Predefine the pool size\\n\\n    void Start()\\n    {\\n        level = PlayerPrefs.GetString(\\\"level\\\", \\\"1\\\"); // Default to level 1 (\\\"easy\\\" if the key does not exist)\\n        InitializeTargetPool();\\n    }\\n\\n    void Update()\\n    {\\n        spawnTimer += Time.deltaTime;\\n\\n        if (spawnTimer >= spawnInterval && GetActiveTargetCount() < maxTargets)\\n        {\\n            SpawnTarget();\\n            spawnTimer = 0f; // Reset the timer\\n        }\\n    }\\n\\n    void InitializeTargetPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject newTarget = Instantiate(targetPrefab);\\n            newTarget.SetActive(false);\\n            newTarget.tag = \\\"Target\\\";\\n            targetPool.Add(newTarget);\\n        }\\n    }\\n\\n    GameObject GetInactiveTargetFromPool()\\n    {\\n        foreach (var target in targetPool)\\n        {\\n            if (!target.activeInHierarchy)\\n            {\\n                return target;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    int GetActiveTargetCount()\\n    {\\n        int activeCount = 0;\\n        foreach (var target in targetPool)\\n        {\\n            if (target.activeInHierarchy)\\n            {\\n                activeCount++;\\n            }\\n        }\\n        return activeCount;\\n    }\\n\\n    void SpawnTarget()\\n    {\\n        GameObject target = GetInactiveTargetFromPool();\\n        if (target != null)\\n        {\\n            Vector3 spawnPosition = new Vector3(\\n                UnityEngine.Random.Range(-spawnRange, spawnRange),  // Random x position\\n                UnityEngine.Random.Range(1f, 5f),                   // Random y position between 1 and 5\\n                0);                                                 // z axis is 0 for 2D\\n\\n            target.transform.position = spawnPosition;\\n            target.SetActive(true);\\n            target.GetComponent<Targets_movements>().level = level;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing Unity.XR.CoreUtils;\\nusing UnityEngine;\\nusing System;\\n\\npublic class Targets : MonoBehaviour\\n{\\n    public GameObject target;\\n    public String level; // Integer representing the difficulty level\\n    public float spawnInterval = 3f; // Seconds between spawns\\n    public int maxTargets = 10; // Max targets allowed in scene\\n\\n    private float spawnTimer = 0f;\\n    private float spawnRange = 5f; // Range for spawning\\n    private Queue<GameObject> targetPool;\\n    private int initialPoolSize = 10; // Set initial pool size\\n\\n    void Start()\\n    {\\n        level = PlayerPrefs.GetString(\\\"level\\\"); // Default to level 1 (\\\"easy\\\")\\n        InitializeObjectPool();\\n    }\\n\\n    void InitializeObjectPool()\\n    {\\n        targetPool = new Queue<GameObject>();\\n        for (int i = 0; i < initialPoolSize; i++)\\n        {\\n            GameObject newTarget = Instantiate(target);\\n            newTarget.SetActive(false);\\n            targetPool.Enqueue(newTarget);\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        spawnTimer += Time.deltaTime;\\n        if (spawnTimer >= spawnInterval && GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets)\\n        {\\n            SpawnTarget();\\n            spawnTimer = 0f; // Reset the timer\\n        }\\n    }\\n\\n    void SpawnTarget()\\n    {\\n        Vector3 spawnPosition = new Vector3(\\n            UnityEngine.Random.Range(-spawnRange, spawnRange), // Random x position\\n            UnityEngine.Random.Range(1f, 5f), // Random y position between 1 and 5\\n            0); // z axis is 0 for 2D\\n\\n        GameObject newTarget = GetTargetFromPool();\\n        newTarget.transform.position = spawnPosition;\\n        newTarget.SetActive(true);\\n        newTarget.GetComponent<Targets_movements>().level = level;\\n    }\\n\\n    GameObject GetTargetFromPool()\\n    {\\n        if (targetPool.Count > 0)\\n        {\\n            return targetPool.Dequeue();\\n        }\\n        else\\n        {\\n            // If the pool is empty, expand the pool and return a new target\\n            GameObject newTarget = Instantiate(target);\\n            return newTarget;\\n        }\\n    }\\n\\n    public void ReturnTargetToPool(GameObject target)\\n    {\\n        target.SetActive(false);\\n        targetPool.Enqueue(target);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing Unity.XR.CoreUtils;\\nusing UnityEngine;\\nusing System;\\n\\npublic class Targets : MonoBehaviour\\n{\\n    public GameObject target;\\n    public string level; // String representing the difficulty level\\n    public float spawnInterval = 3f; // Seconds between spawns\\n    public int maxTargets = 10; // Max targets allowed in scene\\n\\n    private float spawnTimer = 0f;\\n    private float spawnRange = 5f; // Range for spawning\\n    private List<GameObject> targetPool = new List<GameObject>(); // Object pool for targets\\n\\n    void Start()\\n    {\\n        level = PlayerPrefs.GetString(\\\"level\\\"); // Default to level 1 (\\\"easy\\\")\\n\\n        // Pre-instantiate target objects and add to pool\\n        for (int i = 0; i < maxTargets; i++)\\n        {\\n            GameObject newTarget = Instantiate(target);\\n            newTarget.SetActive(false); // Disable the target initially\\n            newTarget.tag = \\\"Target\\\";\\n            newTarget.GetComponent<Targets_movements>().level = level;\\n            targetPool.Add(newTarget);\\n        }\\n\\n        StartCoroutine(SpawnTargetsRoutine());\\n    }\\n\\n    IEnumerator SpawnTargetsRoutine()\\n    {\\n        while (true)\\n        {\\n            yield return new WaitForSeconds(spawnInterval);\\n\\n            if (GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets)\\n            {\\n                SpawnTarget();\\n            }\\n        }\\n    }\\n\\n    void SpawnTarget()\\n    {\\n        foreach (var pooledTarget in targetPool)\\n        {\\n            if (!pooledTarget.activeSelf)\\n            {\\n                Vector3 spawnPosition = new Vector3(\\n                    UnityEngine.Random.Range(-spawnRange, spawnRange),  // Random x position\\n                    UnityEngine.Random.Range(1f, 5f),       // Random y position between 1 and 5\\n                    0);                                     // z axis is 0 for 2D\\n\\n                pooledTarget.transform.position = spawnPosition;\\n                pooledTarget.SetActive(true);\\n                break;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing Unity.XR.CoreUtils;\\nusing UnityEngine;\\nusing System;\\n\\npublic class Targets : MonoBehaviour\\n{\\n    public GameObject target;\\n    public String level; // Integer representing the difficulty level\\n    public float spawnInterval = 3f; // Seconds between spawns\\n    public int maxTargets = 10; // Max targets allowed in scene\\n\\n    private float spawnTimer = 0f;\\n    private float spawnRange = 5f; // Range for spawning\\n    private Queue<GameObject> targetPool = new Queue<GameObject>();\\n\\n    void Start()\\n    {\\n        level = PlayerPrefs.GetString(\\\"level\\\"); // Default to level 1 (\\\"easy\\\")\\n\\n        // Pre-fill the pool with targets\\n        for (int i = 0; i < maxTargets; i++)\\n        {\\n            GameObject newTarget = Instantiate(target);\\n            newTarget.SetActive(false);\\n            targetPool.Enqueue(newTarget);\\n        }\\n\\n        // Start the spawning coroutine\\n        StartCoroutine(SpawnTargets());\\n    }\\n\\n    IEnumerator SpawnTargets()\\n    {\\n        while (true)\\n        {\\n            yield return new WaitForSeconds(spawnInterval);\\n\\n            if (GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets && targetPool.Count > 0)\\n            {\\n                SpawnTargetFromPool();\\n            }\\n        }\\n    }\\n\\n    void SpawnTargetFromPool()\\n    {\\n        if (targetPool.Count > 0)\\n        {\\n            GameObject newTarget = targetPool.Dequeue();\\n            Vector3 spawnPosition = new Vector3(\\n                UnityEngine.Random.Range(-spawnRange, spawnRange),  // Random x position\\n                UnityEngine.Random.Range(1f, 5f),       // Random y position between 1 and 5\\n                0);                                     // z axis is 0 for 2D\\n\\n            newTarget.transform.position = spawnPosition;\\n            newTarget.transform.rotation = Quaternion.identity;\\n            newTarget.SetActive(true);\\n            newTarget.tag = \\\"Target\\\";\\n            newTarget.GetComponent<Targets_movements>().level = level;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing Unity.XR.CoreUtils;\\nusing UnityEngine;\\nusing System;\\n\\npublic class Targets : MonoBehaviour\\n{\\n    public GameObject target;\\n    public String level;\\n    public float spawnInterval = 3f;\\n    public int maxTargets = 10;\\n\\n    private float spawnTimer = 0f;\\n    private float spawnRange = 5f;\\n    private Queue<GameObject> targetPool;\\n    private int poolSize;\\n\\n    void Start()\\n    {\\n        level = PlayerPrefs.GetString(\\\"level\\\");\\n        poolSize = maxTargets;\\n        CreateObjectPool();\\n    }\\n\\n    void Update()\\n    {\\n        spawnTimer += Time.deltaTime;\\n        if (spawnTimer >= spawnInterval)\\n        {\\n            TrySpawnTarget();\\n            spawnTimer = 0f;\\n        }\\n    }\\n\\n    private void CreateObjectPool()\\n    {\\n        targetPool = new Queue<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(target);\\n            obj.SetActive(false);\\n            obj.tag = \\\"Target\\\";\\n            obj.GetComponent<Targets_movements>().level = level;\\n            targetPool.Enqueue(obj);\\n        }\\n    }\\n\\n    private void TrySpawnTarget()\\n    {\\n        if (GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets)\\n        {\\n            SpawnTarget();\\n        }\\n    }\\n\\n    private void SpawnTarget()\\n    {\\n        if (targetPool.Count > 0)\\n        {\\n            GameObject obj = targetPool.Dequeue();\\n            obj.transform.position = new Vector3(\\n                UnityEngine.Random.Range(-spawnRange, spawnRange),\\n                UnityEngine.Random.Range(1f, 5f),\\n                0\\n            );\\n            obj.SetActive(true);\\n        }\\n    }\\n\\n    public void RecycleTarget(GameObject targetObj)\\n    {\\n        targetObj.SetActive(false);\\n        targetPool.Enqueue(targetObj);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751733913,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":2301,\"prompt_tokens\":461,\"total_tokens\":2762,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"