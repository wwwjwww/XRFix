"{\"id\":\"chatcmpl-Bpyi4yFMCm1DP0gWeandVnQSDOyxQ\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private Queue<GameObject> arrowPool = new Queue<GameObject>();\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n\\n        // Initialize arrow pool with a fixed number of arrows\\n        for (int i = 0; i < 10; i++) // Number can be adjusted based on needs\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null && arrowPool.Count > 0)\\n        {\\n            currentArrow = arrowPool.Dequeue();\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            currentArrow.SetActive(true);\\n            hasArrow = true;\\n        }\\n    }\\n\\n    public void ReturnArrowToPool(GameObject arrow)\\n    {\\n        arrow.SetActive(false);\\n        arrowPool.Enqueue(arrow);\\n    }\\n\\n    private void Fire()\\n    {\\n        // Implement firing logic\\n        // Once an arrow is fired, it should be returned to the pool at some point\\n    }\\n\\n    private void ThrowArrow()\\n    {\\n        // Implement throw logic\\n        // Once an arrow is thrown, it should be returned to the pool at some point\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private Queue<GameObject> arrowPool = new Queue<GameObject>();\\n    public int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        \\n        // Initialize the object pool\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            } \\n            else if (isAttached) \\n            {\\n                Fire();\\n            }\\n        }\\n        else \\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null && arrowPool.Count > 0)\\n        {\\n            currentArrow = arrowPool.Dequeue();\\n            currentArrow.SetActive(true);\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        // Implementation of fire method\\n        // Once fired, the arrow would be deactivated and added back to the pool\\n        if (currentArrow != null)\\n        {\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.SetParent(null);\\n            // Implement arrow firing logic here\\n\\n            // After firing, add back to pool\\n            StartCoroutine(DeactivateArrowAfterFlight(currentArrow));\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n\\n    IEnumerator DeactivateArrowAfterFlight(GameObject arrow)\\n    {\\n        // Wait for some time to simulate flight\\n        yield return new WaitForSeconds(2f);\\n        arrow.SetActive(false);\\n        arrowPool.Enqueue(arrow);\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        // Implementation of throw method\\n\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private Queue<GameObject> arrowPool = new Queue<GameObject>();\\n    private int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n\\n        InitializeArrowPool();\\n    }\\n\\n    void InitializeArrowPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    GameObject GetArrowFromPool()\\n    {\\n        if (arrowPool.Count > 0)\\n        {\\n            var arrow = arrowPool.Dequeue();\\n            arrow.SetActive(true);\\n            return arrow;\\n        }\\n        else\\n        {\\n            // In case the pool is empty, instantiate a new arrow\\n            return Instantiate(arrowPrefab);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            } \\n            else if (isAttached) \\n            {\\n                Fire();\\n            }\\n        }\\n        else \\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = GetArrowFromPool();\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n            isAttached = true;\\n        }\\n    }\\n\\n    void Fire()\\n    {\\n        if (currentArrow != null && isAttached)\\n        {\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.SetParent(null);\\n            // Additional logic for the arrow launch\\n            isAttached = false;\\n            hasArrow = false;\\n        }\\n    }\\n\\n    void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.SetActive(false);\\n            arrowPool.Enqueue(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private Queue<GameObject> arrowPool;\\n    public int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        \\n        InitializeArrowPool();\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else ThrowArrow();\\n    }\\n    \\n    private void InitializeArrowPool()\\n    {\\n        arrowPool = new Queue<GameObject>();\\n\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null && arrowPool.Count > 0)\\n        {\\n            currentArrow = arrowPool.Dequeue();\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            currentArrow.SetActive(true);\\n            hasArrow = true;\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.transform.SetParent(null);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            // Add logic for applying force to fire the arrow\\n            hasArrow = false;\\n            isAttached = false;\\n            RecycleArrow(currentArrow);\\n            currentArrow = null;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            // Implement logic for throwing the arrow\\n            RecycleArrow(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n\\n    private void RecycleArrow(GameObject arrow)\\n    {\\n        arrow.SetActive(false);\\n        arrowPool.Enqueue(arrow);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private Queue<GameObject> arrowPool = new Queue<GameObject>();\\n    private const int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            } \\n            else if (isAttached) \\n            {\\n                Fire();\\n            }\\n        }\\n        else \\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null && arrowPool.Count > 0)\\n        {\\n            currentArrow = arrowPool.Dequeue();\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            currentArrow.SetActive(true);\\n            hasArrow = true;\\n        }\\n    }\\n\\n    private void ReturnArrowToPool(GameObject arrow)\\n    {\\n        arrow.SetActive(false);\\n        arrowPool.Enqueue(arrow);\\n    }\\n\\n    private void Fire()\\n    {\\n        // Implement the logic to fire the arrow\\n    }\\n\\n    private void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            ReturnArrowToPool(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751727796,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":2883,\"prompt_tokens\":468,\"total_tokens\":3351,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"