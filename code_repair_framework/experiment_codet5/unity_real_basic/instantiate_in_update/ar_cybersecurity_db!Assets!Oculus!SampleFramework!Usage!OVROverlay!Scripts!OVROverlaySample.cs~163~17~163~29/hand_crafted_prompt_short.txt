//Here're the buggy code lines from /Assets/Oculus/SampleFramework/Usage/OVROverlay/Scripts/OVROverlaySample.cs:
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;

// BUG: Instantiate in Update() method
// MESSAGE: Update() method is called each frame. It's inefficient to use Instantiate() in Update() method.
//        void Update()
//        {
//
//            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))
//            {
//                if (inMenu) DebugUIBuilder.instance.Hide();
//                else DebugUIBuilder.instance.Show();
//                inMenu = !inMenu;
//            }
//
//
//            if (Input.GetKeyDown(KeyCode.A))
//            {
//                TriggerLoad();
//            }
//        }
//        void SimulateLevelLoad()
//        {
//            int numToPrint = 0;
//            for (int p = 0; p < numLoopsTrigger; p++)
//            {
//                numToPrint++;
//            }
//
//            Debug.Log("Finished " + numToPrint + " Loops");
//            Vector3 playerPos = mainCamera.transform.position;
//            playerPos.y = 0.5f;
//
//            for (int j = 0; j < numLevels; j++)
//            {
//                for (var i = 0; i < numObjectsPerLevel; i++)
//                {
//                    var angle = i * Mathf.PI * 2 / numObjectsPerLevel;
//                    float stagger = (i % 2 == 0) ? 1.5f : 1.0f;
//                    var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;
//                    pos.y = j * heightBetweenItems;
//                    var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);
//                    var newObjTransform = newInst.transform;
//                    newObjTransform.LookAt(playerPos);
//                    Vector3 newAngle = newObjTransform.rotation.eulerAngles;
//                    newAngle.x = 0.0f;
//                    newObjTransform.rotation = Quaternion.Euler(newAngle);
//                    spawnedCubes.Add(newInst);
//                }
//            }
//        }

// FIXED CODE:

// you can try to build an object pool before Update() method has been called.