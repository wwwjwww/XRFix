"{\"id\":\"chatcmpl-B1sZ5eXm3LnltJGpY4uctoJaZS2gr\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    new ParticleSystem particleSystem;\\n    ParticleSystem.Particle[] particles;\\n\\n    ParticleSystem.MainModule particleSystemMainModule;\\n    public LineRenderer lineRendererTemplate;\\n\\n    List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n\\n    Transform _transform;\\n\\t\\n\\tvoid Start () {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n\\n        CreateLineRendererPool();  // Create line renderer pool at startup\\n    }\\n\\n    void CreateLineRendererPool() {\\n        for (int i = 0; i < maxLineRendereres; i++) {\\n            LineRenderer lr = Instantiate(lineRendererTemplate, transform, false);\\n            lr.enabled = false;\\n            lineRenderers.Add(lr);\\n        }\\n    }\\n\\t\\n    void LateUpdate () {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles) {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        particleSystem.GetParticles(particles);\\n        int particleCount = particleSystem.particleCount;\\n\\n        float maxDistanceSqr = maxDistance * maxDistance;\\n\\n        Vector3 p1_position, p2_position;\\n        ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n        switch (simulationSpace) {\\n            case ParticleSystemSimulationSpace.Local:\\n                _transform = transform;\\n                break;\\n            case ParticleSystemSimulationSpace.Custom:\\n                _transform = particleSystemMainModule.customSimulationSpace;\\n                break;\\n            case ParticleSystemSimulationSpace.World:\\n                _transform = null;  // No need to set transform as it's world space\\n                break;\\n            default:\\n                throw new System.NotSupportedException(\\n                    $\\\"Unsupported Simulation Space '{System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)}'.\\\");\\n        }\\n\\n        for (int i = 0; i < particleCount; i++) {\\n            if (lrIndex >= maxLineRendereres)\\n                break;\\n            p1_position = particles[i].position;\\n\\n            int connections = 0;\\n            for (int j = i + 1; j < particleCount; j++) {\\n                p2_position = particles[j].position;\\n                float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                if (distanceSqr <= maxDistanceSqr) {\\n                    LineRenderer lr = lineRenderers[lrIndex];\\n                    lr.enabled = true;\\n                    lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World;\\n                    lr.SetPosition(0, simulationSpace == ParticleSystemSimulationSpace.World ? p1_position : _transform.TransformPoint(p1_position));\\n                    lr.SetPosition(1, simulationSpace == ParticleSystemSimulationSpace.World ? p2_position : _transform.TransformPoint(p2_position));\\n                    lr.startColor = particles[i].color;\\n                    lr.endColor = particles[j].color;\\n\\n                    lrIndex++;\\n                    connections++;\\n\\n                    if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                        break;\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++) {\\n            lineRenderers[i].enabled = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    new ParticleSystem particleSystem;\\n    ParticleSystem.Particle[] particles;\\n\\n    ParticleSystem.MainModule particleSystemMainModule;\\n\\n    public LineRenderer lineRendererTemplate;\\n\\n    List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n\\n    Transform _transform;\\n\\n    private Queue<LineRenderer> lineRendererPool;\\n\\t\\n\\tvoid Start () {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n\\n        // Initialize object pool\\n        lineRendererPool = new Queue<LineRenderer>();\\n        for (int i = 0; i < maxLineRendereres; i++)\\n        {\\n            LineRenderer lr = Instantiate(lineRendererTemplate, transform, false);\\n            lr.enabled = false;\\n            lineRendererPool.Enqueue(lr);\\n        }\\n\\t}\\n\\n\\tvoid LateUpdate () {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles)\\n        {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        if (lineRendererCount > maxLineRendereres)\\n        {\\n            for (int i = maxLineRendereres; i < lineRendererCount; i++)\\n            {\\n                Destroy(lineRenderers[i].gameObject);     \\n            }\\n\\n            int removedCount = lineRendererCount - maxLineRendereres;\\n            lineRenderers.RemoveRange(maxLineRendereres, removedCount);\\n            lineRendererCount -= removedCount;\\n        }\\n        \\n        if (maxConnections > 0 && maxLineRendereres > 0)\\n        {\\n            particleSystem.GetParticles(particles);\\n            int particleCount = particleSystem.particleCount;\\n\\n            float maxDistanceSqr = maxDistance * maxDistance;\\n\\n            Vector3 p1_position, p2_position;\\n\\n            ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n            switch (simulationSpace)\\n            {\\n                case ParticleSystemSimulationSpace.Local:\\n                    {\\n                        _transform = transform;\\n                        break;\\n                    }\\n                case ParticleSystemSimulationSpace.Custom:\\n                    {\\n                        _transform = particleSystemMainModule.customSimulationSpace;\\n                        break;\\n                    }\\n                case ParticleSystemSimulationSpace.World:\\n                    {\\n                        _transform = transform;\\n                        break;\\n                    }\\n                default:\\n                    {\\n                        throw new System.NotSupportedException(\\n                            string.Format(\\\"Unsupported Simulation Space '{0}'.\\\", System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)));\\n                    }\\n            }\\n            for (int i = 0; i < particleCount; i++)\\n            {\\n                if (lrIndex >= maxLineRendereres)\\n                    break;\\n                p1_position = particles[i].position;\\n\\n                int connections = 0;\\n                for (int j = i + 1; j < particleCount; j++)\\n                {\\n                    p2_position = particles[j].position;\\n                    float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                    if (distanceSqr <= maxDistanceSqr)\\n                    {\\n                        LineRenderer lr;\\n\\n                        if (lrIndex == lineRendererCount)\\n                        {\\n                            if (lineRendererPool.Count > 0)\\n                            {\\n                                lr = lineRendererPool.Dequeue();\\n                                lineRenderers.Add(lr);\\n                                lineRendererCount++;\\n                            }\\n                        }\\n\\n                        lr = lineRenderers[lrIndex];\\n\\n                        lr.enabled = true;\\n                        lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World;\\n\\n                        lr.SetPosition(0, p1_position);\\n                        lr.SetPosition(1, p2_position);\\n\\n                        lr.startColor = particles[i].color;\\n                        lr.endColor = particles[j].color;\\n\\n                        lrIndex++;\\n                        connections++;\\n\\n                        if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                            break;\\n\\n                    }\\n                }\\n            }\\n\\n            for (int i = lrIndex; i < lineRendererCount; i++)\\n            {\\n                lineRenderers[i].enabled = false;\\n            }\\n        }\\n\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    private ParticleSystem particleSystem;\\n    private ParticleSystem.Particle[] particles;\\n    private ParticleSystem.MainModule particleSystemMainModule;\\n    public LineRenderer lineRendererTemplate;\\n\\n    private List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n    private Transform _transform;\\n\\n    private Queue<LineRenderer> lineRendererPool = new Queue<LineRenderer>();\\n\\n    void Start() {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n        _transform = transform;\\n\\n        PrepareLineRendererPool(maxLineRendereres);\\n    }\\n\\n    void LateUpdate() {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles) {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        particleSystem.GetParticles(particles);\\n        int particleCount = particleSystem.particleCount;\\n        float maxDistanceSqr = maxDistance * maxDistance;\\n\\n        for (int i = 0; i < particleCount; i++) {\\n            if (lrIndex >= maxLineRendereres) break;\\n\\n            Vector3 p1_position = particles[i].position;\\n            int connections = 0;\\n\\n            for (int j = i + 1; j < particleCount; j++) {\\n                Vector3 p2_position = particles[j].position;\\n                float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                if (distanceSqr <= maxDistanceSqr) {\\n                    LineRenderer lr;\\n                    if (lineRendererPool.Count > 0) {\\n                        lr = lineRendererPool.Dequeue();\\n                        lr.gameObject.SetActive(true);\\n                    } else {\\n                        lr = Instantiate(lineRendererTemplate, _transform, false);\\n                    }\\n                    lineRenderers.Add(lr);\\n\\n                    lr.enabled = true;\\n                    lr.useWorldSpace = _transform == null;\\n                    lr.SetPosition(0, p1_position);\\n                    lr.SetPosition(1, p2_position);\\n\\n                    lr.startColor = particles[i].GetCurrentColor(particleSystem);\\n                    lr.endColor = particles[j].GetCurrentColor(particleSystem);\\n\\n                    lrIndex++;\\n                    connections++;\\n\\n                    if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                        break;\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++) {\\n            lineRenderers[i].enabled = false;\\n            lineRendererPool.Enqueue(lineRenderers[i]);\\n        }\\n\\n        lineRenderers.RemoveRange(lrIndex, lineRendererCount - lrIndex);\\n    }\\n\\n    private void PrepareLineRendererPool(int size) {\\n        for (int i = 0; i < size; i++) {\\n            LineRenderer lr = Instantiate(lineRendererTemplate, _transform, false);\\n            lr.gameObject.SetActive(false);\\n            lineRendererPool.Enqueue(lr);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    new ParticleSystem particleSystem;\\n    ParticleSystem.Particle[] particles;\\n\\n    ParticleSystem.MainModule particleSystemMainModule;\\n\\n    public LineRenderer lineRendererTemplate;\\n\\n    List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n\\n    Transform _transform;\\n\\n    void Start() {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n\\n        // Initialize the object pool\\n        for (int i = 0; i < maxLineRendereres; i++) {\\n            LineRenderer lr = Instantiate(lineRendererTemplate, transform, false);\\n            lr.enabled = false;\\n            lineRenderers.Add(lr);\\n        }\\n    }\\n\\n    void LateUpdate () {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles) {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        particleSystem.GetParticles(particles);\\n        int particleCount = particleSystem.particleCount;\\n\\n        float maxDistanceSqr = maxDistance * maxDistance;\\n\\n        Vector3 p1_position, p2_position;\\n\\n        ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n        switch (simulationSpace) {\\n            case ParticleSystemSimulationSpace.Local:\\n                _transform = transform;\\n                break;\\n            case ParticleSystemSimulationSpace.Custom:\\n                _transform = particleSystemMainModule.customSimulationSpace;\\n                break;\\n            case ParticleSystemSimulationSpace.World:\\n                _transform = transform;\\n                break;\\n            default:\\n                throw new System.NotSupportedException(\\n                    string.Format(\\\"Unsupported Simulation Space '{0}'.\\\", System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)));\\n        }\\n        \\n        for (int i = 0; i < particleCount; i++) {\\n            if (lrIndex >= maxLineRendereres)\\n                break;\\n                \\n            p1_position = particles[i].position;\\n            int connections = 0;\\n\\n            for (int j = i + 1; j < particleCount; j++) {\\n                p2_position = particles[j].position;\\n                float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                if (distanceSqr <= maxDistanceSqr) {\\n                    if (lrIndex == lineRendererCount)\\n                        break;\\n                    \\n                    LineRenderer lr = lineRenderers[lrIndex];\\n                    lr.enabled = true;\\n                    lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World ? true : false;\\n\\n                    lr.SetPosition(0, p1_position);\\n                    lr.SetPosition(1, p2_position);\\n\\n                    lr.startColor = particles[i].color;\\n                    lr.endColor = particles[j].color;\\n\\n                    lrIndex++;\\n                    connections++;\\n\\n                    if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                        break;\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++) {\\n            lineRenderers[i].enabled = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    private new ParticleSystem particleSystem;\\n    private ParticleSystem.Particle[] particles;\\n\\n    private ParticleSystem.MainModule particleSystemMainModule;\\n\\n    public LineRenderer lineRendererTemplate;\\n\\n    private List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n\\n    private Transform _transform;\\n\\n    void Start () {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n\\n        // Initialize the line renderer pool\\n        for (int i = 0; i < maxLineRendereres; i++) {\\n            LineRenderer lr = Instantiate(lineRendererTemplate, transform);\\n            lr.enabled = false;\\n            lineRenderers.Add(lr);\\n        }\\n    }\\n\\n    void LateUpdate () {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles)\\n        {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        particleSystem.GetParticles(particles);\\n        int particleCount = particleSystem.particleCount;\\n\\n        float maxDistanceSqr = maxDistance * maxDistance;\\n\\n        Vector3 p1_position, p2_position;\\n\\n        ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n        switch (simulationSpace)\\n        {\\n            case ParticleSystemSimulationSpace.Local:\\n                _transform = transform;\\n                break;\\n            case ParticleSystemSimulationSpace.Custom:\\n                _transform = particleSystemMainModule.customSimulationSpace;\\n                break;\\n            case ParticleSystemSimulationSpace.World:\\n                _transform = transform;\\n                break;\\n            default:\\n                throw new System.NotSupportedException(\\n                    string.Format(\\\"Unsupported Simulation Space '{0}'.\\\", System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)));\\n        }\\n\\n        for (int i = 0; i < particleCount; i++)\\n        {\\n            if (lrIndex >= maxLineRendereres)\\n                break;\\n\\n            p1_position = particles[i].position;\\n\\n            int connections = 0;\\n            for (int j = i + 1; j < particleCount; j++)\\n            {\\n                p2_position = particles[j].position;\\n                float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                if (distanceSqr <= maxDistanceSqr)\\n                {\\n                    LineRenderer lr = lineRenderers[lrIndex];\\n\\n                    lr.enabled = true;\\n                    lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World;\\n\\n                    lr.SetPosition(0, p1_position);\\n                    lr.SetPosition(1, p2_position);\\n\\n                    lr.startColor = particles[i].color;\\n                    lr.endColor = particles[j].color;\\n\\n                    lrIndex++;\\n                    connections++;\\n\\n                    if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                        break;\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++)\\n        {\\n            lineRenderers[i].enabled = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787775,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_2f6c0d94dc\",\"usage\":{\"completion_tokens\":3707,\"prompt_tokens\":1051,\"total_tokens\":4758,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"