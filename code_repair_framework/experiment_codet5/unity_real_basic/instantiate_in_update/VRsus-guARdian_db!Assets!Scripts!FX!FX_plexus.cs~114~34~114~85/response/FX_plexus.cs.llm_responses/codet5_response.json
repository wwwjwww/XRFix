{
  "input_code": "\tvoid LateUpdate () {\n        int maxParticles = particleSystemMainModule.maxParticles;\n\n        if (particles == null || particles.Length < maxParticles)\n        {\n            particles = new ParticleSystem.Particle[maxParticles];\n        }\n\n        int lrIndex = 0;\n        int lineRendererCount = lineRenderers.Count;\n\n        if (lineRendererCount > maxLineRendereres)\n        {\n            for (int i = maxLineRendereres; i < lineRendererCount; i++)\n            {\n                Destroy(lineRenderers[i].gameObject);     \n            }\n\n            int removedCount = lineRendererCount - maxLineRendereres;\n            lineRenderers.RemoveRange(maxLineRendereres, removedCount);\n            lineRendererCount -= removedCount;\n        }\n       \n\n        if (maxConnections > 0 && maxLineRendereres > 0)\n        {\n\n\n            particleSystem.GetParticles(particles);\n            int particleCount = particleSystem.particleCount;\n\n            float maxDistanceSqr = maxDistance * maxDistance;\n\n        \n\n            Vector3 p1_position, p2_position;\n\n            ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\n\n            switch (simulationSpace)\n            {\n                case ParticleSystemSimulationSpace.Local:\n                    {\n                        _transform = transform;\n\n                        break;\n                    }\n                case ParticleSystemSimulationSpace.Custom:\n                    {\n                        _transform = particleSystemMainModule.customSimulationSpace;\n\n                        break;\n                    }\n                case ParticleSystemSimulationSpace.World:\n                    {\n                        _transform = transform;\n\n                        break;\n                    }\n                default:\n                    {\n                        throw new System.NotSupportedException(\n                            string.Format(\"Unsupported Simulation Space '{0}'.\", System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)));\n                    }\n            }\n            for (int i = 0; i < particleCount; i++)\n            {\n                if (lrIndex >= maxLineRendereres)\n                    break;\n                p1_position = particles[i].position;\n\n                int connections = 0;\n                for (int j = i + 1; j < particleCount; j++)\n                {\n                    p2_position = particles[j].position;\n                    float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\n\n                    if (distanceSqr <= maxDistanceSqr)\n                    {\n                        LineRenderer lr;\n\n                        if (lrIndex == lineRendererCount)\n                        {\n<BUGS>                            lr = Instantiate(lineRendererTemplate, _transform, false);\n<BUGE>                            lineRenderers.Add(lr);\n\n                            lineRendererCount++;\n\n                        }\n\n                        lr = lineRenderers[lrIndex];\n\n                        lr.enabled = true;\n                        lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World ? true : false;\n                        \n                        lr.SetPosition(0, p1_position);\n                        lr.SetPosition(1, p2_position);\n\n                        lr.startColor = particles[i].color;\n                        lr.endColor = particles[j].color;\n\n\n                        lrIndex++;\n                        connections++;\n\n                        if (connections >= maxConnections || lrIndex >= maxLineRendereres)\n                            break;\n\n                    }\n\n                }\n            }\n        }\n\n        for (int i = lrIndex; i < lineRendererCount; i++)\n        {\n            lineRenderers[i].enabled = false;\n        }\n\n\t}\n",
  "model_outputs": [
    {
      "response_id": 1,
      "output": "<FIXS> <FIXE>"
    },
    {
      "response_id": 2,
      "output": "<FIXS> <FIXE> <FIXS> double distance=0; <FIXE> <FIXS> double p2_position=particleSystem.initialPosition.clone(); double p3_position=particleSystem.initialPosition.clone(); <FIXE>"
    },
    {
      "response_id": 3,
      "output": "<FIXS> double distStart=0; double distLength=Math.sqrt(Math.abs(particleSystem.getDistance(p1_position.x, p2_position.y)); <FIXE> <FIXS> double distStart=Math.sqrt(Math.abs(p1_position.y, p2_position.z)); <FIXE>"
    },
    {
      "response_id": 4,
      "output": "<FIXS> double distStart=0; double distLength=Math.sqrt(Math.abs(particleSystem.getDistance(p1_position.x, p2_position.y)); <FIXE> <FIXS> double distStart=Math.sqrt(Math.abs(p1_position.y, p2_position.y)); <FIXE>"
    },
    {
      "response_id": 5,
      "output": "<FIXS> PDSetPos pos=new DDS(0, 0, (maxDistance * maxDistance), maxDistance); <FIXE>"
    }
  ],
  "model_path": "Salesforce/codet5-base",
  "parameters": {
    "max_source_length": 512,
    "max_target_length": 256,
    "beam_size": 10,
    "num_responses": 5,
    "diversity_penalty": 1.0
  }
}