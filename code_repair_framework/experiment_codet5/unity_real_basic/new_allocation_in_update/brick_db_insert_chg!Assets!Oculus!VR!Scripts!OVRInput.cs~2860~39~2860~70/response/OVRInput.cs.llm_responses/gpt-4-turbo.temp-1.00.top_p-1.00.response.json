"{\"id\":\"chatcmpl-Bq3PNqgqIW6ypACsEmT9aFnTY5LhW\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing System.Runtime.InteropServices;\\nusing UnityEngine;\\nusing Node = UnityEngine.XR.XRNode;\\n\\npublic class GamepadController : MonoBehaviour\\n{\\n    private OVRPlugin.ControllerState4 currentState;\\n    private OVRPlugin.ControllerState4 previousState;\\n    private bool initialized = true;\\n    private const float AXIS_AS_BUTTON_THRESHOLD = 0.5f;\\n\\n    void Awake()\\n    {\\n        // Allocate once at the beginning\\n        currentState = new OVRPlugin.ControllerState4();\\n    }\\n\\n    public Controller Update()\\n    {\\n        if (!initialized)\\n        {\\n            return Controller.None;\\n        }\\n\\n        bool result = OVR_GamepadController_Update();\\n\\n        if (result)\\n            currentState.ConnectedControllers = (uint)Controller.Gamepad;\\n\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.A))\\n            currentState.Buttons |= (uint)RawButton.A;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.B))\\n            currentState.Buttons |= (uint)RawButton.B;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.X))\\n            currentState.Buttons |= (uint)RawButton.X;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Y))\\n            currentState.Buttons |= (uint)RawButton.Y;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Up))\\n            currentState.Buttons |= (uint)RawButton.DpadUp;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Down))\\n            currentState.Buttons |= (uint)RawButton.DpadDown;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Left))\\n            currentState.Buttons |= (uint)RawButton.DpadLeft;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Right))\\n            currentState.Buttons |= (uint)RawButton.DpadRight;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Start))\\n            currentState.Buttons |= (uint)RawButton.Start;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Back))\\n            currentState.Buttons |= (uint)RawButton.Back;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.LStick))\\n            currentState.Buttons |= (uint)RawButton.LThumbstick;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.RStick))\\n            currentState.Buttons |= (uint)RawButton.RThumbstick;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.LeftShoulder))\\n            currentState.Buttons |= (uint)RawButton.LShoulder;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.RightShoulder))\\n            currentState.Buttons |= (uint)RawButton.RShoulder;\\n\\n        currentState.LThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.LeftXAxis);\\n        currentState.LThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.LeftYAxis);\\n        currentState.RThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.RightXAxis);\\n        currentState.RThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.RightYAxis);\\n        currentState.LIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.LeftTrigger);\\n        currentState.RIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.RightTrigger);\\n\\n        if (currentState.LIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.LIndexTrigger;\\n        if (currentState.LHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.LHandTrigger;\\n        if (currentState.LThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.LThumbstickUp;\\n        if (currentState.LThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.LThumbstickDown;\\n        if (currentState.LThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.LThumbstickLeft;\\n        if (currentState.LThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.LThumbstickRight;\\n\\n        if (currentState.RIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.RIndexTrigger;\\n        if (currentState.RHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.RHandTrigger;\\n        if (currentState.RThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.RThumbstickUp;\\n        if (currentState.RThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.RThumbstickDown;\\n        if (currentState.RThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.RThumbstickLeft;\\n        if (currentState.RThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n            currentState.Buttons |= (uint)RawButton.RThumbstickRight;\\n\\n        previousState = currentState;\\n\\n        return ((Controller)currentState.ConnectedControllers & controllerType);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nusing System;\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing System.Runtime.InteropServices;\\nusing UnityEngine;\\nusing Node = UnityEngine.XR.XRNode;\\n\\npublic class GamepadController : MonoBehaviour\\n{\\n    private OVRPlugin.ControllerState4 currentState;\\n    private OVRPlugin.ControllerState4 previousState;\\n    private bool initialized;\\n    private const float AXIS_AS_BUTTON_THRESHOLD = 0.5f;\\n    private Controller controllerType;\\n\\n    // Allocate OVRPlugin.ControllerState4 once outside of the Update method\\n    private OVRPlugin.ControllerState4 state = new OVRPlugin.ControllerState4();\\n\\n    public override Controller Update()\\n    {\\n        if (!initialized)\\n        {\\n            return Controller.None;\\n        }\\n\\n        bool result = OVR_GamepadController_Update();\\n\\n        state.ConnectedControllers = result ? (uint)Controller.Gamepad : 0u;\\n\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.A))\\n            state.Buttons |= (uint)RawButton.A;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.B))\\n            state.Buttons |= (uint)RawButton.B;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.X))\\n            state.Buttons |= (uint)RawButton.X;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Y))\\n            state.Buttons |= (uint)RawButton.Y;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Up))\\n            state.Buttons |= (uint)RawButton.DpadUp;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Down))\\n            state.Buttons |= (uint)RawButton.DpadDown;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Left))\\n            state.Buttons |= (uint)RawButton.DpadLeft;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Right))\\n            state.Buttons |= (uint)RawButton.DpadRight;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Start))\\n            state.Buttons |= (uint)RawButton.Start;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Back))\\n            state.Buttons |= (uint)RawButton.Back;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.LStick))\\n            state.Buttons |= (uint)RawButton.LThumbstick;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.RStick))\\n            state.Buttons |= (uint)RawButton.RThumbstick;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.LeftShoulder))\\n            state.Buttons |= (uint)RawButton.LShoulder;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.RightShoulder))\\n            state.Buttons |= (uint)RawButton.RShoulder;\\n\\n        state.LThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.LeftXAxis);\\n        state.LThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.LeftYAxis);\\n        state.RThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.RightXAxis);\\n        state.RThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.RightYAxis);\\n        state.LIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.LeftTrigger);\\n        state.RIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.RightTrigger);\\n\\n        if (state.LIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LIndexTrigger;\\n        if (state.LHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LHandTrigger;\\n        if (state.LThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LThumbstickUp;\\n        if (state.LThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LThumbstickDown;\\n        if (state.LThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LThumbstickLeft;\\n        if (state.LThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LThumbstickRight;\\n\\n        if (state.RIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RIndexTrigger;\\n        if (state.RHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RHandTrigger;\\n        if (state.RThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RThumbstickUp;\\n        if (state.RThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RThumbstickDown;\\n        if (state.RThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RThumbstickLeft;\\n        if (state.RThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RThumbstickRight;\\n\\n        previousState = currentState;\\n        currentState = state;\\n\\n        return ((Controller)currentState.ConnectedControllers & controllerType);\\n    }\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing System.Runtime.InteropServices;\\nusing UnityEngine;\\nusing Node = UnityEngine.XR.XRNode;\\n\\n// Pre-allocate the ControllerState4 outside of the Update method\\nprivate OVRPlugin.ControllerState4 state = new OVRPlugin.ControllerState4();\\n\\npublic override Controller Update()\\n{\\n    if (!initialized)\\n    {\\n        return Controller.None;\\n    }\\n\\n    // Reuse the pre-allocated `state` object\\n    bool result = OVR_GamepadController_Update();\\n\\n    if (result)\\n        state.ConnectedControllers = (uint)Controller.Gamepad;\\n\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.A))\\n        state.Buttons |= (uint)RawButton.A;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.B))\\n        state.Buttons |= (uint)RawButton.B;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.X))\\n        state.Buttons |= (uint)RawButton.X;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Y))\\n        state.Buttons |= (uint)RawButton.Y;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Up))\\n        state.Buttons |= (uint)RawButton.DpadUp;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Down))\\n        state.Buttons |= (uint)RawButton.DpadDown;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Left))\\n        state.Buttons |= (uint)RawButton.DpadLeft;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Right))\\n        state.Buttons |= (uint)RawButton.DpadRight;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Start))\\n        state.Buttons |= (uint)RawButton.Start;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Back))\\n        state.Buttons |= (uint)RawButton.Back;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.LStick))\\n        state.Buttons |= (uint)RawButton.LThumbstick;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.RStick))\\n        state.Buttons |= (uint)RawButton.RThumbstick;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.LeftShoulder))\\n        state.Buttons |= (uint)RawButton.LShoulder;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.RightShoulder))\\n        state.Buttons |= (uint)RawButton.RShoulder;\\n\\n    state.LThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.LeftXAxis);\\n    state.LThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.LeftYAxis);\\n    state.RThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.RightXAxis);\\n    state.RThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.RightYAxis);\\n    state.LIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.LeftTrigger);\\n    state.RIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.RightTrigger);\\n\\n    if (state.LIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.LIndexTrigger;\\n    if (state.LHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.LHandTrigger;\\n    if (state.LThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.LThumbstickUp;\\n    if (state.LThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.LThumbstickDown;\\n    if (state.LThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.LThumbstickLeft;\\n    if (state.LThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.LThumbstickRight;\\n\\n    if (state.RIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.RIndexTrigger;\\n    if (state.RHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.RHandTrigger;\\n    if (state.RThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.RThumbstickUp;\\n    if (state.RThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.RThumbstickDown;\\n    if (state.RThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.RThumbstickLeft;\\n    if (state.RThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n        state.Buttons |= (uint)RawButton.RThumbstickRight;\\n\\n    previousState = currentState;\\n    currentState = state;\\n\\n    return ((Controller)currentState.ConnectedControllers & controllerType);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprivate OVRPlugin.ControllerState4 currentState = new OVRPlugin.ControllerState4();\\nprivate OVRPlugin.ControllerState4 previousState;\\n\\npublic override Controller Update()\\n{\\n    if (!initialized)\\n    {\\n        return Controller.None;\\n    }\\n\\n    // Reuse the existing allocated state object\\n    bool result = OVR_GamepadController_Update();\\n\\n    if (result)\\n        currentState.ConnectedControllers = (uint)Controller.Gamepad;\\n\\n    currentState.Buttons = 0; // Reset buttons before setting new state\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.A))\\n        currentState.Buttons |= (uint)RawButton.A;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.B))\\n        currentState.Buttons |= (uint)RawButton.B;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.X))\\n        currentState.Buttons |= (uint)RawButton.X;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Y))\\n        currentState.Buttons |= (uint)RawButton.Y;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Up))\\n        currentState.Buttons |= (uint)RawButton.DpadUp;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Down))\\n        currentState.Buttons |= (uint)RawButton.DpadDown;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Left))\\n        currentState.Buttons |= (uint)RawButton.DpadLeft;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Right))\\n        currentState.Buttons |= (uint)RawButton.DpadRight;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Start))\\n        currentState.Buttons |= (uint)RawButton.Start;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.Back))\\n        currentState.Buttons |= (uint)RawButton.Back;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.LStick))\\n        currentState.Buttons |= (uint)RawButton.LThumbstick;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.RStick))\\n        currentState.Buttons |= (uint)RawButton.RThumbstick;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.LeftShoulder))\\n        currentState.Buttons |= (uint)RawButton.LShoulder;\\n    if (OVR_GamepadController_GetButton((int)ButtonGPC.RightShoulder))\\n        currentState.Buttons |= (uint)RawButton.RShoulder;\\n\\n    currentState.LThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.LeftXAxis);\\n    currentState.LThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.LeftYAxis);\\n    currentState.RThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.RightXAxis);\\n    currentState.RThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.RightYAxis);\\n    currentState.LIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.LeftTrigger);\\n    currentState.RIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.RightTrigger);\\n\\n    if (currentState.LIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.LIndexTrigger;\\n    if (currentState.LHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.LHandTrigger;\\n    if (currentState.LThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.LThumbstickUp;\\n    if (currentState.LThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.LThumbstickDown;\\n    if (currentState.LThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.LThumbstickLeft;\\n    if (currentState.LThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.LThumbstickRight;\\n\\n    if (currentState.RIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.RIndexTrigger;\\n    if (currentState.RHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.RHandTrigger;\\n    if (currentState.RThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.RThumbstickUp;\\n    if (currentState.RThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.RThumbstickDown;\\n    if (currentState.RThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.RThumbstickLeft;\\n    if (currentState.RThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n        currentState.Buttons |= (uint)RawButton.RThumbstickRight;\\n\\n    previousState = currentState;\\n    return ((Controller)currentState.ConnectedControllers & controllerType);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing System.Runtime.InteropServices;\\nusing UnityEngine;\\nusing Node = UnityEngine.XR.XRNode;\\n\\npublic class ControllerUpdate : MonoBehaviour\\n{\\n    private OVRPlugin.ControllerState4 state;\\n    private bool initialized;\\n    private Controller currentState;\\n    private Controller previousState;\\n    private Controller controllerType;\\n\\n    void Start()\\n    {\\n        // Allocate state at the start, before Update is called\\n        state = new OVRPlugin.ControllerState4();\\n    }\\n\\n    public Controller UpdateController()\\n    {\\n        if (!initialized)\\n        {\\n            return Controller.None;\\n        }\\n\\n        bool result = OVR_GamepadController_Update();\\n\\n        if (result)\\n            state.ConnectedControllers = (uint)Controller.Gamepad;\\n\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.A))\\n            state.Buttons |= (uint)RawButton.A;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.B))\\n            state.Buttons |= (uint)RawButton.B;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.X))\\n            state.Buttons |= (uint)RawButton.X;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Y))\\n            state.Buttons |= (uint)RawButton.Y;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Up))\\n            state.Buttons |= (uint)RawButton.DpadUp;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Down))\\n            state.Buttons |= (uint)RawButton.DpadDown;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Left))\\n            state.Buttons |= (uint)RawButton.DpadLeft;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Right))\\n            state.Buttons |= (uint)RawButton.DpadRight;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Start))\\n            state.Buttons |= (uint)RawButton.Start;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.Back))\\n            state.Buttons |= (uint)RawButton.Back;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.LStick))\\n            state.Buttons |= (uint)RawButton.LThumbstick;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.RStick))\\n            state.Buttons |= (uint)RawButton.RThumbstick;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.LeftShoulder))\\n            state.Buttons |= (uint)RawButton.LShoulder;\\n        if (OVR_GamepadController_GetButton((int)ButtonGPC.RightShoulder))\\n            state.Buttons |= (uint)RawButton.RShoulder;\\n\\n        state.LThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.LeftXAxis);\\n        state.LThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.LeftYAxis);\\n        state.RThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.RightXAxis);\\n        state.RThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.RightYAxis);\\n        state.LIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.LeftTrigger);\\n        state.RIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.RightTrigger);\\n\\n        if (state.LIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LIndexTrigger;\\n        if (state.LHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LHandTrigger;\\n        if (state.LThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LThumbstickUp;\\n        if (state.LThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LThumbstickDown;\\n        if (state.LThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LThumbstickLeft;\\n        if (state.LThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.LThumbstickRight;\\n\\n        if (state.RIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RIndexTrigger;\\n        if (state.RHandTrigger >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RHandTrigger;\\n        if (state.RThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RThumbstickUp;\\n        if (state.RThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RThumbstickDown;\\n        if (state.RThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RThumbstickLeft;\\n        if (state.RThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD)\\n            state.Buttons |= (uint)RawButton.RThumbstickRight;\\n\\n        previousState = currentState;\\n        currentState = state;\\n\\n        return ((Controller)currentState.ConnectedControllers & controllerType);\\n    }\\n\\n    private bool OVR_GamepadController_Update()\\n    {\\n        // Simulate update logic.\\n        return true;\\n    }\\n\\n    private bool OVR_GamepadController_GetButton(int buttonCode)\\n    {\\n        // Simulate button press logic.\\n        return UnityEngine.Random.value > 0.5f;\\n    }\\n\\n    private float OVR_GamepadController_GetAxis(int axisCode)\\n    {\\n        // Simulate axis movement.\\n        return UnityEngine.Random.Range(-1.0f, 1.0f);\\n    }\\n\\n    private const float AXIS_AS_BUTTON_THRESHOLD = 0.5f;\\n\\n    private enum Controller\\n    {\\n        None,\\n        Gamepad\\n    }\\n\\n    private enum ButtonGPC\\n    {\\n        A,\\n        B,\\n        X,\\n        Y,\\n        Up,\\n        Down,\\n        Left,\\n        Right,\\n        Start,\\n        Back,\\n        LStick,\\n        RStick,\\n        LeftShoulder,\\n        RightShoulder\\n    }\\n\\n    private enum AxisGPC\\n    {\\n        LeftXAxis,\\n        LeftYAxis,\\n        RightXAxis,\\n        RightYAxis,\\n        LeftTrigger,\\n        RightTrigger\\n    }\\n\\n    private struct RawButton\\n    {\\n        public const uint A = 0x0001;\\n        public const uint B = 0x0002;\\n        public const uint X = 0x0010;\\n        public const uint Y = 0x0020;\\n        public const uint DpadUp = 0x0100;\\n        public const uint DpadDown = 0x0200;\\n        public const uint DpadLeft = 0x0400;\\n        public const uint DpadRight = 0x0800;\\n        public const uint Start = 0x1000;\\n        public const uint Back = 0x2000;\\n        public const uint LThumbstick = 0x4000;\\n        public const uint RThumbstick = 0x8000;\\n        public const uint LShoulder = 0x10000;\\n        public const uint RShoulder = 0x20000;\\n        public const uint LIndexTrigger = 0x40000;\\n        public const uint LHandTrigger = 0x80000;\\n        public const uint LThumbstickUp = 0x100000;\\n        public const uint LThumbstickDown = 0x200000;\\n        public const uint LThumbstickLeft = 0x400000;\\n        public const uint LThumbstickRight = 0x800000;\\n        public const uint RIndexTrigger = 0x1000000;\\n        public const uint RHandTrigger = 0x2000000;\\n        public const uint RThumbstickUp = 0x4000000;\\n        public const uint RThumbstickDown = 0x8000000;\\n        public const uint RThumbstickLeft = 0x10000000;\\n        public const uint RThumbstickRight = 0x20000000;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751745857,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":6251,\"prompt_tokens\":1430,\"total_tokens\":7681,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"