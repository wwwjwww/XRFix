"{\"id\":\"chatcmpl-BpjxdZwVJ3ay9XxAFxv2cjqxqImVl\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> m_PlaneObjects = new List<GameObject>(); // List to manage plane objects\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    private void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        // Update the list of detected planes and create plane visualizers when needed\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        if (m_AllPlanes.Count > m_PlaneObjects.Count)\\n        {\\n            for (int i = m_PlaneObjects.Count; i < m_AllPlanes.Count; i++)\\n            {\\n                GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n                m_PlaneObjects.Add(planeObject);\\n            }\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Here is the fixed code for /Assets/Dodge/Scripts/ARAnchoring.cs:\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> m_PlanePool = new List<GameObject>();\\n    private bool m_IsInitialized = false;\\n\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n\\n        // Build an object pool for plane visualizers.\\n        for (int i = 0; i < 10; i++) // Adjust pool size as needed.\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.SetActive(false);\\n            m_PlanePool.Add(planeObject);\\n        }\\n\\n        m_IsInitialized = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (!m_IsInitialized) return;\\n\\n        if (isVR)\\n        {\\n            foreach (var planeObj in m_PlanePool)\\n            {\\n                planeObj.SetActive(false);\\n            }\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = GetPooledPlane();\\n            if (planeObject != null)\\n            {\\n                planeObject.transform.position = Vector3.zero;\\n                planeObject.transform.rotation = Quaternion.identity;\\n                planeObject.SetActive(true);\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            }\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            hit.Trackable.GetType();\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n\\n    private GameObject GetPooledPlane()\\n    {\\n        foreach (var planeObj in m_PlanePool)\\n        {\\n            if (!planeObj.activeSelf)\\n            {\\n                return planeObj;\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> m_PlaneObjects = new List<GameObject>();\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        ManagePlaneObjects();\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n\\n    private void ManagePlaneObjects()\\n    {\\n        // Enable or create new plane objects according to the detected planes\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            if (i < m_PlaneObjects.Count)\\n            {\\n                m_PlaneObjects[i].GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n                m_PlaneObjects[i].SetActive(true);\\n            }\\n            else\\n            {\\n                GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n                m_PlaneObjects.Add(planeObject);\\n            }\\n        }\\n\\n        // Disable extra plane objects\\n        for (int i = m_AllPlanes.Count; i < m_PlaneObjects.Count; i++)\\n        {\\n            m_PlaneObjects[i].SetActive(false);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    private List<GameObject> m_PlaneObjectPool = new List<GameObject>();\\n\\n    public void Start()\\n    {   \\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_PlaneObjectPool.Count; i++)\\n        {\\n            Destroy(m_PlaneObjectPool[i]);\\n        }\\n        m_PlaneObjectPool.Clear();\\n\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            m_PlaneObjectPool.Add(planeObject);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            hit.Trackable.GetType();\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n    private List<GameObject> m_PlaneVisualizers = new List<GameObject>();\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n\\n        // Reuse or create visualizers as needed\\n        for (int i = m_PlaneVisualizers.Count; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            m_PlaneVisualizers.Add(planeObject); \\n        }\\n\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            m_PlaneVisualizers[i].GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751671101,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":2759,\"prompt_tokens\":1290,\"total_tokens\":4049,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"