"{\"id\":\"chatcmpl-B1sKuZb84mJtR2SZzVYi5s6c7LOGL\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Update()\\n{\\n    if (isPlayerOnObject)\\n    {\\n        fireTimer += Time.deltaTime;\\n        if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n        {\\n            fireTimer = 0;\\n            laserLine.SetPosition(0, laserOrigin.position);\\n            Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n            RaycastHit hit;\\n            if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n            {\\n                if (hit.collider.gameObject == Object)\\n                {\\n                    audioManager.PlaySFX(audioManager.swordSound);\\n                    laserLine.SetPosition(1, hit.point);\\n                    audioManager.PlaySFX(audioManager.disappearSound);\\n\\n                    destroyObject.Add(hit.transform.gameObject);\\n                    Object = null; \\n                }\\n            }\\n            else\\n            {\\n                laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n            }\\n            StartCoroutine(ShootLaser());\\n\\n            if (Object == null)\\n            {\\n                GameOver();\\n            }\\n        }\\n    }\\n}\\n\\nprivate IEnumerator ShootLaser()\\n{\\n    laserLine.enabled = true;\\n    yield return new WaitForSeconds(laserDuration);\\n    laserLine.enabled = false;\\n\\n    foreach (GameObject obj in destroyObject)\\n    {\\n        Destroy(obj);\\n    }\\n    destroyObject.Clear();\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    StartCoroutine(CheckForDestruction());\\n}\\n\\nvoid Update()\\n{\\n    if (isPlayerOnObject)\\n    {\\n        fireTimer += Time.deltaTime;\\n        if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n        {\\n            fireTimer = 0;\\n            laserLine.SetPosition(0, laserOrigin.position);\\n            Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n            RaycastHit hit;\\n            if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n            {\\n                if (hit.collider.gameObject == Object)\\n                {\\n                    audioManager.PlaySFX(audioManager.swordSound);\\n                    laserLine.SetPosition(1, hit.point);\\n                    audioManager.PlaySFX(audioManager.disappearSound);\\n                    destroyObject.Add(hit.transform.gameObject);\\n                    Object = null; \\n                }\\n            }\\n            else\\n            {\\n                laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n            }\\n            StartCoroutine(ShootLaser());\\n        }\\n    }\\n}\\n\\nIEnumerator CheckForDestruction()\\n{\\n    while (true)\\n    {\\n        yield return new WaitForSeconds(0.1f);\\n\\n        for (int i = destroyObject.Count - 1; i >= 0; i--)\\n        {\\n            Destroy(destroyObject[i]);\\n            destroyObject.RemoveAt(i);\\n        }\\n\\n        if (Object == null)\\n        {\\n            GameOver();\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    void Update()\\n    {\\n        if (isPlayerOnObject)\\n        {\\n            fireTimer += Time.deltaTime;\\n            if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n            {\\n                fireTimer = 0;\\n                laserLine.SetPosition(0, laserOrigin.position);\\n                Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n                RaycastHit hit;\\n                if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n                {\\n                    if (hit.collider.gameObject == Object)\\n                    {\\n                        audioManager.PlaySFX(audioManager.swordSound);\\n                        laserLine.SetPosition(1, hit.point);\\n\\n                        // Schedule the object for destruction\\n                        StartCoroutine(ScheduleDestruction(hit.transform.gameObject));\\n                        Object = null;\\n                    }\\n                }\\n                else\\n                {\\n                    laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n                }\\n                StartCoroutine(ShootLaser());\\n\\n                if (Object == null)\\n                {\\n                    GameOver();\\n                }\\n            }\\n        }\\n    }\\n\\n    IEnumerator ScheduleDestruction(GameObject target)\\n    {\\n        // Play the disappear sound and wait for it to finish\\n        audioManager.PlaySFX(audioManager.disappearSound);\\n        yield return new WaitForSeconds(audioManager.disappearSound.length);\\n\\n        // Destroy the target object\\n        Destroy(target);\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Update()\\n{\\n    if (isPlayerOnObject)\\n    {\\n        fireTimer += Time.deltaTime;\\n        if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n        {\\n            fireTimer = 0;\\n            laserLine.SetPosition(0, laserOrigin.position);\\n            Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n            RaycastHit hit;\\n            if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n            {\\n                if (hit.collider.gameObject == Object)\\n                {\\n                    StartCoroutine(HandleLaserHit(hit));\\n                }\\n            }\\n            else\\n            {\\n                laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n            }\\n            StartCoroutine(ShootLaser());\\n        }\\n    }\\n}\\n\\nIEnumerator HandleLaserHit(RaycastHit hit)\\n{\\n    audioManager.PlaySFX(audioManager.swordSound);\\n    laserLine.SetPosition(1, hit.point);\\n    audioManager.PlaySFX(audioManager.disappearSound);\\n    yield return new WaitForEndOfFrame();\\n    Destroy(hit.transform.gameObject);\\n    Object = null;\\n\\n    if (Object == null)\\n    {\\n        GameOver();\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.SceneManagement;\\n\\n[RequireComponent(typeof(LineRenderer))]\\npublic class RaycastGun : MonoBehaviour\\n{\\n    public Camera playerCamera;\\n    public Transform laserOrigin;\\n    public GameObject Object;\\n    private bool isPlayerOnObject = false;\\n    public GameObject player;\\n    public float gunRange = 50f;\\n    public float fireRate = 0.2f;\\n    public float laserDuration = 0.05f;\\n\\n    LineRenderer laserLine;\\n    float fireTimer;\\n\\n    AudioManager audioManager;\\n    public List<GameObject> destroyObject = new List<GameObject>();\\n\\n    void Awake()\\n    {\\n        laserLine = GetComponent<LineRenderer>();\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n    }\\n\\n    void Update()\\n    {\\n        if (isPlayerOnObject)\\n        {\\n            fireTimer += Time.deltaTime;\\n            if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n            {\\n                fireTimer = 0;\\n                laserLine.SetPosition(0, laserOrigin.position);\\n                Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n                RaycastHit hit;\\n                if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n                {\\n                    if (hit.collider.gameObject == Object)\\n                    {\\n                        audioManager.PlaySFX(audioManager.swordSound);\\n                        laserLine.SetPosition(1, hit.point);\\n                        audioManager.PlaySFX(audioManager.disappearSound);\\n                        destroyObject.Add(hit.transform.gameObject);\\n                    }\\n                }\\n                else\\n                {\\n                    laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n                }\\n                StartCoroutine(ShootLaser());\\n\\n                if (Object == null)\\n                {\\n                    GameOver();\\n                }\\n            }\\n        }\\n\\n        DestroyObjectsInList();\\n    }\\n\\n    private void DestroyObjectsInList()\\n    {\\n        for (int i = destroyObject.Count - 1; i >= 0; i--)\\n        {\\n            Destroy(destroyObject[i]);\\n            destroyObject.RemoveAt(i);\\n        }\\n    }\\n\\n    private IEnumerator ShootLaser()\\n    {\\n        laserLine.enabled = true;\\n        yield return new WaitForSeconds(laserDuration);\\n        laserLine.enabled = false;\\n    }\\n\\n    private void GameOver()\\n    {\\n        // Implement game over logic\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739786896,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_2f6c0d94dc\",\"usage\":{\"completion_tokens\":1725,\"prompt_tokens\":566,\"total_tokens\":2291,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"