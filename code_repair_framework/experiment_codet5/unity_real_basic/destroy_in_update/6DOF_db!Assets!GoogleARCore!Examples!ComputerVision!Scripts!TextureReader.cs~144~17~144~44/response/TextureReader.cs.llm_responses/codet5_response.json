{
  "input_code": "        public void Update()\n        {\n            if (!enabled)\n            {\n                return;\n            }\n\n\n            switch (m_Command)\n            {\n            case CommandType.Create:\n            {\n                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n                break;\n            }\n\n            case CommandType.Reset:\n            {\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n<BUGS>                m_TextureReaderApi.Destroy();\n<BUGE>                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n                m_ImageBufferIndex = -1;\n                break;\n            }\n\n            case CommandType.ReleasePreviousBuffer:\n            {\n\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n                m_ImageBufferIndex = -1;\n                break;\n            }\n\n            case CommandType.ProcessNextFrame:\n            {\n                if (m_ImageBufferIndex >= 0)\n                {\n\n                    int bufferSize = 0;\n                    IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\n\n                    if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\n                    {\n                        OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\n                    }\n\n\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n                }\n\n                break;\n            }\n\n            case CommandType.None:\n            default:\n                break;\n            }\n\n\n            if (Frame.CameraImage.Texture != null)\n            {\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\n                m_ImageBufferIndex =\n                    m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\n            }\n\n\n            m_Command = CommandType.ProcessNextFrame;\n        }\n",
  "model_outputs": [
    {
      "response_id": 1,
      "output": "<FIXS> <FIXE> <FIXS> <FIXE>"
    },
    {
      "response_id": 2,
      "output": "<FIXS> <FIXE>"
    },
    {
      "response_id": 3,
      "output": "<FIXS> MigrationUtils.DestroyTexture(m_TextureReaderApi); <FIXE> <FIXS> <FIXE>"
    },
    {
      "response_id": 4,
      "output": "<FIXS> <!/*ENDENDEND>> <FIXE>"
    },
    {
      "response_id": 5,
      "output": "<FIXS> <FIXE>"
    }
  ],
  "model_path": "Salesforce/codet5-base",
  "parameters": {
    "max_source_length": 512,
    "max_target_length": 256,
    "beam_size": 10,
    "num_responses": 5,
    "diversity_penalty": 1.0
  }
}