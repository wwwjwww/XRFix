"{\"id\":\"chatcmpl-Bptvh3pqSGxb6qfE4zAuLA8NVZGhx\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n\\n\\tpublic class FireSource : MonoBehaviour\\n\\t{\\n\\t\\tpublic GameObject fireParticlePrefab;\\n\\t\\tpublic bool startActive;\\n\\t\\tprivate GameObject fireObject;\\n\\n\\t\\tpublic ParticleSystem customParticles;\\n\\n\\t\\tpublic bool isBurning;\\n\\n\\t\\tpublic float burnTime;\\n\\t\\tpublic float ignitionDelay = 0;\\n\\t\\tprivate float ignitionTime;\\n\\n\\t\\tprivate Hand hand;\\n\\n\\t\\tpublic AudioSource ignitionSound;\\n\\n\\t\\tpublic bool canSpreadFromThisSource = true;\\n\\n\\t\\tprivate bool isBurningStopping = false; // Tracks if we initiated the stop process\\n\\t\\tprivate float stopTime;\\n\\n\\t\\tvoid Start()\\n\\t\\t{\\n\\t\\t\\tif (startActive)\\n\\t\\t\\t{\\n\\t\\t\\t\\tStartBurning();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid Update()\\n\\t\\t{\\n\\t\\t\\tif ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning && !isBurningStopping)\\n\\t\\t\\t{\\n\\t\\t\\t\\tisBurning = false;\\n\\t\\t\\t\\tisBurningStopping = true;\\n\\t\\t\\t\\tstopTime = Time.time;\\n\\n\\t\\t\\t\\tif (customParticles != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tcustomParticles.Stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (fireObject != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tInvoke(\\\"DestroyFireObject\\\", 1f); // Defer destruction\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tprivate void StartBurning()\\n\\t\\t{\\n\\t\\t\\tisBurning = true;\\n\\t\\t\\tignitionTime = Time.time;\\n\\n\\t\\t\\tif (customParticles != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tcustomParticles.Play();\\n\\t\\t\\t}\\n\\t\\t\\telse if (fireParticlePrefab != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tfireObject = Instantiate(fireParticlePrefab, transform.position, transform.rotation);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (ignitionSound != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tignitionSound.Play();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tprivate void DestroyFireObject()\\n\\t\\t{\\n\\t\\t\\tif (fireObject != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tDestroy(fireObject);\\n\\t\\t\\t\\tfireObject = null;\\n\\t\\t\\t\\tisBurningStopping = false; // reset so we can burn again if needed\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                isBurning = false;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Stop();\\n                }\\n                else\\n                {\\n                    StartCoroutine(RemoveFireObject());\\n                }\\n            }\\n        }\\n\\n        private IEnumerator RemoveFireObject()\\n        {\\n            yield return null; // Wait until the end of the frame\\n            Destroy(fireObject);\\n        }\\n\\n        public void StartBurning()\\n        {\\n            // Method implementation for starting fire\\n            isBurning = true;\\n            ignitionTime = Time.time;\\n            fireObject = Instantiate(fireParticlePrefab, transform.position, transform.rotation);\\n            if (customParticles != null)\\n            {\\n                customParticles.Play();\\n            }\\n            if (ignitionSound != null)\\n            {\\n                ignitionSound.Play();\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n\\n\\tpublic class FireSource : MonoBehaviour\\n\\t{\\n\\t\\tpublic GameObject fireParticlePrefab;\\n\\t\\tpublic bool startActive;\\n\\t\\tprivate GameObject fireObject;\\n\\n\\t\\tpublic ParticleSystem customParticles;\\n\\n\\t\\tpublic bool isBurning;\\n\\n\\t\\tpublic float burnTime;\\n\\t\\tpublic float ignitionDelay = 0;\\n\\t\\tprivate float ignitionTime;\\n\\n\\t\\tprivate Hand hand;\\n\\n\\t\\tpublic AudioSource ignitionSound;\\n\\n\\t\\tpublic bool canSpreadFromThisSource = true;\\n\\n\\t\\tvoid Start()\\n\\t\\t{\\n\\t\\t\\tif (startActive)\\n\\t\\t\\t{\\n\\t\\t\\t\\tStartBurning();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid Update()\\n\\t\\t{\\n\\t\\t\\tif ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n\\t\\t\\t{\\n\\t\\t\\t\\tisBurning = false;\\n\\t\\t\\t\\tif (customParticles != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tcustomParticles.Stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t// Adjusted to deactivate instead of destroy in Update\\n\\t\\t\\t\\t\\tif (fireObject != null)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfireObject.SetActive(false);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tpublic void StartBurning()\\n\\t\\t{\\n\\t\\t\\tisBurning = true;\\n\\t\\t\\tignitionTime = Time.time;\\n\\n\\t\\t\\tif (customParticles != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tcustomParticles.Play();\\n\\t\\t\\t}\\n\\t\\t\\telse if (fireParticlePrefab != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (fireObject == null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tfireObject = Instantiate(fireParticlePrefab, transform.position, transform.rotation);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tfireObject.SetActive(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (ignitionSound != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tignitionSound.Play();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                StopBurning();\\n            }\\n        }\\n\\n        public void StartBurning()\\n        {\\n            if (!isBurning)\\n            {\\n                isBurning = true;\\n                ignitionTime = Time.time;\\n\\n                if (customParticles != null)\\n                {\\n                    customParticles.Play();\\n                }\\n                else\\n                {\\n                    if (fireParticlePrefab != null)\\n                    {\\n                        fireObject = Instantiate(fireParticlePrefab, transform.position, Quaternion.identity);\\n                        fireObject.transform.SetParent(transform);\\n                    }\\n                }\\n\\n                if (ignitionSound != null)\\n                {\\n                    ignitionSound.Play();\\n                }\\n            }\\n        }\\n\\n        public void StopBurning()\\n        {\\n            isBurning = false;\\n\\n            if (customParticles != null)\\n            {\\n                customParticles.Stop();\\n            }\\n            else\\n            {\\n                if (fireObject != null)\\n                {\\n                    Destroy(fireObject);\\n                }\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid FixedUpdate()\\n{\\n    if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n    {\\n        isBurning = false;\\n        if (customParticles != null)\\n        {\\n            customParticles.Stop();\\n        }\\n        else if (fireObject != null)\\n        {\\n            Destroy(fireObject);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751709421,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":1638,\"prompt_tokens\":371,\"total_tokens\":2009,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"