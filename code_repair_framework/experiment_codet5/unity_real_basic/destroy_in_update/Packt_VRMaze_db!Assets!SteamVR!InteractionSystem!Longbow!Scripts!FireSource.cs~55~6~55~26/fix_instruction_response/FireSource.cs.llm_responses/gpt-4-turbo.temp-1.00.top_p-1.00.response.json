"{\"id\":\"chatcmpl-B1sMhs6JSNfD9Mwz91g3rgvx9yVhV\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        // Fixed Update Method\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                StopBurning();\\n            }\\n        }\\n\\n        void StartBurning()\\n        {\\n            if (fireParticlePrefab != null)\\n            {\\n                fireObject = Instantiate(fireParticlePrefab, transform.position, transform.rotation);\\n                isBurning = true;\\n                ignitionTime = Time.time;\\n\\n                if (ignitionSound != null)\\n                {\\n                    ignitionSound.Play();\\n                }\\n            }\\n\\n            if (customParticles != null)\\n            {\\n                customParticles.Play();\\n            }\\n        }\\n\\n        void StopBurning()\\n        {\\n            isBurning = false;\\n            if (customParticles != null)\\n            {\\n                customParticles.Stop();\\n            }\\n            else\\n            {\\n                if (fireObject != null)\\n                {\\n                    // Instead of destroying immediately in Update, queue for destruction\\n                    Destroy(fireObject);\\n                }\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n        public ParticleSystem customParticles;\\n        public bool isBurning;\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n        private Hand hand;\\n        public AudioSource ignitionSound;\\n        public bool canSpreadFromThisSource = true;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                isBurning = false;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Stop();\\n                }\\n                else if (fireObject != null)\\n                {\\n                    // Using an object pool here would be more efficient if frequent creates and destroys occur\\n                    DestroyFire();\\n                }\\n            }\\n        }\\n\\n        private void DestroyFire()\\n        {\\n            Destroy(fireObject);\\n            fireObject = null;\\n        }\\n\\n        private void StartBurning()\\n        {\\n            isBurning = true;\\n            ignitionTime = Time.time;\\n\\n            if (fireParticlePrefab != null)\\n            {\\n                fireObject = Instantiate(fireParticlePrefab, transform.position, Quaternion.identity);\\n                fireObject.transform.SetParent(this.transform);\\n            }\\n\\n            if (customParticles != null)\\n            {\\n                customParticles.Play();\\n            }\\n\\n            if (ignitionSound != null)\\n            {\\n                ignitionSound.Play();\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\\t\\tvoid Update()\\n\\t\\t{\\n\\t\\t\\tif ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n\\t\\t\\t{\\n\\t\\t\\t\\tisBurning = false;\\n\\t\\t\\t\\tif (customParticles != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tcustomParticles.Stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (fireObject != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tfireObject.SetActive(false); // Disable the fire object instead of destroying it\\n\\t\\t\\t\\t\\t// Optionally, you can add fireObject to an object pool here for reuse\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        void FixedUpdate()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                isBurning = false;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Stop();\\n                }\\n                else\\n                {\\n                    // Instead of Destroying the fireObject each frame, disable it or return it to an object pool\\n                    if (fireObject != null)\\n                    {\\n                        fireObject.SetActive(false);\\n                        // Add logic to return fireObject to an object pool if applicable\\n                    }\\n                }\\n            }\\n        }\\n\\n        private void StartBurning()\\n        {\\n            // Add the method logic for StartBurning()\\n            isBurning = true;\\n            ignitionTime = Time.time;\\n            if (fireParticlePrefab != null && fireObject == null)\\n            {\\n                fireObject = Instantiate(fireParticlePrefab, transform.position, Quaternion.identity);\\n            }\\n            if (customParticles != null)\\n            {\\n                customParticles.Play();\\n            }\\n            if (ignitionSound != null)\\n            {\\n                ignitionSound.Play();\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                isBurning = false;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Stop();\\n                }\\n                else\\n                {\\n                    StartCoroutine(DestroyFireObject());\\n                }\\n            }\\n        }\\n\\n        private IEnumerator DestroyFireObject()\\n        {\\n            yield return new WaitForEndOfFrame();\\n            if (fireObject != null)\\n            {\\n                Destroy(fireObject);\\n            }\\n        }\\n\\n        private void StartBurning()\\n        {\\n            // Assuming implementation here\\n            isBurning = true;\\n            ignitionTime = Time.time;\\n            fireObject = Instantiate(fireParticlePrefab, transform.position, transform.rotation);\\n            if (ignitionSound != null)\\n            {\\n                ignitionSound.Play();\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787007,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_2f6c0d94dc\",\"usage\":{\"completion_tokens\":1519,\"prompt_tokens\":360,\"total_tokens\":1879,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"