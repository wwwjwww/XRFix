"{\"id\":\"chatcmpl-B3JfTGp229nmRJsYxGFGiQkb3eXoA\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(AudioSource))]\\npublic class OVRLipSyncContext : OVRLipSyncContextBase\\n{\\n    [Tooltip(\\\"Allow capturing of keyboard input to control operation.\\\")]\\n    public bool enableKeyboardInput = false;\\n    [Tooltip(\\\"Register a mouse/touch callback to control loopback and gain (requires script restart).\\\")]\\n    public bool enableTouchInput = false;\\n    [Tooltip(\\\"Play input audio back through audio output.\\\")]\\n    public bool audioLoopback = false;\\n    [Tooltip(\\\"Key to toggle audio loopback.\\\")]\\n    public KeyCode loopbackKey = KeyCode.L;\\n    [Tooltip(\\\"Show viseme scores in an OVRLipSyncDebugConsole display.\\\")]\\n    public bool showVisemes = false;\\n    [Tooltip(\\\"Key to toggle viseme score display.\\\")]\\n    public KeyCode debugVisemesKey = KeyCode.D;\\n    [Tooltip(\\\"Skip data from the Audio Source. Use if you intend to pass audio data in manually.\\\")]\\n    public bool skipAudioSource = false;\\n    [Tooltip(\\\"Adjust the linear audio gain multiplier before processing lipsync\\\")]\\n    public float gain = 1.0f;\\n\\n    private bool hasDebugConsole = false;\\n\\n    public KeyCode debugLaughterKey = KeyCode.H;\\n    public bool showLaughter = false;\\n    public float laughterScore = 0.0f;\\n\\n    private readonly object processLock = new object();\\n\\n    void Start()\\n    {\\n        if (enableTouchInput)\\n        {\\n            OVRTouchpad.AddListener(LocalTouchEventCallback);\\n        }\\n\\n        OVRLipSyncDebugConsole[] consoles = FindObjectsOfType<OVRLipSyncDebugConsole>();\\n        if (consoles.Length > 0)\\n        {\\n            hasDebugConsole = true;\\n        }\\n    }\\n\\n    void HandleKeyboard()\\n    {\\n        if (Input.GetKeyDown(loopbackKey))\\n        {\\n            ToggleAudioLoopback();\\n        }\\n        else if (Input.GetKeyDown(debugVisemesKey))\\n        {\\n            showVisemes = !showVisemes;\\n\\n            if (showVisemes)\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    Debug.Log(\\\"DEBUG SHOW VISEMES: ENABLED\\\");\\n                }\\n                else\\n                {\\n                    Debug.LogWarning(\\\"Warning: No OVRLipSyncDebugConsole in the scene!\\\");\\n                    showVisemes = false;\\n                }\\n            }\\n            else\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    OVRLipSyncDebugConsole.Clear();\\n                }\\n                Debug.Log(\\\"DEBUG SHOW VISEMES: DISABLED\\\");\\n            }\\n        }\\n        else if (Input.GetKeyDown(debugLaughterKey))\\n        {\\n            showLaughter = !showLaughter;\\n\\n            if (showLaughter)\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    Debug.Log(\\\"DEBUG SHOW LAUGHTER: ENABLED\\\");\\n                }\\n                else\\n                {\\n                    Debug.LogWarning(\\\"Warning: No OVRLipSyncDebugConsole in the scene!\\\");\\n                    showLaughter = false;\\n                }\\n            }\\n            else\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    OVRLipSyncDebugConsole.Clear();\\n                }\\n                Debug.Log(\\\"DEBUG SHOW LAUGHTER: DISABLED\\\");\\n            }\\n        }\\n        else if (Input.GetKeyDown(KeyCode.LeftArrow))\\n        {\\n            gain -= 1.0f;\\n            if (gain < 1.0f) gain = 1.0f;\\n\\n            string g = \\\"LINEAR GAIN: \\\" + gain;\\n\\n            if (hasDebugConsole)\\n            {\\n                OVRLipSyncDebugConsole.Clear();\\n                OVRLipSyncDebugConsole.Log(g);\\n                OVRLipSyncDebugConsole.ClearTimeout(1.5f);\\n            }\\n        }\\n        else if (Input.GetKeyDown(KeyCode.RightArrow))\\n        {\\n            gain += 1.0f;\\n            if (gain > 15.0f) gain = 15.0f;\\n\\n            string g = \\\"LINEAR GAIN: \\\" + gain;\\n\\n            if (hasDebugConsole)\\n            {\\n                OVRLipSyncDebugConsole.Clear();\\n                OVRLipSyncDebugConsole.Log(g);\\n                OVRLipSyncDebugConsole.ClearTimeout(1.5f);\\n            }\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        if (enableKeyboardInput)\\n        {\\n            HandleKeyboard();\\n        }\\n        laughterScore = this.Frame.laughterScore;\\n        DebugShowVisemesAndLaughter();\\n    }\\n\\n    public void PreprocessAudioSamples(float[] data, int channels)\\n    {\\n        for (int i = 0; i < data.Length; ++i)\\n        {\\n            data[i] = data[i] * gain;\\n        }\\n    }\\n\\n    public void PostprocessAudioSamples(float[] data, int channels)\\n    {\\n        if (!audioLoopback)\\n        {\\n            for (int i = 0; i < data.Length; ++i)\\n                data[i] = data[i] * 0.0f;\\n        }\\n    }\\n\\n    public void ProcessAudioSamplesRaw(float[] data, int channels)\\n    {\\n        lock (processLock)\\n        {\\n            if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n            {\\n                return;\\n            }\\n            var frame = this.Frame;\\n            OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n        }\\n    }\\n\\n    public void ProcessAudioSamplesRaw(short[] data, int channels)\\n    {\\n        lock (processLock)\\n        {\\n            if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n            {\\n                return;\\n            }\\n            var frame = this.Frame;\\n            OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(AudioSource))]\\npublic class OVRLipSyncContext : OVRLipSyncContextBase\\n{\\n    // Existing class members unchanged\\n\\n    private readonly object lockObj = new object();\\n\\n    void Start()\\n    {\\n        if (enableTouchInput)\\n        {\\n            OVRTouchpad.AddListener(LocalTouchEventCallback); \\n        }\\n\\n        OVRLipSyncDebugConsole[] consoles = FindObjectsOfType<OVRLipSyncDebugConsole>();\\n        if (consoles.Length > 0)\\n        {\\n            hasDebugConsole = true;\\n        }\\n    }\\n\\n    // Existing methods unchanged\\n\\n    public void ProcessAudioSamplesRaw(float[] data, int channels)\\n    {\\n        lock (lockObj)\\n        {\\n            if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n            {\\n                return;\\n            }\\n            var frame = this.Frame;\\n            OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n        }\\n    }\\n\\n    public void ProcessAudioSamplesRaw(short[] data, int channels)\\n    {\\n        lock (lockObj)\\n        {\\n            if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n            {\\n                return;\\n            }\\n            var frame = this.Frame;\\n            OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n        }\\n    }\\n\\n    // Rest of the class unchanged\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(AudioSource))]\\npublic class OVRLipSyncContext : OVRLipSyncContextBase\\n{\\n    [Tooltip(\\\"Allow capturing of keyboard input to control operation.\\\")]\\n    public bool enableKeyboardInput = false;\\n    [Tooltip(\\\"Register a mouse/touch callback to control loopback and gain (requires script restart).\\\")]\\n    public bool enableTouchInput = false;\\n    [Tooltip(\\\"Play input audio back through audio output.\\\")]\\n    public bool audioLoopback = false;\\n    [Tooltip(\\\"Key to toggle audio loopback.\\\")]\\n    public KeyCode loopbackKey = KeyCode.L;\\n    [Tooltip(\\\"Show viseme scores in an OVRLipSyncDebugConsole display.\\\")]\\n    public bool showVisemes = false;\\n    [Tooltip(\\\"Key to toggle viseme score display.\\\")]\\n    public KeyCode debugVisemesKey = KeyCode.D;\\n    [Tooltip(\\\"Skip data from the Audio Source. Use if you intend to pass audio data in manually.\\\")]\\n    public bool skipAudioSource = false;\\n    [Tooltip(\\\"Adjust the linear audio gain multiplier before processing lipsync\\\")]\\n    public float gain = 1.0f;\\n\\n    private bool hasDebugConsole = false;\\n\\n    public KeyCode debugLaughterKey = KeyCode.H;\\n    public bool showLaughter = false;\\n    public float laughterScore = 0.0f;\\n\\n    private readonly object lockObj = new object();\\n\\n    void Start()\\n    {\\n        if (enableTouchInput)\\n        {\\n            OVRTouchpad.AddListener(LocalTouchEventCallback);\\n        }\\n\\n        OVRLipSyncDebugConsole[] consoles = FindObjectsOfType<OVRLipSyncDebugConsole>();\\n        if (consoles.Length > 0)\\n        {\\n            hasDebugConsole = consoles[0];\\n        }\\n    }\\n\\n    void HandleKeyboard()\\n    {\\n        if (Input.GetKeyDown(loopbackKey))\\n        {\\n            ToggleAudioLoopback();\\n        }\\n        else if (Input.GetKeyDown(debugVisemesKey))\\n        {\\n            showVisemes = !showVisemes;\\n\\n            if (showVisemes)\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    Debug.Log(\\\"DEBUG SHOW VISEMES: ENABLED\\\");\\n                }\\n                else\\n                {\\n                    Debug.LogWarning(\\\"Warning: No OVRLipSyncDebugConsole in the scene!\\\");\\n                    showVisemes = false;\\n                }\\n            }\\n            else\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    OVRLipSyncDebugConsole.Clear();\\n                }\\n                Debug.Log(\\\"DEBUG SHOW VISEMES: DISABLED\\\");\\n            }\\n        }\\n        else if (Input.GetKeyDown(debugLaughterKey))\\n        {\\n            showLaughter = !showLaughter;\\n\\n            if (showLaughter)\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    Debug.Log(\\\"DEBUG SHOW LAUGHTER: ENABLED\\\");\\n                }\\n                else\\n                {\\n                    Debug.LogWarning(\\\"Warning: No OVRLipSyncDebugConsole in the scene!\\\");\\n                    showLaughter = false;\\n                }\\n            }\\n            else\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    OVRLipSyncDebugConsole.Clear();\\n                }\\n                Debug.Log(\\\"DEBUG SHOW LAUGHTER: DISABLED\\\");\\n            }\\n        }\\n        else if (Input.GetKeyDown(KeyCode.LeftArrow))\\n        {\\n            gain -= 1.0f;\\n            if (gain < 1.0f) gain = 1.0f;\\n\\n            string g = \\\"LINEAR GAIN: \\\";\\n            g += gain;\\n\\n            if (hasDebugConsole)\\n            {\\n                OVRLipSyncDebugConsole.Clear();\\n                OVRLipSyncDebugConsole.Log(g);\\n                OVRLipSyncDebugConsole.ClearTimeout(1.5f);\\n            }\\n        }\\n        else if (Input.GetKeyDown(KeyCode.RightArrow))\\n        {\\n            gain += 1.0f;\\n            if (gain > 15.0f)\\n                gain = 15.0f;\\n\\n            string g = \\\"LINEAR GAIN: \\\";\\n            g += gain;\\n\\n            if (hasDebugConsole)\\n            {\\n                OVRLipSyncDebugConsole.Clear();\\n                OVRLipSyncDebugConsole.Log(g);\\n                OVRLipSyncDebugConsole.ClearTimeout(1.5f);\\n            }\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        if (enableKeyboardInput)\\n        {\\n            HandleKeyboard();\\n        }\\n        laughterScore = this.Frame.laughterScore;\\n        DebugShowVisemesAndLaughter();\\n    }\\n\\n    public void PreprocessAudioSamples(float[] data, int channels)\\n    {\\n        for (int i = 0; i < data.Length; ++i)\\n        {\\n            data[i] = data[i] * gain;\\n        }\\n    }\\n\\n    public void PostprocessAudioSamples(float[] data, int channels)\\n    {\\n        if (!audioLoopback)\\n        {\\n            for (int i = 0; i < data.Length; ++i)\\n                data[i] = data[i] * 0.0f;\\n        }\\n    }\\n\\n    public void ProcessAudioSamplesRaw(float[] data, int channels)\\n    {\\n        lock (lockObj)\\n        {\\n            if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n            {\\n                return;\\n            }\\n            var frame = this.Frame;\\n            OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n        }\\n    }\\n\\n    // Use private readonly object lockObj for synchronization\\n    public void ProcessAudioSamplesRaw(short[] data, int channels)\\n    {\\n        lock (lockObj)\\n        {\\n            if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n            {\\n                return;\\n            }\\n            var frame = this.Frame;\\n            OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nprivate readonly object lockObject = new object();\\n\\npublic new void ProcessAudioSamplesRaw(short[] data, int channels)\\n{\\n    lock (lockObject)\\n    {\\n        if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n        {\\n            return;\\n        }\\n        var frame = this.Frame;\\n        OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(AudioSource))]\\npublic class OVRLipSyncContext : OVRLipSyncContextBase\\n{\\n    [Tooltip(\\\"Allow capturing of keyboard input to control operation.\\\")]\\n    public bool enableKeyboardInput = false;\\n    [Tooltip(\\\"Register a mouse/touch callback to control loopback and gain (requires script restart).\\\")]\\n    public bool enableTouchInput = false;\\n    [Tooltip(\\\"Play input audio back through audio output.\\\")]\\n    public bool audioLoopback = false;\\n    [Tooltip(\\\"Key to toggle audio loopback.\\\")]\\n    public KeyCode loopbackKey = KeyCode.L;\\n    [Tooltip(\\\"Show viseme scores in an OVRLipSyncDebugConsole display.\\\")]\\n    public bool showVisemes = false;\\n    [Tooltip(\\\"Key to toggle viseme score display.\\\")]\\n    public KeyCode debugVisemesKey = KeyCode.D;\\n    [Tooltip(\\\"Skip data from the Audio Source. Use if you intend to pass audio data in manually.\\\")]\\n    public bool skipAudioSource = false;\\n    [Tooltip(\\\"Adjust the linear audio gain multiplier before processing lipsync\\\")]\\n    public float gain = 1.0f;\\n\\n    private bool hasDebugConsole = false;\\n\\n    public KeyCode debugLaughterKey = KeyCode.H;\\n    public bool showLaughter = false;\\n    public float laughterScore = 0.0f;\\n\\n    private readonly object _lock = new object();\\n\\n    void Start()\\n    {\\n        if (enableTouchInput)\\n        {\\n            OVRTouchpad.AddListener(LocalTouchEventCallback);\\n        }\\n\\n        OVRLipSyncDebugConsole[] consoles = FindObjectsOfType<OVRLipSyncDebugConsole>();\\n        if (consoles.Length > 0)\\n        {\\n            hasDebugConsole = true;\\n        }\\n    }\\n\\n    void HandleKeyboard()\\n    {\\n        if (Input.GetKeyDown(loopbackKey))\\n        {\\n            ToggleAudioLoopback();\\n        }\\n        else if (Input.GetKeyDown(debugVisemesKey))\\n        {\\n            showVisemes = !showVisemes;\\n\\n            if (showVisemes)\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    Debug.Log(\\\"DEBUG SHOW VISEMES: ENABLED\\\");\\n                }\\n                else\\n                {\\n                    Debug.LogWarning(\\\"Warning: No OVRLipSyncDebugConsole in the scene!\\\");\\n                    showVisemes = false;\\n                }\\n            }\\n            else\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    OVRLipSyncDebugConsole.Clear();\\n                }\\n                Debug.Log(\\\"DEBUG SHOW VISEMES: DISABLED\\\");\\n            }\\n        }\\n        else if (Input.GetKeyDown(debugLaughterKey))\\n        {\\n            showLaughter = !showLaughter;\\n\\n            if (showLaughter)\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    Debug.Log(\\\"DEBUG SHOW LAUGHTER: ENABLED\\\");\\n                }\\n                else\\n                {\\n                    Debug.LogWarning(\\\"Warning: No OVRLipSyncDebugConsole in the scene!\\\");\\n                    showLaughter = false;\\n                }\\n            }\\n            else\\n            {\\n                if (hasDebugConsole)\\n                {\\n                    OVRLipSyncDebugConsole.Clear();\\n                }\\n                Debug.Log(\\\"DEBUG SHOW LAUGHTER: DISABLED\\\");\\n            }\\n        }\\n        else if (Input.GetKeyDown(KeyCode.LeftArrow))\\n        {\\n            gain -= 1.0f;\\n            if (gain < 1.0f) gain = 1.0f;\\n\\n            string g = \\\"LINEAR GAIN: \\\";\\n            g += gain;\\n\\n            if (hasDebugConsole)\\n            {\\n                OVRLipSyncDebugConsole.Clear();\\n                OVRLipSyncDebugConsole.Log(g);\\n                OVRLipSyncDebugConsole.ClearTimeout(1.5f);\\n            }\\n        }\\n        else if (Input.GetKeyDown(KeyCode.RightArrow))\\n        {\\n            gain += 1.0f;\\n            if (gain > 15.0f)\\n                gain = 15.0f;\\n\\n            string g = \\\"LINEAR GAIN: \\\";\\n            g += gain;\\n\\n            if (hasDebugConsole)\\n            {\\n                OVRLipSyncDebugConsole.Clear();\\n                OVRLipSyncDebugConsole.Log(g);\\n                OVRLipSyncDebugConsole.ClearTimeout(1.5f);\\n            }\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        if (enableKeyboardInput)\\n        {\\n            HandleKeyboard();\\n        }\\n        laughterScore = this.Frame.laughterScore;\\n        DebugShowVisemesAndLaughter();\\n    }\\n\\n    public void PreprocessAudioSamples(float[] data, int channels)\\n    {\\n        for (int i = 0; i < data.Length; ++i)\\n        {\\n            data[i] = data[i] * gain;\\n        }\\n    }\\n\\n    public void PostprocessAudioSamples(float[] data, int channels)\\n    {\\n        if (!audioLoopback)\\n        {\\n            for (int i = 0; i < data.Length; ++i)\\n                data[i] = data[i] * 0.0f;\\n        }\\n    }\\n\\n    public void ProcessAudioSamplesRaw(float[] data, int channels)\\n    {\\n        lock (_lock)\\n        {\\n            if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n            {\\n                return;\\n            }\\n            var frame = this.Frame;\\n            OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n        }\\n    }\\n\\n    public void ProcessAudioSamplesRaw(short[] data, int channels)\\n    {\\n        lock (_lock)\\n        {\\n            if (Context == 0 || OVRLipSync.IsInitialized() != OVRLipSync.Result.Success)\\n            {\\n                return;\\n            }\\n            var frame = this.Frame;\\n            OVRLipSync.ProcessFrame(Context, data, frame, channels == 2);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740130287,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_b705f0c291\",\"usage\":{\"completion_tokens\":3996,\"prompt_tokens\":1342,\"total_tokens\":5338,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"