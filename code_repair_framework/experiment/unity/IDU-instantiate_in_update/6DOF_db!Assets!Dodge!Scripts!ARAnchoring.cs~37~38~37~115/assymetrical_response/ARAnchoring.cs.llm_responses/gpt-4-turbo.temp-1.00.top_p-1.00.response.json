"{\"id\":\"chatcmpl-B4fccqfnciR8J3vdmt0ZpumMhQaEs\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> m_PlaneObjects = new List<GameObject>();\\n    public static bool isVR = false;\\n    private bool planesInitialized = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        \\n        if (!planesInitialized)\\n        {\\n            InitializePlaneObjects();\\n            planesInitialized = true;\\n        }\\n\\n        for (int i = 0; i < m_AllPlanes.Count && i < m_PlaneObjects.Count; i++)\\n        {\\n            m_PlaneObjects[i].GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            hit.Trackable.GetType();\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0 ))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n\\n    private void InitializePlaneObjects()\\n    {\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            m_PlaneObjects.Add(planeObject);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\npublic void Update()\\n{\\n    if (isVR)\\n    {\\n        return;\\n    }\\n\\n    Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n    foreach (var plane in m_AllPlanes)\\n    {\\n        if (!plane.SubsumedBy) // Make sure the plane is not subsumed.\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(plane);\\n        }\\n    }\\n\\n    Touch touch;\\n    if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n    {\\n        return;\\n    }\\n\\n    TrackableHit hit;\\n    TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n    if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n    {\\n        if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n        {\\n            Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n        }\\n        else\\n        {\\n            var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n            var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n            andyObject.transform.parent = anchor.transform;\\n            FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n            isVR = true;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> m_PlaneObjectsPool = new List<GameObject>();\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    { \\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n\\n        // Pre-instantiate a pool of objects for detected planes\\n        for (int i = 0; i < 10; i++) // Arbitrary size for the pool\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.SetActive(false);\\n            m_PlaneObjectsPool.Add(planeObject);\\n        }\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = GetUnusedPlaneObject();\\n            if (planeObject != null)\\n            {\\n                planeObject.SetActive(true);\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            }\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0 ))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n\\n    private GameObject GetUnusedPlaneObject()\\n    {\\n        foreach (GameObject planeObject in m_PlaneObjectsPool)\\n        {\\n            if (!planeObject.activeInHierarchy)\\n            {\\n                return planeObject;\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Fixed version of the ARAnchoring class\\n\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> m_PlaneObjects = new List<GameObject>(); // Object pool for plane visualizers\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n\\n        // Pre-instantiate plane objects (object pool)\\n        for (int i = 0; i < 10; ++i) // Assume a max of 10 planes at a time\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.SetActive(false); // Disable until used\\n            m_PlaneObjects.Add(planeObject);\\n        }\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        // Get all detected planes and enable visualizers\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count && i < m_PlaneObjects.Count; i++)\\n        {\\n            GameObject planeObject = m_PlaneObjects[i];\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            planeObject.SetActive(true);\\n        }\\n\\n        // Disable unused plane visualizers\\n        for (int i = m_AllPlanes.Count; i < m_PlaneObjects.Count; i++)\\n        {\\n            m_PlaneObjects[i].SetActive(false);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> planeObjectsPool = new List<GameObject>();\\n    public static bool isVR = false;\\n    private bool planesInitialized = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n\\n        // Pre-instantiate a pool of objects\\n        for (int i = 0; i < 10; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.SetActive(false);\\n            planeObjectsPool.Add(planeObject);\\n        }\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            foreach (var planeObject in planeObjectsPool)\\n            {\\n                planeObject.SetActive(false);\\n            }\\n            return;\\n        }\\n\\n        if (!planesInitialized)\\n        {\\n            Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n            for (int i = 0; i < m_AllPlanes.Count; i++)\\n            {\\n                if (i < planeObjectsPool.Count)\\n                {\\n                    planeObjectsPool[i].SetActive(true);\\n                    planeObjectsPool[i].GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n                }\\n            }\\n            planesInitialized = true;\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n\\n                // Deactivate all plane objects when VR is enabled\\n                foreach (var planeObject in planeObjectsPool)\\n                {\\n                    planeObject.SetActive(false);\\n                }\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740453006,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":2779,\"prompt_tokens\":683,\"total_tokens\":3462,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"