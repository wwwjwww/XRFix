"{\"id\":\"chatcmpl-B1suqI8r67YxZJEAMpatistPyc1hY\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n    void Update()\\n    {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles)\\n        {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        if (lineRendererCount > maxLineRendereres)\\n        {\\n            for (int i = maxLineRendereres; i < lineRendererCount; i++)\\n            {\\n                Destroy(lineRenderers[i].gameObject);\\n            }\\n\\n            int removedCount = lineRendererCount - maxLineRendereres;\\n            lineRenderers.RemoveRange(maxLineRendereres, removedCount);\\n            lineRendererCount -= removedCount;\\n        }\\n\\n\\n        if (maxConnections > 0 && maxLineRendereres > 0)\\n        {\\n            particleSystem.GetParticles(particles);\\n            int particleCount = particleSystem.particleCount;\\n\\n            float maxDistanceSqr = maxDistance * maxDistance;\\n\\n            Vector3 p1_position, p2_position;\\n\\n            ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n            switch (simulationSpace)\\n            {\\n                case ParticleSystemSimulationSpace.Local:\\n                    {\\n                        _transform = transform;\\n                        break;\\n                    }\\n                case ParticleSystemSimulationSpace.Custom:\\n                    {\\n                        _transform = particleSystemMainModule.customSimulationSpace;\\n                        break;\\n                    }\\n                case ParticleSystemSimulationSpace.World:\\n                    {\\n                        _transform = transform;\\n                        break;\\n                    }\\n                default:\\n                    {\\n                        throw new System.NotSupportedException(\\n                            string.Format(\\\"Unsupported Simulation Space '{0}'.\\\", System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)));\\n                    }\\n            }\\n            for (int i = 0; i < particleCount; i++)\\n            {\\n                if (lrIndex >= maxLineRendereres)\\n                    break;\\n                p1_position = particles[i].position;\\n\\n                int connections = 0;\\n                for (int j = i + 1; j < particleCount; j++)\\n                {\\n                    p2_position = particles[j].position;\\n                    float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                    if (distanceSqr <= maxDistanceSqr)\\n                    {\\n                        LineRenderer lr;\\n\\n                        if (lrIndex == lineRendererCount)\\n                        {\\n                            lr = Instantiate(lineRendererTemplate, _transform, false);\\n                            lineRenderers.Add(lr);\\n\\n                            lineRendererCount++;\\n\\n                        }\\n\\n                        lr = lineRenderers[lrIndex];\\n\\n                        lr.enabled = true;\\n                        lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World ? true : false;\\n\\n                        lr.SetPosition(0, p1_position);\\n                        lr.SetPosition(1, p2_position);\\n\\n                        lr.startColor = particles[i].startColor;\\n                        lr.endColor = particles[j].startColor;\\n\\n\\n                        lrIndex++;\\n                        connections++;\\n\\n                        if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                            break;\\n\\n                    }\\n\\n                }\\n            }\\n\\n            for (int i = lrIndex; i < lineRendererCount; i++)\\n            {\\n                lineRenderers[i].enabled = false;\\n            }\\n\\n        }\\n\\n    }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"// Instantiate line renderers in Start() method\\nvoid Start()\\n{\\n    particleSystem = GetComponent<ParticleSystem>();\\n    particleSystemMainModule = particleSystem.main;\\n    \\n    for (int i = 0; i < maxLineRendereres; i++)\\n    {\\n        LineRenderer lr = Instantiate(lineRendererTemplate, _transform, false);\\n        lineRenderers.Add(lr);\\n    }\\n}\\n\\t\\n// Use object pool for line renderers in LateUpdate() method\\nvoid LateUpdate()\\n{\\n    particleSystem.GetParticles(particles);\\n    int particleCount = particleSystem.particleCount;\\n    float maxDistanceSqr = maxDistance * maxDistance;\\n\\n    int lrIndex = 0;\\n    int lineRendererCount = lineRenderers.Count;\\n    int connections = 0;\\n\\n    for (int i = 0; i < particleCount; i++)\\n    {\\n        if (lrIndex >= maxLineRendereres)\\n            break;\\n\\n        Vector3 p1_position = particles[i].position;\\n\\n        for (int j = i + 1; j < particleCount; j++)\\n        {\\n            Vector3 p2_position = particles[j].position;\\n            float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n            if (distanceSqr <= maxDistanceSqr)\\n            {\\n                LineRenderer lr = lineRenderers[lrIndex];\\n\\n                lr.enabled = true;\\n                lr.useWorldSpace = particleSystemMainModule.simulationSpace == ParticleSystemSimulationSpace.World ? true : false;\\n                lr.SetPosition(0, p1_position);\\n                lr.SetPosition(1, p2_position);\\n                lr.startColor = particles[i].GetCurrentColor(particleSystem);\\n                lr.endColor = particles[j].GetCurrentColor(particleSystem);\\n\\n                lrIndex++;\\n                connections++;\\n\\n                if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                    break;\\n            }\\n        }\\n    }\\n\\n    for (int i = lrIndex; i < lineRendererCount; i++)\\n    {\\n        lineRenderers[i].enabled = false;\\n    }\\n}\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"lr = Instantiate(lineRendererTemplate, _transform, false);\\nlineRenderers.Add(lr);\\n\\nlineRendererCount++;\\n\\nlr = lineRenderers[lrIndex];\\n\\nlr.enabled = true;\\nlr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World ? true : false;\\n\\nlr.SetPosition(0, p1_position);\\nlr.SetPosition(1, p2_position);\\n\\nlr.startColor = particles[i].GetCurrentColor(particleSystem);\\nlr.endColor = particles[j].GetCurrentColor(particleSystem);\\n\\nlrIndex++;\\nconnections++;\\n\\nif (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n    break;\\n\\nfor (int i = lrIndex; i < lineRendererCount; i++)\\n{\\n    lineRenderers[i].enabled = false;\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"// Create object pool before Update to avoid instantiating objects each frame\\nList<LineRenderer> lineRendererPool = new List<LineRenderer>();\\n\\nvoid Start()\\n{\\n    for (int i = 0; i < maxLineRendereres; i++)\\n    {\\n        LineRenderer lr = Instantiate(lineRendererTemplate, _transform, false);\\n        lr.enabled = false;\\n        lineRendererPool.Add(lr);\\n    }\\n}\\n\\nvoid LateUpdate()\\n{\\n    // Existing code for LateUpdate here...\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprivate void BuildObjectPool()\\n{\\n    for (int i = 0; i < maxLineRendereres; i++)\\n    {\\n        LineRenderer lr = Instantiate(lineRendererTemplate, _transform, false);\\n        lr.enabled = false;\\n        lineRenderers.Add(lr);\\n    }\\n}\\n\\nvoid Start()\\n{\\n    particleSystem = GetComponent<ParticleSystem>();\\n    particleSystemMainModule = particleSystem.main;\\n    BuildObjectPool();\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739789124,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_0165350fbb\",\"usage\":{\"completion_tokens\":1418,\"prompt_tokens\":1101,\"total_tokens\":2519,\"completion_tokens_details\":null,\"prompt_tokens_details\":null}}"