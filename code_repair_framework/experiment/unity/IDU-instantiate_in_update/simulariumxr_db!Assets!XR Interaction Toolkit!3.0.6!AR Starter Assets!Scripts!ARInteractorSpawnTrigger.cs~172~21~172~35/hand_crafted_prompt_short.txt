//Here're the buggy code lines from /Assets/XR Interaction Toolkit/3.0.6/AR Starter Assets/Scripts/ARInteractorSpawnTrigger.cs:
using UnityEngine.EventSystems;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;
using UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;
using UnityEngine.XR.Interaction.Toolkit.Interactors;
using UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;

// BUG: Instantiate in Update() method
// MESSAGE: Update() method is called each frame. It's inefficient to use Instantiate() in Update() method.
//        void Update()
//        {
//
//
//
//            if (m_AttemptSpawn)
//            {
//                m_AttemptSpawn = false;
//
//
//                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);
//                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))
//                {
//                    if (!(arRaycastHit.trackable is ARPlane arPlane))
//                        return;
//
//                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)
//                        return;
//
//                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);
//                }
//
//                return;
//            }
//
//            var selectState = m_ARInteractor.logicalSelectState;
//
//            if (m_BlockSpawnWhenInteractorHasSelection)
//            {
//                if (selectState.wasPerformedThisFrame)
//                    m_EverHadSelection = m_ARInteractor.hasSelection;
//                else if (selectState.active)
//                    m_EverHadSelection |= m_ARInteractor.hasSelection;
//            }
//
//            m_AttemptSpawn = false;
//            switch (m_SpawnTriggerType)
//            {
//                case SpawnTriggerType.SelectAttempt:
//                    if (selectState.wasCompletedThisFrame)
//                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;
//                    break;
//
//                case SpawnTriggerType.InputAction:
//                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())
//                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;
//                    break;
//            }
//        }
//Here's the definition of function call in another component.
//Related code from /Assets/XR Interaction Toolkit/3.0.6/Starter Assets/Scripts/ObjectSpawner.cs:
using System;
using System.Collections.Generic;
using UnityEngine.XR.Interaction.Toolkit.Utilities;

//        public bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)
//        {
//            if (transform.childCount > 0)
//            {
//                return false;
//            }
//            
//            if (m_OnlySpawnInView)
//            {
//                var inViewMin = m_ViewportPeriphery;
//                var inViewMax = 1f - m_ViewportPeriphery;
//                var pointInViewportSpace = cameraToFace.WorldToViewportPoint(spawnPoint);
//                if (pointInViewportSpace.z < 0f || pointInViewportSpace.x > inViewMax || pointInViewportSpace.x < inViewMin ||
//                    pointInViewportSpace.y > inViewMax || pointInViewportSpace.y < inViewMin)
//                {
//                    return false;
//                }
//            }
//
//            var objectIndex = isSpawnOptionRandomized ? Random.Range(0, m_ObjectPrefabs.Count) : m_SpawnOptionIndex;
//            var newObject = Instantiate(m_ObjectPrefabs[objectIndex]);
//            if (m_SpawnAsChildren)
//                newObject.transform.parent = transform;
//
//            newObject.transform.position = spawnPoint;
//            EnsureFacingCamera();
//
//            var facePosition = m_CameraToFace.transform.position;
//            var forward = facePosition - spawnPoint;
//            BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);
//            newObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);
//
//            if (m_ApplyRandomAngleAtSpawn)
//            {
//                var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);
//                newObject.transform.Rotate(Vector3.up, randomRotation);
//            }
//
//            if (m_SpawnVisualizationPrefab != null)
//            {
//                var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;
//                visualizationTrans.position = spawnPoint;
//                visualizationTrans.rotation = newObject.transform.rotation;
//            }
//
//            objectSpawned?.Invoke(newObject);
//            return true;
//        }

// FIXED CODE:
