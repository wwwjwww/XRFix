"{\"id\":\"chatcmpl-B2U4xMP4yeqnmHkuenrVnLyGto18l\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    private void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        // Update detected planes\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        foreach (var plane in m_AllPlanes)\\n        {\\n            if (plane.SubsumedBy == null && !plane.gameObject.activeSelf)\\n            {\\n                GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(plane);\\n            }\\n        }\\n\\n        // Handle touch input\\n        if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began)\\n        {\\n            HandleTouch(Input.GetTouch(0));\\n        }\\n    }\\n\\n    private void HandleTouch(Touch touch)\\n    {\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if (hit.Trackable is DetectedPlane &&\\n                Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0)\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                AnchorAndInstantiate(hit);\\n            }\\n        }\\n    }\\n\\n    private void AnchorAndInstantiate(TrackableHit hit)\\n    {\\n        var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n        var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n        andyObject.transform.parent = anchor.transform;\\n\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n        isVR = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n    private GameObject instantiatedObject = null;\\n    private Anchor currentAnchor = null;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) &&\\n                (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, \\n                hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                if (instantiatedObject == null)\\n                {\\n                    instantiatedObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                    currentAnchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                    instantiatedObject.transform.parent = currentAnchor.transform;\\n\\n                    // Disable ARCoreBackgroundRenderer and enable VR\\n                    FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                    isVR = true;\\n                }\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    private bool m_EnvironmentSpawned = false; // Added flag to prevent repeated instantiation in Update\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            if (m_AllPlanes[i].TrackingState == TrackingState.Tracking)\\n            {\\n                GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            }\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else if (!m_EnvironmentSpawned) // Ensure environment is instantiated only once\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n                m_EnvironmentSpawned = true; // Set flag to true after spawning\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n\ufeff// Changed DetectedPlaneVisualizer so that planes aren't visible when VR turns on\\n\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        // Update detected planes\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n\\n        foreach (var plane in m_AllPlanes)\\n        {\\n            if (plane.SubsumedBy == null && plane.TrackingState == TrackingState.Tracking)\\n            {\\n                // Instantiate visualizers if not yet instantiated\\n                if (plane.GetComponent<DetectedPlaneVisualizer>() == null)\\n                {\\n                    GameObject planeObject = Instantiate(DetectedPlanePrefab, plane.CenterPose.position, Quaternion.identity, transform);\\n                    planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(plane);\\n                }\\n            }\\n        }\\n\\n        // Handle touch input\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) &&\\n                (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                // Instantiate environment object only once per touch\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n\\n                // Disable AR background rendering and switch to VR mode\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        // Handle plane visualization\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            if (m_AllPlanes[i].SubsumedBy == null && !m_AllPlanes[i].IsDestroyed)\\n            {\\n                GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            }\\n        }\\n\\n        // Handle touch input logic\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane detectedPlane) &&\\n                Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0)\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                StartCoroutine(HandleEnvironmentPlacement(hit));\\n            }\\n        }\\n    }\\n\\n    private IEnumerator HandleEnvironmentPlacement(TrackableHit hit)\\n    {\\n        yield return null; // Ensure proper frame handling\\n\\n        // Instantiate environment in a controlled coroutine\\n        GameObject andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n        var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n        andyObject.transform.parent = anchor.transform;\\n\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n        isVR = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739931979,\"model\":\"gpt-4o-2024-11-20\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_f3927aa00d\",\"usage\":{\"completion_tokens\":2647,\"prompt_tokens\":615,\"total_tokens\":3262,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"