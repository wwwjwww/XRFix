"{\"id\":\"chatcmpl-B1sQGS3SRdMxsS47kyVQ5AvkZRIJv\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n    private Queue<GameObject> linePool = new Queue<GameObject>();\\n    private const int initialPoolSize = 10; // Adjust this number based on expected usage\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void Awake()\\n    {\\n        // Initialize the object pool\\n        for (int i = 0; i < initialPoolSize; i++)\\n        {\\n            GameObject newLine = Instantiate(lineSegmentPrefab);\\n            newLine.SetActive(false);\\n            linePool.Enqueue(newLine);\\n        }\\n    }\\n    \\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine;\\n\\n        if (linePool.Count > 0)\\n        {\\n            newLine = linePool.Dequeue();\\n            newLine.transform.position = inkPos;\\n            newLine.transform.rotation = Quaternion.identity;\\n            newLine.SetActive(true);\\n        }\\n        else\\n        {\\n            newLine = Instantiate(lineSegmentPrefab, inkPos, Quaternion.identity);\\n        }\\n\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n\\n    public void RecycleLine(GameObject lineObject)\\n    {\\n        lineObject.SetActive(false);\\n        linePool.Enqueue(lineObject);\\n    }\\n\\n    // Assuming UndoInkLine may need to recycle lines\\n    void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            currentLineSegment.gameObject.SetActive(false);\\n            linePool.Enqueue(currentLineSegment.gameObject);\\n            currentLineSegment = null;\\n        }\\n    }\\n\\n    void UpdateLine(Vector3 newTipPos)\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            float distance = Vector3.Distance(inkPositions[inkPositions.Count - 1], newTipPos);\\n            if (distance >= minInkDist)\\n            {\\n                strokeLength += distance;\\n                inkPositions.Add(newTipPos);\\n                currentLineSegment.positionCount = inkPositions.Count;\\n                currentLineSegment.SetPosition(inkPositions.Count - 1, newTipPos);\\n            }\\n        }\\n    }\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    private Queue<GameObject> lineSegmentPool = new Queue<GameObject>();\\n    private int poolSize = 10; // Adjust size as needed\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    private void Awake()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject lineSegment = Instantiate(lineSegmentPrefab);\\n            lineSegment.SetActive(false);\\n            lineSegment.transform.parent = lineContainer.transform;\\n            lineSegmentPool.Enqueue(lineSegment);\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        if (lineSegmentPool.Count > 0)\\n        {\\n            GameObject newLine = lineSegmentPool.Dequeue();\\n            newLine.SetActive(true);\\n            newLine.transform.position = inkPos;\\n            newLine.transform.rotation = Quaternion.identity;\\n\\n            currentLineSegment = newLine.GetComponent<LineRenderer>();\\n            currentLineSegment.positionCount = 1;\\n            currentLineSegment.SetPosition(0, inkPos);\\n            strokeWidth = currentLineSegment.startWidth;\\n            strokeLength = 0.0f;\\n            inkPositions.Clear();\\n            inkPositions.Add(inkPos);\\n        }\\n    }\\n\\n    void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            currentLineSegment.transform.gameObject.SetActive(false);\\n            lineSegmentPool.Enqueue(currentLineSegment.transform.gameObject);\\n            currentLineSegment = null;\\n        }\\n    }\\n\\n    // UpdateLine function must be implemented according to existing functionality\\n    void UpdateLine(Vector3 tipPosition)\\n    {\\n        //Implementation required based on existing functionality\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n    private Queue<GameObject> lineSegmentPool = new Queue<GameObject>();\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    private void Start()\\n    {\\n        InitLineSegmentPool();\\n    }\\n\\n    private void InitLineSegmentPool()\\n    {\\n        for (int i = 0; i < 10; i++) // Adjust pool size as needed\\n        {\\n            GameObject lineSegment = Instantiate(lineSegmentPrefab);\\n            lineSegment.SetActive(false);\\n            lineSegmentPool.Enqueue(lineSegment);\\n        }\\n    }\\n\\n    private void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetPooledLineSegment();\\n        newLine.transform.position = inkPos;\\n        newLine.SetActive(true);\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n\\n    private GameObject GetPooledLineSegment()\\n    {\\n        if (lineSegmentPool.Count > 0)\\n        {\\n            return lineSegmentPool.Dequeue();\\n        }\\n        else\\n        {\\n            GameObject newSegment = Instantiate(lineSegmentPrefab);\\n            return newSegment;\\n        }\\n    }\\n\\n    private void ReturnLineSegmentToPool(GameObject segment)\\n    {\\n        segment.SetActive(false);\\n        lineSegmentPool.Enqueue(segment);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    private LineRenderer currentLineSegment = null;\\n    private List<Vector3> inkPositions = new List<Vector3>();\\n    private float minInkDist = 0.01f;\\n    private float strokeWidth = 0.1f;\\n    private float strokeLength = 0.0f;\\n    private Queue<GameObject> linePool = new Queue<GameObject>();\\n    private int poolSize = 10;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    private BrushState brushStatus = BrushState.Idle;\\n\\n    private void Awake()\\n    {\\n        InitializeLinePool();\\n    }\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    private void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    private void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetLineFromPool(inkPos);\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n\\n    private void InitializeLinePool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject lineObject = Instantiate(lineSegmentPrefab, lineContainer.transform);\\n            lineObject.SetActive(false);\\n            linePool.Enqueue(lineObject);\\n        }\\n    }\\n\\n    private GameObject GetLineFromPool(Vector3 position)\\n    {\\n        GameObject lineObject = linePool.Dequeue();\\n        lineObject.transform.position = position;\\n        lineObject.SetActive(true);\\n        linePool.Enqueue(lineObject);\\n        return lineObject;\\n    }\\n\\n    private void UpdateLine(Vector3 tipPosition)\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            float dist = Vector3.Distance(currentLineSegment.GetPosition(currentLineSegment.positionCount - 1), tipPosition);\\n\\n            if (dist > minInkDist)\\n            {\\n                inkPositions.Add(tipPosition);\\n                currentLineSegment.positionCount = inkPositions.Count;\\n                currentLineSegment.SetPosition(inkPositions.Count - 1, tipPosition);\\n            }\\n        }\\n    }\\n\\n    private void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            currentLineSegment.gameObject.SetActive(false);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n    \\n    private Queue<GameObject> lineSegmentPool = new Queue<GameObject>();\\n    private int initialPoolSize = 10;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void Awake()\\n    {\\n        for (int i = 0; i < initialPoolSize; i++)\\n        {\\n            GameObject lineObj = Instantiate(lineSegmentPrefab);\\n            lineObj.SetActive(false);\\n            lineSegmentPool.Enqueue(lineObj);\\n        }\\n    }\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n\\n            case BrushState.Inking:\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine;\\n\\n        if (lineSegmentPool.Count > 0)\\n        {\\n            newLine = lineSegmentPool.Dequeue();\\n            newLine.SetActive(true);\\n            newLine.transform.position = inkPos;\\n            newLine.transform.rotation = Quaternion.identity;\\n        }\\n        else\\n        {\\n            newLine = Instantiate(lineSegmentPrefab, inkPos, Quaternion.identity);\\n        }\\n\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n\\n    void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            currentLineSegment.gameObject.SetActive(false);\\n            lineSegmentPool.Enqueue(currentLineSegment.gameObject);\\n            currentLineSegment = null;\\n        }\\n    }\\n    \\n    // Assume UpdateLine is defined elsewhere in the code\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787228,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_b045b4af17\",\"usage\":{\"completion_tokens\":3648,\"prompt_tokens\":648,\"total_tokens\":4296,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"