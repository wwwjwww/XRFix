{
    "code_repairing_0": "\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8e\u9f20\u6807\u7684\u6444\u50cf\u673a\u65cb\u8f6c\u811a\u672c\uff0c\u5b83\u53ef\u4ee5\u81ea\u7531\u65cb\u8f6c\uff0c\u6216\u8005\u53ea\u5728X\u6216Y\u8f74\u65cb\u8f6c\u3002\u8fd9\u4e2a\u811a\u672c\u9700\u8981\u9644\u52a0\u5230\u4e00\u4e2a\u5305\u542b\u6444\u50cf\u673a\u7684\u6e38\u620f\u5bf9\u8c61\u4e0a\u3002\n\n\u811a\u672c\u7684\u4e3b\u8981\u90e8\u5206\u662f\u4e00\u4e2aUpdate\u51fd\u6570\uff0c\u5b83\u5728\u6bcf\u4e00\u5e27\u90fd\u88ab\u8c03\u7528\uff0c\u7528\u4e8e\u66f4\u65b0\u6444\u50cf\u673a\u7684\u89d2\u5ea6\uff1a\n\n1. \u5982\u679caxes\u8bbe\u7f6e\u4e3aMouseXAndY\uff0c\u6444\u50cf\u673a\u5c06\u540c\u65f6\u6839\u636e\u9f20\u6807\u7684X\u548cY\u8f74\u79fb\u52a8\u3002\n2. \u5982\u679caxes\u8bbe\u7f6e\u4e3aMouseX\uff0c\u6444\u50cf\u673a\u5c06\u53ea\u5728X\u8f74\u4e0a\u79fb\u52a8\uff0c\u5373\u4e0a\u548c\u4e0b\u3002\n3. \u5982\u679caxes\u8bbe\u7f6e\u4e3aMouseY\uff0c\u6444\u50cf\u673a\u5c06\u53ea\u5728Y\u8f74\u4e0a\u79fb\u52a8\uff0c\u5373\u5de6\u548c\u53f3\u3002\n\nsensitivityX\u548csensitivityY\u63a7\u5236\u9f20\u6807\u79fb\u52a8\u7684\u53cd\u5e94\u901f\u5ea6\u3002\n\nminimumX\u548cmaximumX\u9650\u5236\u6444\u50cf\u673a\u53ef\u4ee5\u5411\u5de6\u548c\u5411\u53f3\u65cb\u8f6c\u7684\u89d2\u5ea6\u3002\n\nminimumY\u548cmaximumY\u9650\u5236\u6444\u50cf\u673a\u53ef\u4ee5\u5411\u4e0a\u548c\u5411\u4e0b\u65cb\u8f6c\u7684\u89d2\u5ea6\u3002\n\n\u6ce8\u610f\uff0c\u8fd9\u4e2a\u811a\u672c\u5047\u8bbe\u6444\u50cf\u673a\u7684\u79fb\u52a8\u7531\u5176\u7236\u5bf9\u8c61\u63a7\u5236\u3002\u5982\u679c\u6444\u50cf\u673a\u7684\u79fb\u52a8\u53d7\u5176\u4ed6\u811a\u672c\u63a7\u5236\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4fee\u6539\u6216\u8005\u79fb\u9664\u8fd9\u4e2a\u811a\u672c\u6765\u4f7f\u5b83\u6b63\u5e38\u5de5\u4f5c\u3002",
    "code_repairing_1": "Sure, I see you\u2019ve shared a basic Unity C# script for mouse look camera rotation. Following that code, if you need help with any more specific feature, let me know. This is a very basic code and has room for many more functionalities like adding smoothing, damping, inversion of control, etc. \n\nIf you want to add smoothing for instance, you can use `Mathf.Lerp` or some sort of smooth damp to avoid sudden movements and make the camera rotation smoother. Remember, these operations are subject to change based on your programming background.\n\nHappy coding! If you have any other question, feel free to ask.",
    "code_repairing_2": "Looks like you're implementing a script for mouse-look in Unity. However, there is something left undelcared. The rest of the method where the rotation is applied is missing. Here is the completed code for you:\n\n```csharp\nvoid Update ()\n{\n    if (axes == RotationAxes.MouseXAndY)\n    {\n        float rotationX = transform.localEulerAngles.y + Input.GetAxis(\"Mouse X\") * sensitivityX;\n\n        rotationY += Input.GetAxis(\"Mouse Y\") * sensitivityY;\n        rotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\n\n        transform.localEulerAngles = new Vector3(-rotationY, rotationX, 0);\n    }\n    else if (axes == RotationAxes.MouseX)\n    {\n        transform.Rotate(0, Input.GetAxis(\"Mouse X\") * sensitivityX, 0);\n    }\n    else\n    {\n        rotationY += Input.GetAxis(\"Mouse Y\") * sensitivityY;\n        rotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\n\n        transform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.y, 0);\n    }\n}\n```\nThis code modifies the X and Y rotation of the camera based on mouse movement and the sensitivity. It ensures that the rotation is not beyond the minimum or maximum values set. The rotation is applied to the camera's local rotation (using `transform.localEulerAngles`) which means the rotation is relative to the object's own orientation.",
    "code_repairing_3": "\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u5b83\u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e9b\u679a\u4e3e\u6765\u5b9a\u4e49\u6444\u50cf\u673a\u53ef\u4ee5\u65cb\u8f6c\u7684\u8f74\u3002\u7136\u540e\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6d6e\u70b9\u53d8\u91cf\u6765\u8bbe\u7f6e\u9f20\u6807\u7684\u7075\u654f\u5ea6\u3001\u65cb\u8f6c\u7684\u8303\u56f4\u548c\u76f8\u673a\u7684\u5f53\u524d\u4f4d\u7f6e\u3002\n\n\u5728Update\u51fd\u6570\u4e2d\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u8f74\uff08axes\uff09\uff0c\u7a0b\u5e8f\u4f1a\u6839\u636e\u9f20\u6807\u79fb\u52a8\u6765\u8c03\u6574\u6444\u50cf\u673a\u7684\u79fb\u52a8\u3002\u5982\u679caxes\u8bbe\u7f6e\u4e3aMouseXAndY\uff0c\u90a3\u4e48\u6444\u50cf\u673a\u5c06\u4f1a\u50cf\u4f20\u7edf\u7684\u7b2c\u4e00\u4eba\u79f0\u89c6\u89d2\u90a3\u6837\uff0c\u6839\u636e\u9f20\u6807\u7684\u6c34\u5e73\u79fb\u52a8\u800c\u6c34\u5e73\u65cb\u8f6c\uff0c\u5e76\u4e14\u6839\u636e\u9f20\u6807\u7684\u5782\u76f4\u79fb\u52a8\u800c\u4e0a\u4e0b\u65cb\u8f6c\u3002\n\n\u5728\u6700\u540e\uff0crotationY\u53d8\u91cf\u4f1a\u5728\u6444\u50cf\u673a\u7684\u5782\u76f4\u79fb\u52a8\u8d85\u51fa\u8bbe\u5b9a\u7684\u8303\u56f4\u65f6\u81ea\u52a8\u8fdb\u884c\u9650\u5e45\u3002\n\n\u5982\u679c\u4f60\u9700\u8981\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528\u7c7b\u4f3c\u7684\u6444\u50cf\u673a\u63a7\u5236\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u5728Unity\u4e2d\u628a\u5b83\u62d6\u62fd\u5230\u76f8\u673a\u9884\u8bbe\u4e0a\uff0c\u7136\u540e\u5728Inspector\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u8c03\u6574\uff08\u8bbe\u7f6e\u7075\u654f\u5ea6\u3001\u65cb\u8f6c\u8303\u56f4\u7b49\u7b49\uff09\u3002",
    "code_repairing_4": "Sure, I will help you continue the completion of your script. \n\n```csharp\n\t\t\ttransform.localEulerAngles = new Vector3(-rotationY, rotationX, 0);\n\t\t}\n\t\telse if (axes == RotationAxes.MouseX)\n\t\t{\n\t\t\ttransform.Rotate(0, Input.GetAxis(\"Mouse X\") * sensitivityX, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\trotationY += Input.GetAxis(\"Mouse Y\") * sensitivityY;\n\t\t\trotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\n\t\t\t\n\t\t\ttransform.localEulerAngles = new Vector3(-rotationY, 0, 0);\n\t\t}\n\t}\n}\n```\n\nThis code will make your camera or your game object rotate based on the mouse input if you set `axes` to `RotationAxes.MouseXAndY`, you can rotate around both X and Y axes. If you set it to `RotationAxes.MouseX`, you can only rotate around the X axis. If you set it to `RotationAxes.MouseY`, you can only rotate around the Y axis.\n\nYou can adjust `sensitivityX` and `sensitivityY` to control the speed of rotation. The range you define with `minimumX`, `maximumX`, `minimumY`, and `maximumY` will restrict the rotation around X and Y axes."
}