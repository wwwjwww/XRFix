{
    "code_repairing_0": "There seem to be several bugs in the given code:\n\n1. In the `GetOutputData` method, you are using `Destroy` method in `Update` method, which is not recommended. It is inefficient and can cause the program to freeze or slow down.\n2. In the `GetSpectrumData` method, you are using `GetOutputData` method which is also not recommended.\n3. In the `Play` method, you are using `Destroy` method in the `Update` method, which is not recommended. It is inefficient and can cause the program to freeze or slow down.\n4. In the `OnDrawGizmosSelected` method, you are using `DrawDirectivityGizmo` method which is not defined in the code.\n\nTo fix these bugs, you can start by removing the `Destroy` method calls from `Update`, `GetOutputData`, and `GetSpectrumData` methods, and then remove the `DrawDirectivityGizmo` method call from the `OnDrawGizmosSelected` method.",
    "code_repairing_1": "// Here are the fixed lines of code from /Assets/GoogleVR/Legacy/Scripts/Audio/GvrAudioSource.cs:\n \n// BUG: Destroy in Update() method  \n// MESSAGE: Update() method is called each frame. It's inefficient to use Destroy() in Update() method.  \n  \n  // public void GetOutputData(float[] samples, int channel) {  \n  //   if (audioSource != null) {  \n  //     audioSource.GetOutputData(samples, channel);  \n  //   }  \n  // }  \n  \n  // public void GetSpectrumData(float[] samples, int channel, FFTWindow window) {  \n  //   if (audioSource != null) {  \n  //     audioSource.GetSpectrumData(samples, channel, window);  \n  //   }  \n  // }  \n  \n  // public void Pause() {  \n  //   if (audioSource != null) {  \n  //     isPaused = true;  \n  //     audioSource.Pause();  \n  //   } else {  \n  //     Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");  \n  //     return;  \n  //   }  \n  // }  \n  \n  // public void Play() {  \n  //   if (audioSource != null && InitializeSource()) {  \n  //     audioSource.Play();  \n  //     isPaused = false;  \n  //   } else {  \n  //     Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");  \n  //   }  \n  // }  \n  \n  // public void PlayDelayed(float delay) {  \n  //   if (audioSource != null && InitializeSource()) {  \n  //     audioSource.PlayDelayed(delay);  \n  //     isPaused = false;  \n  //   } else {  \n  //     Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");  \n  //   }  \n  // }  \n  \n  // public void PlayOneShot(AudioClip clip) {  \n  //   PlayOneShot(clip, 1.0f);  \n  // }  \n  \n  // public void PlayOneShot(AudioClip clip, float volume) {  \n  //   if (audioSource != null && InitializeSource()) {  \n  //     audioSource.PlayOneShot(clip, volume);  \n  //     isPaused = false;  \n  //   } else {  \n  //     Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");  \n  //   }  \n  // }  \n  \n  // public void PlayScheduled(double time) {  \n  //   if (audioSource != null && InitializeSource()) {  \n  //     audioSource.PlayScheduled(time);  \n  //     isPaused = false;  \n  //   } else {  \n  //     Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");  \n  //   }  \n  // }  \n  \n  // public void SetScheduledEndTime(double time) {  \n  //   if (audioSource != null) {  \n  //     audioSource.SetScheduledEndTime(time);  \n  //   }  \n  // }  \n  \n  // public void SetScheduledStartTime(double time) {  \n  //   if (audioSource != null) {  \n  //     audioSource.SetScheduledStartTime(time);  \n  //   }  \n  // }  \n  \n  // public void Stop() {  \n  //   if (audioSource != null) {  \n  //     audioSource.Stop();  \n  //     ShutdownSource();  \n  //     isPaused = true;  \n  //   }  \n  // }  \n  \n  // public void UnPause() {  \n  //   if (audioSource != null) {  \n  //     audioSource.UnPause();  \n  //     isPaused = false;  \n  //   }  \n  // }  \n  \n  // private bool InitializeSource() {  \n  //   if (id < 0) {  \n  //     id = GvrAudio.CreateAudioSource(hrtfEnabled);  \n  //     if (id >= 0) {  \n  //       GvrAudio.UpdateAudioSource(id, this, currentOcclusion);  \n  //       audioSource.spatialize = true;  \n  //       audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Type,  \n  //                                      (float)GvrAudio.SpatializerType.Source);  \n  //       audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Gain,  \n  //                                      GvrAudio.ConvertAmplitudeFromDb(gainDb));  \n  //       audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,  \n  //                                    sourceMinDistance);  \n  //       audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput,  \n  //                                      0.0f);  \n  //  \n  //       audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Id, (float)id);  \n  //     }  \n  //   }  \n  //   return id >= 0;  \n  // }  \n  \n  // private void ShutdownSource() {  \n  //   if (id >= 0) {  \n  //     audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Id, -1.0f);  \n  //     GvrAudio.DestroyAudioSource(id);  \n  //     id = -1;  \n  //   }  \n  // }  \n  \n  // void OnDidApplyAnimationProperties() {  \n  //   OnValidate();  \n  // }  \n  \n  // void OnValidate() {  \n  //   clip = sourceClip;  \n  //   loop = sourceLoop;  \n  //   mute = sourceMute;  \n  //   pitch = sourcePitch;  \n  //   priority = sourcePriority;  \n  //   spatialBlend = sourceSpatialBlend;  \n  //   volume = sourceVolume;  \n  //   dopplerLevel = sourceDopplerLevel;  \n  //   minDistance = sourceMinDistance;  \n  //   maxDistance = sourceMaxDistance;  \n  //   rolloffMode = sourceRolloffMode;  \n  // }  \n  \n  // void OnDrawGizmosSelected() {  \n  //   GvrAudioListener listener = FindObjectOfType<GvrAudioListener>();  \n  //   if (listener != null) {  \n  //     Gizmos.color = GvrAudio.listenerDirectivityColor;  \n  //     DrawDirectivityGizmo(listener.transform, listenerDirectivityAlpha,  \n  //                          listenerDirectivitySharpness, 180);  \n  //   }  \n  //   Gizmos.color = GvrAudio.sourceDirectivityColor;  \n  //   DrawDirectivityGizmo(transform, directivityAlpha, directivitySharpness, 180);  \n  // }  \n  \n  // private void DrawDirectivityGizmo(Transform target, float alpha, float sharpness, int resolution) {  \n  //   Vector2[] points = GvrAudio.Generate2dPolarPattern(alpha, sharpness, resolution);  \n  //   int numVertices = resolution + 1;  \n  //   Vector3[] vertices = new Vector3[numVertices];  \n  //   vertices[0] = Vector3.zero;  \n  //   for (int i = 0; i < points.Length; ++i) {  \n  //     vertices[i + 1] = new Vector3(points[i].x, 0.0f, points[i].y);  \n  //   }  \n  //   int[] triangles = new int[6 * numVertices];  \n  //   for (int i = 0; i < numVertices - 1; ++i) {  \n  //     int index = 6 * i;  \n  //     if (i < numVertices - 2) {  \n  //       triangles[index] = 0;  \n  //       triangles[index + 1] = i + 1;  \n  //       triangles[index + 2] = i + 2;  \n  //     } else {  \n  //       triangles[index] = 0;  \n  //       triangles[index + 1] = numVertices - 1;  \n  //       triangles[index + 2] = 1;  \n  //     }  \n  //     triangles[index + 3] = triangles[index];  \n  //     triangles[index + 4] = triangles[index + 2];  \n  //     triangles[index + 5] = triangles[index + 1];  \n  //   }  \n  //   Mesh directivityGizmoMesh = new Mesh();  \n  //   directivityGizmoMesh.hideFlags = HideFlags.DontSaveInEditor;  \n  //   directivityGizmoMesh.vertices = vertices;  \n  //   directivityGizmoMesh.triangles = triangles;  \n  //   directivityGizmoMesh.RecalculateNormals();  \n  //   Vector3 scale = 2.0f * Mathf.Max(target.lossyScale.x, target.lossyScale.z) * Vector3.one;  \n  //   Gizmos.DrawMesh(directivityGizmoMesh, target.position, target.rotation, scale);  \n  // }  \n  // }",
    "code_repairing_2": "The buggy code in the GvrAudioSource.cs file is using the `Destroy` method in the `Update` method, which is not recommended.\n\nHere are the corrected code snippets:\n```\nvoid Update() {\n    if (initializeSource()) {\n        audioSource.Play();\n        isPaused = false;\n    } else {\n        Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n}\n\nvoid OnDidApplyAnimationProperties() {\n    OnValidate();\n}\n\nvoid OnValidate() {\n    clip = sourceClip;\n    loop = sourceLoop;\n    mute = sourceMute;\n    pitch = sourcePitch;\n    priority = sourcePriority;\n    spatialBlend = sourceSpatialBlend;\n    volume = sourceVolume;\n    dopplerLevel = sourceDopplerLevel;\n    spread = sourceSpread;\n    minDistance = sourceMinDistance;\n    maxDistance = sourceMaxDistance;\n    rolloffMode = sourceRolloffMode;\n}\n\nvoid OnDrawGizmosSelected() {\n    GvrAudioListener listener = FindObjectOfType<GvrAudioListener>();\n    if (listener != null) {\n        Gizmos.color = GvrAudio.listenerDirectivityColor;\n        DrawDirectivityGizmo(listener.transform, listenerDirectivityAlpha,\n                             listenerDirectivitySharpness, 180);\n    }\n    Gizmos.color = GvrAudio.sourceDirectivityColor;\n    DrawDirectivityGizmo(transform, directivityAlpha, directivitySharpness, 180);\n}\n\nprivate void DrawDirectivityGizmo(Transform target, float alpha, float sharpness,\n                                 int resolution) {\n    Vector2[] points = GvrAudio.Generate2dPolarPattern(alpha, sharpness, resolution);\n\n    int numVertices = resolution + 1;\n    Vector3[] vertices = new Vector3[numVertices];\n    vertices[0] = Vector3.zero;\n    for (int i = 0; i < points.Length; ++i) {\n        vertices[i + 1] = new Vector3(points[i].x, 0.0f, points[i].y);\n    }\n\n    int[] triangles = new int[6 * numVertices];\n    for (int i = 0; i < numVertices - 1; ++i) {\n        int index = 6 * i;\n        if (i < numVertices - 2) {\n            triangles[index] = 0;\n            triangles[index + 1] = i + 1;\n            triangles[index + 2] = i + 2;\n        } else {\n            triangles[index] = 0;\n            triangles[index + 1] = numVertices - 1;\n            triangles[index + 2] = 1;\n        }\n\n        triangles[index + 3] = triangles[index];\n        triangles[index + 4] = triangles[index + 2];\n        triangles[index + 5] = triangles[index + 1];\n    }\n\n    Mesh directivityGizmoMesh = new Mesh();\n    directivityGizmoMesh.hideFlags = HideFlags.DontSaveInEditor;\n    directivityGizmoMesh.vertices = vertices;\n    directivityGizmoMesh.triangles = triangles;\n    directivityGizmoMesh.RecalculateNormals();\n\n    Vector3 scale = 2.0f * Mathf.Max(target.lossyScale.x, target.lossyScale.z) * Vector3.one;\n    Gizmos.DrawMesh(directivityGizmoMesh, target.position, target.rotation, scale);\n}\n```",
    "code_repairing_3": "```\n   // Here's the fixed code:\n   \n// BUG: Destroy in Update() method\n// MESSAGE: Update() method is called each frame. It's inefficient to use Destroy() in Update() method.\n#pragma warning disable 0618 // This code will be deprecated soon\nusing UnityEngine;\nusing UnityEngine.Audio;\nusing System.Collections;\n\npublic void GetOutputData(float[] samples, int channel)\n{\n        if (audioSource != null)\n        {\n                audioSource.GetOutputData(samples, channel);\n        }\n}\n\npublic void GetSpectrumData(float[] samples, int channel, FFTWindow window)\n{\n        if (audioSource != null)\n        {\n                audioSource.GetSpectrumData(samples, channel, window);\n        }\n}\n\npublic void Pause()\n{\n        if (audioSource != null)\n        {\n                isPaused = true;\n                audioSource.Pause();\n        }\n}\n\npublic void Play()\n{\n        if (audioSource != null && InitializeSource())\n        {\n                audioSource.Play();\n                isPaused = false;\n        }\n        else\n        {\n                Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");\n        }\n}\n\npublic void PlayDelayed(float delay)\n{\n        if (audioSource != null && InitializeSource())\n        {\n                audioSource.PlayDelayed(delay);\n                isPaused = false;\n        }\n        else\n        {\n                Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");\n        }\n}\n\npublic void PlayOneShot(AudioClip clip)\n{\n        PlayOneShot(clip, 1.0f);\n}\n\npublic void PlayOneShot(AudioClip clip, float volume)\n{\n        if (audioSource != null && InitializeSource())\n        {\n                audioSource.PlayOneShot(clip, volume);\n                isPaused = false;\n        }\n        else\n        {\n                Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");\n        }\n}\n\npublic void PlayScheduled(double time)\n{\n        if (audioSource != null && InitializeSource())\n        {\n                audioSource.PlayScheduled(time);\n                isPaused = false;\n        }\n        else\n        {\n                Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported until after Awake() and OnEnable(). Try calling from Start() instead.\");\n        }\n}\n\npublic void SetScheduledEndTime(double time)\n{\n        if (audioSource != null)\n        {\n                audioSource.SetScheduledEndTime(time);\n        }\n}\n\npublic void SetScheduledStartTime(double time)\n{\n        if (audioSource != null)\n        {\n                audioSource.SetScheduledStartTime(time);\n        }\n}\n\npublic void Stop()\n{\n        if (audioSource != null)\n        {\n                audioSource.Stop();\n                ShutdownSource();\n                isPaused = true;\n        }\n}\n\npublic void UnPause()\n{\n        if (audioSource != null)\n        {\n                audioSource.UnPause();\n                isPaused = false;\n        }\n}\n\nprivate bool InitializeSource()\n{\n        if (id < 0)\n        {\n                id = GvrAudio.CreateAudioSource(hrtfEnabled);\n                if (id >= 0)\n                {\n                        GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n                        audioSource.spatialize = true;\n                        audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Type, (float)GvrAudio.SpatializerType.Source);\n                        audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Gain, GvrAudio.ConvertAmplitudeFromDb(gainDb));\n                        audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.MinDistance, sourceMinDistance);\n                        audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.ZeroOutput, 0.0f);\n\n                        audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Id, (float)id);\n                }\n        }\n        return id >= 0;\n}\n\nprivate void ShutdownSource()\n{\n        #if OBJECT_POOLING\n        if (id >= 0)\n        {\n                audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Id, -1.0f);\n\n                audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.ZeroOutput, 1.0f);\n                audioSource.spatialize = false;\n                GvrAudio.DestroyAudioSource(id);\n                id = -1;\n        }\n        #endif\n}\n\nvoid OnDidApplyAnimationProperties()\n{\n        OnValidate();\n}\n\nvoid OnValidate()\n{\n        clip = sourceClip;\n        loop = sourceLoop;\n        mute = sourceMute;\n        pitch = sourcePitch;\n        priority = sourcePriority;\n        spatialBlend = sourceSpatialBlend;\n        volume = sourceVolume;\n        dopplerLevel = sourceDopplerLevel;\n        spread = sourceSpread;\n        minDistance = sourceMinDistance;\n        maxDistance = sourceMaxDistance;\n        rolloffMode = sourceRolloffMode;\n}\n\nvoid OnDrawGizmosSelected()\n{\n        GvrAudioListener listener = FindObjectOfType<GvrAudioListener>();\n        if (listener != null)\n        {\n                Gizmos.color = GvrAudio.listenerDirectivityColor;\n                DrawDirectivityGizmo(listener.transform, listenerDirectivityAlpha, listenerDirectivitySharpness, 180);\n        }\n        Gizmos.color = GvrAudio.sourceDirectivityColor;\n        DrawDirectivityGizmo(transform, directivityAlpha, directivitySharpness, 180);\n}\n\nprivate void DrawDirectivityGizmo(Transform target, float alpha, float sharpness, int resolution)\n{\n        Vector2[] points = GvrAudio.Generate2dPolarPattern(alpha, sharpness, resolution);\n\n        int numVertices = resolution + 1;\n        Vector3[] vertices = new Vector3[numVertices];\n        vertices[0] = Vector3.zero;\n        for (int i = 0; i < points.Length; ++i)\n        {\n                vertices[i + 1] = new Vector3(points[i].x, 0.0f, points[i].y);\n        }\n\n        int[] triangles = new int[6 * numVertices];\n        for (int i = 0; i < numVertices - 1; ++i)\n        {\n                int index = 6 * i;\n                if (i < numVertices - 2)\n                {\n                        triangles[index] = 0;\n                        triangles[index + 1] = i + 1;\n                        triangles[index + 2] = i + 2;\n                }\n                else\n                {\n                        triangles[index] = 0;\n                        triangles[index + 1] = numVertices - 1;\n                        triangles[index + 2] = 1;\n                }\n\n                triangles[index + 3] = triangles[index];\n                triangles[index + 4] = triangles[index + 2];\n                triangles[index + 5] = triangles[index + 1];\n        }\n\n        Mesh directivityGizmoMesh = new Mesh();\n        directivityGizmoMesh.hideFlags = HideFlags.DontSaveInEditor;\n        directivityGizmoMesh.vertices = vertices;\n        directivityGizmoMesh.triangles = triangles;\n        directivityGizmoMesh.RecalculateNormals();\n\n        Vector3 scale = 2.0f * Mathf.Max(target.lossyScale.x, target.lossyScale.z) * Vector3.one;\n        Gizmos.DrawMesh(directivityGizmoMesh, target.position, target.rotation, scale);\n}\n```",
    "code_repairing_4": "public void GetOutputData(System.Single[] samples, System.Int32 channel) {\n    if (audioSource != null) {\n      audioSource.GetOutputData(samples, channel);\n    }\n  }\n\n  public void GetSpectrumData(System.Single[] samples, System.Int32 channel, System.Object window) {\n    if (audioSource != null) {\n      audioSource.GetSpectrumData(samples, channel, window);\n    }\n  }\n\n  public void Pause () {\n    if (audioSource != null) {\n      isPaused = true;\n      audioSource.Pause();\n    }\n  }\n\n  public void Play () {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.Play();\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n  public void PlayDelayed (System.Single delay) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayDelayed(delay);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n  public void PlayOneShot (UnityEngine.AudioClip clip) {\n    PlayOneShot(clip, 1.0f);\n  }\n\n  public void PlayOneShot (UnityEngine.AudioClip clip, System.Single volume) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayOneShot(clip, volume);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n  public void PlayScheduled (System.Double time) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayScheduled(time);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n  public void SetScheduledEndTime(System.Double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledEndTime(time);\n    }\n  }\n\n  public void SetScheduledStartTime(System.Double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledStartTime(time);\n    }\n  }\n\n  public void Stop () {\n    if (audioSource != null) {\n      audioSource.Stop();\n      ShutdownSource();\n      isPaused = true;\n    }\n  }\n\n  public void UnPause () {\n    if (audioSource != null) {\n      audioSource.UnPause();\n      isPaused = false;\n    }\n  }\n\n  private bool InitializeSource () {\n    if (id < 0) {\n      id = GvrAudio.CreateAudioSource(hrtfEnabled);\n      if (id >= 0) {\n        GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n        audioSource.spatialize = true;\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Type,\n                                        (float) GvrAudio.SpatializerType.Source);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,\n                                        GvrAudio.ConvertAmplitudeFromDb(gainDb));\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,\n                                        sourceMinDistance);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 0.0f);\n\n\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, (float) id);\n      }\n    }\n    return id >= 0;\n  }\n\n  private void ShutdownSource () {\n#if OBJECT_POOLING\n    if (id >= 0) {\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, -1.0f);\n\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 1.0f);\n        audioSource.spatialize = false;\n        GvrAudio.DestroyAudioSource(id);\n        id = -1;\n    }\n#endif\n  }\n\n  void OnDidApplyAnimationProperties () {\n    OnValidate();\n  }\n\n  void OnValidate () {\n    clip = sourceClip;\n    loop = sourceLoop;\n    mute = sourceMute;\n    pitch = sourcePitch;\n    priority = sourcePriority;\n    spatialBlend = sourceSpatialBlend;\n    volume = sourceVolume;\n    dopplerLevel = sourceDopplerLevel;\n    spread = sourceSpread;\n    minDistance = sourceMinDistance;\n    maxDistance = sourceMaxDistance;\n    rolloffMode = sourceRolloffMode;\n  }\n\n  void OnDrawGizmosSelected () {\n    GvrAudioListener listener = FindObjectOfType<GvrAudioListener>();\n    if(listener != null) {\n      Gizmos.color = GvrAudio.listenerDirectivityColor;\n      DrawDirectivityGizmo(listener.transform, listenerDirectivityAlpha,\n                           listenerDirectivitySharpness, 180);\n    }\n    Gizmos.color = GvrAudio.sourceDirectivityColor;\n    DrawDirectivityGizmo(transform, directivityAlpha, directivitySharpness, 180);\n  }\n\n  private void DrawDirectivityGizmo (UnityEngine.Transform target, System.Single alpha, System.Single sharpness,\n                                     System.Int32 resolution) {\n    Vector2[] points = GvrAudio.Generate2dPolarPattern(alpha, sharpness, resolution);\n\n    int numVertices = resolution + 1;\n    Vector3[] vertices = new Vector3[numVertices];\n    vertices[0] = Vector3.zero;\n    for (int i = 0; i < points.Length; ++i) {\n      vertices[i + 1] = new Vector3(points[i].x, 0.0f, points[i].y);\n    }\n\n    int[] triangles = new int[6 * numVertices];\n    for (int i = 0; i < numVertices - 1; ++i) {\n      int index = 6 * i;\n      if (i < numVertices - 2) {\n        triangles[index] = 0;\n        triangles[index + 1] = i + 1;\n        triangles[index + 2] = i + 2;\n      } else {\n\n        triangles[index] = 0;\n        triangles[index + 1] = numVertices - 1;\n        triangles[index + 2] = 1;\n    }\n\n    triangles[index + 3] = triangles[index];\n    triangles[index + 4] = triangles[index + 2];\n    triangles[index + 5] = triangles[index + 1];\n  }\n\n  Mesh directivityGizmoMesh = new Mesh();\n  directivityGizmoMesh.hideFlags = HideFlags.DontSaveInEditor;\n  directivityGizmoMesh.vertices = vertices;\n  directivityGizmoMesh.triangles = triangles;\n  directivityGizmoMesh.RecalculateNormals();\n\n  Vector3 scale = 2.0f * System.Math.Max(target.lossyScale.x, target.lossyScale.z) * Vector3.one;\n  Gizmos.DrawMesh(directivityGizmoMesh, target.position, target.rotation, scale);\n}\n}"
}