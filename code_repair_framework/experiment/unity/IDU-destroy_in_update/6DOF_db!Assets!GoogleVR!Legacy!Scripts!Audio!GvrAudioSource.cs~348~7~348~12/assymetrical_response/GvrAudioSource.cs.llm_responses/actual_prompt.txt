/* Here're the buggy code lines from /Assets/GoogleVR/Legacy/Scripts/Audio/GvrAudioSource.cs:*/
using UnityEngine;
using UnityEngine.Audio;
using System.Collections;
using UnityEngine;
using UnityEngine.Audio;
using System.Collections;

/* BUG: Destroy in Update() method
* MESSAGE: Update() method is called each frame. It's inefficient to use Destroy() in Update() method.
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
*   public void GetOutputData(float[] samples, int channel) {
*     if (audioSource != null) {
*       audioSource.GetOutputData(samples, channel);
*     }
*   }
* 
* 
* 
* 
*   public void GetSpectrumData(float[] samples, int channel, FFTWindow window) {
*     if (audioSource != null) {
*       audioSource.GetSpectrumData(samples, channel, window);
*     }
*   }
* 
* 
*   public void Pause () {
*     if (audioSource != null) {
*       isPaused = true;
*       audioSource.Pause();
*     }
*   }
* 
* 
*   public void Play () {
*     if (audioSource != null && InitializeSource()) {
*       audioSource.Play();
*       isPaused = false;
*     } else {
*       Debug.LogWarning ("GVR Audio source not initialized. Audio playback not supported " +
*                         "until after Awake() and OnEnable(). Try calling from Start() instead.");
*     }
*   }
* 
* 
*   public void PlayDelayed (float delay) {
*     if (audioSource != null && InitializeSource()) {
*       audioSource.PlayDelayed(delay);
*       isPaused = false;
*     } else {
*       Debug.LogWarning ("GVR Audio source not initialized. Audio playback not supported " +
*                         "until after Awake() and OnEnable(). Try calling from Start() instead.");
*     }
*   }
* 
* 
*   public void PlayOneShot (AudioClip clip) {
*     PlayOneShot(clip, 1.0f);
*   }
* 
* 
*   public void PlayOneShot (AudioClip clip, float volume) {
*     if (audioSource != null && InitializeSource()) {
*       audioSource.PlayOneShot(clip, volume);
*       isPaused = false;
*     } else {
*       Debug.LogWarning ("GVR Audio source not initialized. Audio playback not supported " +
*                         "until after Awake() and OnEnable(). Try calling from Start() instead.");
*     }
*   }
* 
* 
* 
*   public void PlayScheduled (double time) {
*     if (audioSource != null && InitializeSource()) {
*       audioSource.PlayScheduled(time);
*       isPaused = false;
*     } else {
*       Debug.LogWarning ("GVR Audio source not initialized. Audio playback not supported " +
*                         "until after Awake() and OnEnable(). Try calling from Start() instead.");
*     }
*   }
* 
* 
*   public void SetScheduledEndTime(double time) {
*     if (audioSource != null) {
*       audioSource.SetScheduledEndTime(time);
*     }
*   }
* 
* 
*   public void SetScheduledStartTime(double time) {
*     if (audioSource != null) {
*       audioSource.SetScheduledStartTime(time);
*     }
*   }
* 
* 
*   public void Stop () {
*     if (audioSource != null) {
*       audioSource.Stop();
*       ShutdownSource();
*       isPaused = true;
*     }
*   }
* 
* 
*   public void UnPause () {
*     if (audioSource != null) {
*       audioSource.UnPause();
*       isPaused = false;
*     }
*   }
* 
* 
*   private bool InitializeSource () {
*     if (id < 0) {
*       id = GvrAudio.CreateAudioSource(hrtfEnabled);
*       if (id >= 0) {
*         GvrAudio.UpdateAudioSource(id, this, currentOcclusion);
*         audioSource.spatialize = true;
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Type,
*                                         (float) GvrAudio.SpatializerType.Source);
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,
*                                         GvrAudio.ConvertAmplitudeFromDb(gainDb));
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,
*                                         sourceMinDistance);
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 0.0f);
* 
* 
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, (float) id);
*       }
*     }
*     return id >= 0;
*   }
* 
* 
* 
* 
* 
* using UnityEngine;
* using UnityEngine.Audio;
* using System.Collections;
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
*   public void GetOutputData(float[] samples, int channel) {
*     if (audioSource != null) {
*       audioSource.GetOutputData(samples, channel);
*     }
*   }
* 
* 
* 
* 
*   public void GetSpectrumData(float[] samples, int channel, FFTWindow window) {
*     if (audioSource != null) {
*       audioSource.GetSpectrumData(samples, channel, window);
*     }
*   }
* 
* 
*   public void Pause () {
*     if (audioSource != null) {
*       isPaused = true;
*       audioSource.Pause();
*     }
*   }
* 
* 
*   public void Play () {
*     if (audioSource != null && InitializeSource()) {
*       audioSource.Play();
*       isPaused = false;
*     } else {
*       Debug.LogWarning ("GVR Audio source not initialized. Audio playback not supported " +
*                         "until after Awake() and OnEnable(). Try calling from Start() instead.");
*     }
*   }
* 
* 
*   public void PlayDelayed (float delay) {
*     if (audioSource != null && InitializeSource()) {
*       audioSource.PlayDelayed(delay);
*       isPaused = false;
*     } else {
*       Debug.LogWarning ("GVR Audio source not initialized. Audio playback not supported " +
*                         "until after Awake() and OnEnable(). Try calling from Start() instead.");
*     }
*   }
* 
* 
*   public void PlayOneShot (AudioClip clip) {
*     PlayOneShot(clip, 1.0f);
*   }
* 
* 
*   public void PlayOneShot (AudioClip clip, float volume) {
*     if (audioSource != null && InitializeSource()) {
*       audioSource.PlayOneShot(clip, volume);
*       isPaused = false;
*     } else {
*       Debug.LogWarning ("GVR Audio source not initialized. Audio playback not supported " +
*                         "until after Awake() and OnEnable(). Try calling from Start() instead.");
*     }
*   }
* 
* 
* 
*   public void PlayScheduled (double time) {
*     if (audioSource != null && InitializeSource()) {
*       audioSource.PlayScheduled(time);
*       isPaused = false;
*     } else {
*       Debug.LogWarning ("GVR Audio source not initialized. Audio playback not supported " +
*                         "until after Awake() and OnEnable(). Try calling from Start() instead.");
*     }
*   }
* 
* 
*   public void SetScheduledEndTime(double time) {
*     if (audioSource != null) {
*       audioSource.SetScheduledEndTime(time);
*     }
*   }
* 
* 
*   public void SetScheduledStartTime(double time) {
*     if (audioSource != null) {
*       audioSource.SetScheduledStartTime(time);
*     }
*   }
* 
* 
*   public void Stop () {
*     if (audioSource != null) {
*       audioSource.Stop();
*       ShutdownSource();
*       isPaused = true;
*     }
*   }
* 
* 
*   public void UnPause () {
*     if (audioSource != null) {
*       audioSource.UnPause();
*       isPaused = false;
*     }
*   }
* 
* 
*   private bool InitializeSource () {
*     if (id < 0) {
*       id = GvrAudio.CreateAudioSource(hrtfEnabled);
*       if (id >= 0) {
*         GvrAudio.UpdateAudioSource(id, this, currentOcclusion);
*         audioSource.spatialize = true;
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Type,
*                                         (float) GvrAudio.SpatializerType.Source);
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,
*                                         GvrAudio.ConvertAmplitudeFromDb(gainDb));
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,
*                                         sourceMinDistance);
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 0.0f);
* 
* 
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, (float) id);
*       }
*     }
*     return id >= 0;
*   }
* 
* 
*   private void ShutdownSource () {
*     if (id >= 0) {
*       audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, -1.0f);
* 
*       audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 1.0f);
*       audioSource.spatialize = false;
*       GvrAudio.DestroyAudioSource(id);
*       id = -1;
*     }
*   }
* 
*   void OnDidApplyAnimationProperties () {
*     OnValidate();
*   }
* 
*   void OnValidate () {
*     clip = sourceClip;
*     loop = sourceLoop;
*     mute = sourceMute;
*     pitch = sourcePitch;
*     priority = sourcePriority;
*     spatialBlend = sourceSpatialBlend;
*     volume = sourceVolume;
*     dopplerLevel = sourceDopplerLevel;
*     spread = sourceSpread;
*     minDistance = sourceMinDistance;
*     maxDistance = sourceMaxDistance;
*     rolloffMode = sourceRolloffMode;
*   }
* 
*   void OnDrawGizmosSelected () {
* 
* 
* 
*     GvrAudioListener listener = FindObjectOfType<GvrAudioListener>();
*     if(listener != null) {
*       Gizmos.color = GvrAudio.listenerDirectivityColor;
*       DrawDirectivityGizmo(listener.transform, listenerDirectivityAlpha,
*                            listenerDirectivitySharpness, 180);
*     }
* 
*     Gizmos.color = GvrAudio.sourceDirectivityColor;
*     DrawDirectivityGizmo(transform, directivityAlpha, directivitySharpness, 180);
*   }
* 
* 
*   private void DrawDirectivityGizmo (Transform target, float alpha, float sharpness,
*                                      int resolution) {
*     Vector2[] points = GvrAudio.Generate2dPolarPattern(alpha, sharpness, resolution);
* 
*     int numVertices = resolution + 1;
*     Vector3[] vertices = new Vector3[numVertices];
*     vertices[0] = Vector3.zero;
*     for (int i = 0; i < points.Length; ++i) {
*       vertices[i + 1] = new Vector3(points[i].x, 0.0f, points[i].y);
*     }
* 
*     int[] triangles = new int[6 * numVertices];
*     for (int i = 0; i < numVertices - 1; ++i) {
*       int index = 6 * i;
*       if (i < numVertices - 2) {
*         triangles[index] = 0;
*         triangles[index + 1] = i + 1;
*         triangles[index + 2] = i + 2;
*       } else {
* 
*         triangles[index] = 0;
*         triangles[index + 1] = numVertices - 1;
*         triangles[index + 2] = 1;
*       }
* 
*       triangles[index + 3] = triangles[index];
*       triangles[index + 4] = triangles[index + 2];
*       triangles[index + 5] = triangles[index + 1];
*     }
* 
*     Mesh directivityGizmoMesh = new Mesh();
*     directivityGizmoMesh.hideFlags = HideFlags.DontSaveInEditor;
*     directivityGizmoMesh.vertices = vertices;
*     directivityGizmoMesh.triangles = triangles;
*     directivityGizmoMesh.RecalculateNormals();
* 
*     Vector3 scale = 2.0f * Mathf.Max(target.lossyScale.x, target.lossyScale.z) * Vector3.one;
*     Gizmos.DrawMesh(directivityGizmoMesh, target.position, target.rotation, scale);
*   }
* }
* 
* #pragma warning restore 0618 // Restore warnings
*   private bool InitializeSource () {
*     if (id < 0) {
*       id = GvrAudio.CreateAudioSource(hrtfEnabled);
*       if (id >= 0) {
*         GvrAudio.UpdateAudioSource(id, this, currentOcclusion);
*         audioSource.spatialize = true;
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Type,
*                                         (float) GvrAudio.SpatializerType.Source);
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,
*                                         GvrAudio.ConvertAmplitudeFromDb(gainDb));
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,
*                                         sourceMinDistance);
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 0.0f);
* 
* 
*         audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, (float) id);
*       }
*     }
*     return id >= 0;
*   }
* 
* 
* 
* 
* 
* using UnityEngine;
* using UnityEngine.Audio;

* FIXED CODE:
*/

* you can try to build an object pool before Update() method has been called.