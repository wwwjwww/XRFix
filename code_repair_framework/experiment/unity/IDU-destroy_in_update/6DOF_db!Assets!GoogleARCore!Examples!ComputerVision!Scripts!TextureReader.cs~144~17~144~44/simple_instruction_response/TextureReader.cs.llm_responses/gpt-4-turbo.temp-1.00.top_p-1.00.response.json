"{\"id\":\"chatcmpl-B3Iij3wuUppUyrS6eNvlDCziaeg3g\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                    {\\n                        m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                        m_Command = CommandType.ProcessNextFrame;\\n                        break;\\n                    }\\n\\n                case CommandType.Reset:\\n                    {\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                        m_TextureReaderApi.Destroy();\\n                        m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                        m_ImageBufferIndex = -1;\\n                        m_Command = CommandType.ProcessNextFrame;\\n                        break;\\n                    }\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                    {\\n                        if (m_ImageBufferIndex >= 0)\\n                        {\\n                            m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                            m_ImageBufferIndex = -1;\\n                        }\\n                        m_Command = CommandType.ProcessNextFrame;\\n                        break;\\n                    }\\n\\n                case CommandType.ProcessNextFrame:\\n                    {\\n                        if (m_ImageBufferIndex >= 0)\\n                        {\\n                            int bufferSize = 0;\\n                            IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                            if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                            {\\n                                OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                            }\\n\\n                            m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                        }\\n\\n                        m_Command = CommandType.ReleasePreviousBuffer;\\n                        break;\\n                    }\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex =\\n                    m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                {\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    break;\\n                }\\n\\n                case CommandType.Reset:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_TextureReaderApi.Destroy();\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ProcessNextFrame:\\n                {\\n                    if (m_ImageBufferIndex >= 0)\\n                    {\\n                        int bufferSize = 0;\\n                        IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                        if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                        {\\n                            OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                        }\\n\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    }\\n\\n                    break;\\n                }\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex =\\n                    m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nnamespace GoogleARCore.Examples.ComputerVision\\n{\\n    using System;\\n    using GoogleARCore;\\n    using UnityEngine;\\n\\n    public class TextureReader : MonoBehaviour\\n    {\\n        public int ImageWidth = k_ARCoreTextureWidth;\\n        public int ImageHeight = k_ARCoreTextureHeight;\\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\\n\\n        private const int k_ARCoreTextureWidth = 1920;\\n        private const int k_ARCoreTextureHeight = 1080;\\n        private TextureReaderApi m_TextureReaderApi = null;\\n        private CommandType m_Command = CommandType.None;\\n        private int m_ImageBufferIndex = -1;\\n\\n        public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\\n\\n        public enum SampleMode\\n        {\\n            KeepAspectRatio,\\n            CoverFullViewport\\n        }\\n\\n        private enum CommandType\\n        {\\n            None,\\n            ProcessNextFrame,\\n            Create,\\n            Reset,\\n            ReleasePreviousBuffer\\n        }\\n\\n        public void Start()\\n        {\\n            if (m_TextureReaderApi == null)\\n            {\\n                m_TextureReaderApi = new TextureReaderApi();\\n                m_Command = CommandType.Create;\\n                m_ImageBufferIndex = -1;\\n            }\\n        }\\n\\n        public void Apply()\\n        {\\n            m_Command = CommandType.Reset;\\n        }\\n\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                {\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    break;\\n                }\\n\\n                case CommandType.Reset:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_TextureReaderApi.Destroy();\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ProcessNextFrame:\\n                {\\n                    if (m_ImageBufferIndex >= 0)\\n                    {\\n                        int bufferSize = 0;\\n                        IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                        if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                        {\\n                            OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                        }\\n\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    }\\n\\n                    break;\\n                }\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex = m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\nnamespace GoogleARCore.Examples.ComputerVision\\n{\\n    using System;\\n    using GoogleARCore;\\n\\n    public class TextureReader : MonoBehaviour\\n    {\\n        public int ImageWidth = k_ARCoreTextureWidth;\\n        public int ImageHeight = k_ARCoreTextureHeight;\\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\\n\\n        private const int k_ARCoreTextureWidth = 1920;\\n        private const int k_ARCoreTextureHeight = 1080;\\n\\n        private TextureReaderApi m_TextureReaderApi = null;\\n        private CommandType m_Command = CommandType.None;\\n        private int m_ImageBufferIndex = -1;\\n        \\n        public delegate void OnImageAvailableCallbackFunc(\\n            TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\\n\\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\\n\\n        public enum SampleMode\\n        {\\n            KeepAspectRatio,\\n            CoverFullViewport\\n        }\\n\\n        private enum CommandType\\n        {\\n            None,\\n            ProcessNextFrame,\\n            Create,\\n            Reset,\\n            ReleasePreviousBuffer\\n        }\\n\\n        public void Start()\\n        {\\n            if (m_TextureReaderApi == null)\\n            {\\n                m_TextureReaderApi = new TextureReaderApi();\\n                m_Command = CommandType.Create;\\n                m_ImageBufferIndex = -1;\\n            }\\n        }\\n        \\n        public void Apply()\\n        {\\n            m_Command = CommandType.Reset;\\n        }\\n\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                    {\\n                        m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight,\\n                            ImageSampleMode == SampleMode.KeepAspectRatio);\\n                        break;\\n                    }\\n\\n                case CommandType.Reset:\\n                    {\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                        m_TextureReaderApi.Destroy();\\n                        m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight,\\n                            ImageSampleMode == SampleMode.KeepAspectRatio);\\n                        m_ImageBufferIndex = -1;\\n                        break;\\n                    }\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                    {\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                        m_ImageBufferIndex = -1;\\n                        break;\\n                    }\\n\\n                case CommandType.ProcessNextFrame:\\n                    {\\n                        if (m_ImageBufferIndex >= 0)\\n                        {\\n                            int bufferSize = 0;\\n                            IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                            if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                            {\\n                                OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                            }\\n\\n                            m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                        }\\n\\n                        break;\\n                    }\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex = m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                {\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    break;\\n                }\\n\\n                case CommandType.Reset:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_TextureReaderApi.Destroy();\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ProcessNextFrame:\\n                {\\n                    if (m_ImageBufferIndex >= 0)\\n                    {\\n                        int bufferSize = 0;\\n                        IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                        if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                        {\\n                            OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                        }\\n\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    }\\n\\n                    break;\\n                }\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex =\\n                    m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740126645,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":2577,\"prompt_tokens\":885,\"total_tokens\":3462,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"