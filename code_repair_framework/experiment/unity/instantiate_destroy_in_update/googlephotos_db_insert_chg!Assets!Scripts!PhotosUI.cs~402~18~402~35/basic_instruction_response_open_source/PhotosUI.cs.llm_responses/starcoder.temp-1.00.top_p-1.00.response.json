{
    "code_repairing_0": "using System.Collections;\nusing System.Collections.Generic;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System.Linq;\nusing System.Threading.Tasks;\n\npublic class PhotosUI : MonoBehaviour\n{\n    public enum FilterMode\n    {\n        Unfiltered,\n        SphericalPhotosOnly,\n        StereoPhotosOnly,\n        VideosOnly\n    };\n    public float paddingLoadMoreButton;\n    public int numColumnsPerRow;\n    public Sprite iconRectangularMono;\n    public Sprite iconRectangularStereo;\n    public Sprite iconSphericalMono;\n    public Sprite iconSphericalStereo;\n\n    public GameObject photosUI;\n    public Image formatButtonIcon;\n    public GameObject formatModal;\n    public GameObject filterModal;\n    public RectTransform scrollViewContent;\n    public RectTransform loadMoreButton;\n    public TextMeshProUGUI albumTitle;\n    public GameObject photoEntryPrefab;\n    public PhotoDisplayer photoDisplayer;\n    public GameObject videoFormatSelectHint;\n    [System.NonSerialized]\n    public PlayerUIController playerUIController;\n    [System.NonSerialized]\n    FilterMode filterMode = FilterMode.Unfiltered;\n\n    float entryDimension;\n    bool isShowingLibrary = false;\n    string displayedAlbumId = null;\n    FilterMode displayedFilterMode = FilterMode.Unfiltered;\n    List<string> instantiatedPhotoKeys = new List<string>();\n    Dictionary<string, PhotoUIEntry> instantiatedEntries = new Dictionary<string, PhotoUIEntry>();\n    PhotoUIEntry selectedEntry;\n    bool displayVideoOnNextFrame = false;\n\n    public bool PhotoHasBeenSelected => selectedEntry!= null;\n\n    protected GameObject gobj3;\n    protected GameObject a3;\n\n    private float timeLimit = 5f;\n    private float timer = 0f;\n\n    private bool instantiate_gobj = false;\n\n\n    private void Start()\n    {\n        formatModal.SetActive(false);\n        filterModal.SetActive(false);\n        videoFormatSelectHint.SetActive(false);\n        OnFormatSelect(Utility.PhotoTypes.RectangularMono);\n    }\n\n    public void RefreshDisplay()\n    {\n        if (isShowingLibrary) DisplayLibrary(playerUIController.photosDataManager.data);\n        else if (displayedAlbumId!= null) DisplayAlbum(playerUIController.photosDataManager.data, displayedAlbumId);\n    }\n\n    public void DisplayLibrary(PhotosDataStore data)\n    {\n        if (!isShowingLibrary || displayedAlbumId!= null)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = true;\n        albumTitle.text = PlayerUIController.ALL_PHOTOS_TEXT;\n        displayedAlbumId = null;\n        StartCoroutine(DisplayPhotos(data.library.mediaItems, data.library.hasMoreMediaItemsToLoad));\n    }\n\n    public void DisplayAlbum(PhotosDataStore data, string albumKey)\n    {\n        Album album = data.albums[albumKey];\n        if(isShowingLibrary || displayedAlbumId!= album.id)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = false;\n        albumTitle.text = album.title;\n        displayedAlbumId = album.id;\n        StartCoroutine(DisplayPhotos(album.mediaItems, album.hasMoreMediaItemsToLoad));\n    }\n\n    IEnumerator DisplayPhotos(Dictionary<string, MediaItem> mediaItems, bool hasMoreMediaItemsToLoad)\n    {\n        yield return new WaitForEndOfFrame(); \n        entryDimension = scrollViewContent.rect.width / numColumnsPerRow;\n\n        if(filterMode!= displayedFilterMode)\n        {\n            displayedFilterMode = filterMode;\n            DestroyAllEntries();\n        }\n\n        int pos = 0;\n        for (int i = 0; i < mediaItems.Count; i++)\n        {\n            var kvp = mediaItems.ElementAt(i);\n            MediaItem mediaItem = kvp.Value;\n\n            if (!ShouldBeShown(mediaItem)) continue;\n            \n            if (!instantiatedPhotoKeys.Contains(kvp.Key))\n            {\n                instantiatedPhotoKeys.Add(kvp.Key);\n\n                int row = pos / numColumnsPerRow;\n                int col = pos % numColumnsPerRow;\n\n                GameObject newEntry = Instantiate(photoEntryPrefab, scrollViewContent);\n                RectTransform rt = newEntry.GetComponent<RectTransform>();\n\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Top,\n                    entryDimension * row,\n                    entryDimension\n                );\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Left,\n                    entryDimension * col,\n                    entryDimension\n                );\n\n                PhotoUIEntry photoUIEntry = newEntry.GetComponent<PhotoUIEntry>();\n                instantiatedEntries[kvp.Key] = photoUIEntry;\n                string imageUrl = null;\n                if (mediaItem.IsPhoto) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                else if (mediaItem.IsVideo) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                if (imageUrl!= null) StartCoroutine(photoUIEntry.DownloadThumbnail(mediaItem, playerUIController.photosDataManager));\n                photoUIEntry.button.onClick.AddListener(() => OnSelectPhoto(mediaItem));\n            }\n\n            pos++;\n        }\n\n        int numRows = (int)Mathf.Ceil((float)pos / numColumnsPerRow);\n        scrollViewContent.sizeDelta = new Vector2(\n            0,\n            entryDimension * numRows +\n            paddingLoadMoreButton * 2 +\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.SetInsetAndSizeFromParentEdge(\n            RectTransform.Edge.Top,\n            entryDimension * numRows + paddingLoadMoreButton,\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.gameObject.SetActive(hasMoreMediaItemsToLoad);\n    }\n\n    public bool ShouldBeShown(MediaItem mediaItem)\n    {\n        if (filterMode == FilterMode.Unfiltered)\n        {\n            return true;\n        }\n        else if (filterMode == FilterMode.SphericalPhotosOnly)\n        {\n            return mediaItem.projection == \"equirectangular\";\n        }\n        else if (filterMode == FilterMode.StereoPhotosOnly)\n        {\n            return true;\n        }\n        else if(filterMode == FilterMode.VideosOnly)\n        {\n            return mediaItem.IsVideo;\n        }\n        return false;\n    }\n\n    public void DestroyAllEntries()\n    {\n        foreach (var kvp in instantiatedEntries)\n        {\n            Destroy(kvp.Value.gameObject);\n        }\n        instantiatedPhotoKeys.Clear();\n        instantiatedEntries.Clear();\n        scrollViewContent.anchoredPosition = Vector2.zero;\n        selectedEntry = null;\n    }\n\n    public void LoadMore()\n    {\n        if (isShowingLibrary)\n        {\n            playerUIController.LoadLibraryMediaItems();\n        }\n        else\n        {\n            playerUIController.LoadAlbumMediaItems(displayedAlbumId);\n        }\n    }\n\n    void OnSelectPhoto(MediaItem mediaItem)\n    {\n        if (!instantiatedEntries.ContainsKey(mediaItem.id)) return;\n        videoFormatSelectHint.SetActive(false);\n        PhotoUIEntry entry = instantiatedEntries[mediaItem.id];\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n        }\n        if (selectedEntry == entry)\n        {\n            selectedEntry = null;\n        }\n        else\n        {\n            entry.SetSelected(true);\n            selectedEntry = entry;\n        }\n\n        if(selectedEntry == null)\n        {\n            photoDisplayer.StopDisplaying();\n        }\n        else if (mediaItem.IsPhoto)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedImageTexture == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadPhotoContent(mediaItem, AfterPhotoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                AfterPhotoDownloaded(mediaItem);\n            }\n        }\n        else if (mediaItem.IsVideo)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedVideoFilePath == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadVideoContent(mediaItem, AfterVideoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                photoDisplayer.CurrentMediaItem = mediaItem;\n                displayVideoOnNextFrame = true;\n                if (photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n                    videoFormatSelectHint.SetActive(true);\n            }\n        }\n    }\n\n    public void ClearSelection()\n    {\n        videoFormatSelectHint.SetActive(false);\n\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n            selectedEntry = null;\n        }\n    }\n\n    void OnDownloadProgressChange(float progress)\n    {\n        playerUIController.DisplayLoader(progress);\n    }\n\n    void AfterPhotoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n        SwitchPhotoTypeBasedOnMetadata(mediaItem);\n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayPhoto();\n    }\n\n    void AfterVideoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n        \n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayVideo();\n        if(photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n            videoFormatSelectHint.SetActive(true);\n    }\n\n    void SwitchPhotoTypeBasedOnMetadata(MediaItem mediaItem)\n    {\n        if (mediaItem",
    "code_repairing_1": "//Here're the fixed code:\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System.Linq;\nusing System.Threading.Tasks;\n\npublic class PhotosUI : MonoBehaviour\n{\n    public enum FilterMode\n    {\n        Unfiltered,\n        SphericalPhotosOnly,\n        StereoPhotosOnly,\n        VideosOnly\n    };\n    public float paddingLoadMoreButton;\n    public int numColumnsPerRow;\n    public Sprite iconRectangularMono;\n    public Sprite iconRectangularStereo;\n    public Sprite iconSphericalMono;\n    public Sprite iconSphericalStereo;\n\n    public GameObject photosUI;\n    public Image formatButtonIcon;\n    public GameObject formatModal;\n    public GameObject filterModal;\n    public RectTransform scrollViewContent;\n    public RectTransform loadMoreButton;\n    public TextMeshProUGUI albumTitle;\n    public GameObject photoEntryPrefab;\n    public PhotoDisplayer photoDisplayer;\n    public GameObject videoFormatSelectHint;\n    [System.NonSerialized]\n    public PlayerUIController playerUIController;\n    [System.NonSerialized]\n    FilterMode filterMode = FilterMode.Unfiltered;\n\n    float entryDimension;\n    bool isShowingLibrary = false;\n    string displayedAlbumId = null;\n    FilterMode displayedFilterMode = FilterMode.Unfiltered;\n    List<string> instantiatedPhotoKeys = new List<string>();\n    Dictionary<string, PhotoUIEntry> instantiatedEntries = new Dictionary<string, PhotoUIEntry>();\n    PhotoUIEntry selectedEntry;\n    bool displayVideoOnNextFrame = false;\n\n    public bool PhotoHasBeenSelected => selectedEntry!= null;\n\n    protected GameObject gobj3;\n    protected GameObject a3;\n\n    private float timeLimit = 5f;\n    private float timer = 0f;\n\n    private bool instantiate_gobj = false;\n\n    private void Start()\n    {\n        formatModal.SetActive(false);\n        filterModal.SetActive(false);\n        videoFormatSelectHint.SetActive(false);\n        OnFormatSelect(Utility.PhotoTypes.RectangularMono);\n    }\n\n    public void RefreshDisplay()\n    {\n        if (isShowingLibrary) DisplayLibrary(playerUIController.photosDataManager.data);\n        else if (displayedAlbumId!= null) DisplayAlbum(playerUIController.photosDataManager.data, displayedAlbumId);\n    }\n\n    public void DisplayLibrary(PhotosDataStore data)\n    {\n        if (!isShowingLibrary || displayedAlbumId!= null)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = true;\n        albumTitle.text = PlayerUIController.ALL_PHOTOS_TEXT;\n        displayedAlbumId = null;\n        StartCoroutine(DisplayPhotos(data.library.mediaItems, data.library.hasMoreMediaItemsToLoad));\n    }\n\n    public void DisplayAlbum(PhotosDataStore data, string albumKey)\n    {\n        Album album = data.albums[albumKey];\n        if (isShowingLibrary || displayedAlbumId!= album.id)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = false;\n        albumTitle.text = album.title;\n        displayedAlbumId = album.id;\n        StartCoroutine(DisplayPhotos(album.mediaItems, album.hasMoreMediaItemsToLoad));\n    }\n\n    IEnumerator DisplayPhotos(Dictionary<string, MediaItem> mediaItems, bool hasMoreMediaItemsToLoad)\n    {\n        yield return new WaitForEndOfFrame();\n        entryDimension = scrollViewContent.rect.width / numColumnsPerRow;\n\n        if (filterMode!= displayedFilterMode)\n        {\n            displayedFilterMode = filterMode;\n            DestroyAllEntries();\n        }\n\n        int pos = 0;\n        for (int i = 0; i < mediaItems.Count; i++)\n        {\n            var kvp = mediaItems.ElementAt(i);\n            MediaItem mediaItem = kvp.Value;\n\n            if (!ShouldBeShown(mediaItem)) continue;\n\n            if (!instantiatedPhotoKeys.Contains(kvp.Key))\n            {\n                instantiatedPhotoKeys.Add(kvp.Key);\n\n                int row = pos / numColumnsPerRow;\n                int col = pos % numColumnsPerRow;\n\n                GameObject newEntry = Instantiate(photoEntryPrefab, scrollViewContent);\n                RectTransform rt = newEntry.GetComponent<RectTransform>();\n\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Top,\n                    entryDimension * row,\n                    entryDimension\n                );\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Left,\n                    entryDimension * col,\n                    entryDimension\n                );\n\n                PhotoUIEntry photoUIEntry = newEntry.GetComponent<PhotoUIEntry>();\n                instantiatedEntries[kvp.Key] = photoUIEntry;\n                string imageUrl = null;\n                if (mediaItem.IsPhoto) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                else if (mediaItem.IsVideo) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                if (imageUrl!= null) StartCoroutine(photoUIEntry.DownloadThumbnail(mediaItem, playerUIController.photosDataManager));\n                photoUIEntry.button.onClick.AddListener(() => OnSelectPhoto(mediaItem));\n            }\n\n            pos++;\n        }\n\n        int numRows = (int)Mathf.Ceil((float)pos / numColumnsPerRow);\n        scrollViewContent.sizeDelta = new Vector2(\n            0,\n            entryDimension * numRows +\n            paddingLoadMoreButton * 2 +\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.SetInsetAndSizeFromParentEdge(\n            RectTransform.Edge.Top,\n            entryDimension * numRows + paddingLoadMoreButton,\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.gameObject.SetActive(hasMoreMediaItemsToLoad);\n    }\n\n    public bool ShouldBeShown(MediaItem mediaItem)\n    {\n        if (filterMode == FilterMode.Unfiltered)\n        {\n            return true;\n        }\n        else if (filterMode == FilterMode.SphericalPhotosOnly)\n        {\n            return mediaItem.projection == \"equirectangular\";\n        }\n        else if (filterMode == FilterMode.StereoPhotosOnly)\n        {\n            return true;\n        }\n        else if (filterMode == FilterMode.VideosOnly)\n        {\n            return mediaItem.IsVideo;\n        }\n        return false;\n    }\n\n    public void DestroyAllEntries()\n    {\n        foreach (var kvp in instantiatedEntries)\n        {\n            Destroy(kvp.Value.gameObject);\n        }\n        instantiatedPhotoKeys.Clear();\n        instantiatedEntries.Clear();\n        scrollViewContent.anchoredPosition = Vector2.zero;\n        selectedEntry = null;\n    }\n\n    public void LoadMore()\n    {\n        if (isShowingLibrary)\n        {\n            playerUIController.LoadLibraryMediaItems();\n        }\n        else\n        {\n            playerUIController.LoadAlbumMediaItems(displayedAlbumId);\n        }\n    }\n\n    void OnSelectPhoto(MediaItem mediaItem)\n    {\n        if (!instantiatedEntries.ContainsKey(mediaItem.id)) return;\n        videoFormatSelectHint.SetActive(false);\n        PhotoUIEntry entry = instantiatedEntries[mediaItem.id];\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n        }\n        if (selectedEntry == entry)\n        {\n            selectedEntry = null;\n        }\n        else\n        {\n            entry.SetSelected(true);\n            selectedEntry = entry;\n        }\n\n        if (selectedEntry == null)\n        {\n            photoDisplayer.StopDisplaying();\n        }\n        else if (mediaItem.IsPhoto)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedImageTexture == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadPhotoContent(mediaItem, AfterPhotoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                AfterPhotoDownloaded(mediaItem);\n            }\n        }\n        else if (mediaItem.IsVideo)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedVideoFilePath == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadVideoContent(mediaItem, AfterVideoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                photoDisplayer.CurrentMediaItem = mediaItem;\n                displayVideoOnNextFrame = true;\n                if (photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n                    videoFormatSelectHint.SetActive(true);\n            }\n        }\n    }\n\n    public void ClearSelection()\n    {\n        videoFormatSelectHint.SetActive(false);\n\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n            selectedEntry = null;\n        }\n    }\n\n    void OnDownloadProgressChange(float progress)\n    {\n        playerUIController.DisplayLoader(progress);\n    }\n\n    void AfterPhotoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n        SwitchPhotoTypeBasedOnMetadata(mediaItem);\n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayPhoto();\n    }\n\n    void AfterVideoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n\n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayVideo();\n        if (photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n            videoFormatSelectHint.SetActive(true);\n    }\n\n    void SwitchPhotoTypeBasedOnMetadata(MediaItem mediaItem)\n    {",
    "code_repairing_2": "// Here is your fixed code!\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System.Linq;\nusing System.Threading.Tasks;\n\npublic class PhotosUI : MonoBehaviour\n{\n    public enum FilterMode\n    {\n        Unfiltered,\n        SphericalPhotosOnly,\n        StereoPhotosOnly,\n        VideosOnly\n    };\n    public float paddingLoadMoreButton;\n    public int numColumnsPerRow;\n    public Sprite iconRectangularMono;\n    public Sprite iconRectangularStereo;\n    public Sprite iconSphericalMono;\n    public Sprite iconSphericalStereo;\n\n    public GameObject photosUI;\n    public Image formatButtonIcon;\n    public GameObject formatModal;\n    public GameObject filterModal;\n    public RectTransform scrollViewContent;\n    public RectTransform loadMoreButton;\n    public TextMeshProUGUI albumTitle;\n    public GameObject photoEntryPrefab;\n    public PhotoDisplayer photoDisplayer;\n    public GameObject videoFormatSelectHint;\n    [System.NonSerialized]\n    public PlayerUIController playerUIController;\n    [System.NonSerialized]\n    FilterMode filterMode = FilterMode.Unfiltered;\n\n    float entryDimension;\n    bool isShowingLibrary = false;\n    string displayedAlbumId = null;\n    FilterMode displayedFilterMode = FilterMode.Unfiltered;\n    List<string> instantiatedPhotoKeys = new List<string>();\n    Dictionary<string, PhotoUIEntry> instantiatedEntries = new Dictionary<string, PhotoUIEntry>();\n    PhotoUIEntry selectedEntry;\n    bool displayVideoOnNextFrame = false;\n\n    public bool PhotoHasBeenSelected => selectedEntry!= null;\n\n    protected GameObject gobj3;\n    protected GameObject a3;\n\n    private float timeLimit = 5f;\n    private float timer = 0f;\n\n    private bool instantiate_gobj = false;\n\n\n    private void Start()\n    {\n        formatModal.SetActive(false);\n        filterModal.SetActive(false);\n        videoFormatSelectHint.SetActive(false);\n        OnFormatSelect(Utility.PhotoTypes.RectangularMono);\n    }\n\n    public void RefreshDisplay()\n    {\n        if (isShowingLibrary) DisplayLibrary(playerUIController.photosDataManager.data);\n        else if (displayedAlbumId!= null) DisplayAlbum(playerUIController.photosDataManager.data, displayedAlbumId);\n    }\n\n    public void DisplayLibrary(PhotosDataStore data)\n    {\n        if (!isShowingLibrary || displayedAlbumId!= null)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = true;\n        albumTitle.text = PlayerUIController.ALL_PHOTOS_TEXT;\n        displayedAlbumId = null;\n        StartCoroutine(DisplayPhotos(data.library.mediaItems, data.library.hasMoreMediaItemsToLoad));\n    }\n\n    public void DisplayAlbum(PhotosDataStore data, string albumKey)\n    {\n        Album album = data.albums[albumKey];\n        if(isShowingLibrary || displayedAlbumId!= album.id)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = false;\n        albumTitle.text = album.title;\n        displayedAlbumId = album.id;\n        StartCoroutine(DisplayPhotos(album.mediaItems, album.hasMoreMediaItemsToLoad));\n    }\n\n    IEnumerator DisplayPhotos(Dictionary<string, MediaItem> mediaItems, bool hasMoreMediaItemsToLoad)\n    {\n        yield return null; // wait until next frame.\n        entryDimension = scrollViewContent.rect.width / numColumnsPerRow;\n\n        if(filterMode!= displayedFilterMode)\n        {\n            displayedFilterMode = filterMode;\n            DestroyAllEntries();\n        }\n\n        int pos = 0;\n        for (int i = 0; i < mediaItems.Count; i++)\n        {\n            var kvp = mediaItems.ElementAt(i);\n            MediaItem mediaItem = kvp.Value;\n\n            if (!ShouldBeShown(mediaItem)) continue;\n            \n            if (!instantiatedPhotoKeys.Contains(kvp.Key))\n            {\n                instantiatedPhotoKeys.Add(kvp.Key);\n\n                int row = pos / numColumnsPerRow;\n                int col = pos % numColumnsPerRow;\n\n                GameObject newEntry = Instantiate(photoEntryPrefab, scrollViewContent);\n                RectTransform rt = newEntry.GetComponent<RectTransform>();\n\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Top,\n                    entryDimension * row,\n                    entryDimension\n                );\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Left,\n                    entryDimension * col,\n                    entryDimension\n                );\n\n                PhotoUIEntry photoUIEntry = newEntry.GetComponent<PhotoUIEntry>();\n                instantiatedEntries[kvp.Key] = photoUIEntry;\n                string imageUrl = null;\n                if (mediaItem.IsPhoto) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                else if (mediaItem.IsVideo) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                if (imageUrl!= null) StartCoroutine(photoUIEntry.DownloadThumbnail(mediaItem, playerUIController.photosDataManager));\n                photoUIEntry.button.onClick.AddListener(() => OnSelectPhoto(mediaItem));\n            }\n\n            pos++;\n        }\n\n        int numRows = (int)Mathf.Ceil((float)pos / numColumnsPerRow);\n        scrollViewContent.sizeDelta = new Vector2(\n            0,\n            entryDimension * numRows +\n            paddingLoadMoreButton * 2 +\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.SetInsetAndSizeFromParentEdge(\n            RectTransform.Edge.Top,\n            entryDimension * numRows + paddingLoadMoreButton,\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.gameObject.SetActive(hasMoreMediaItemsToLoad);\n    }\n\n    public bool ShouldBeShown(MediaItem mediaItem)\n    {\n        if (filterMode == FilterMode.Unfiltered)\n        {\n            return true;\n        }\n        else if (filterMode == FilterMode.SphericalPhotosOnly)\n        {\n            return mediaItem.projection == \"equirectangular\";\n        }\n        else if (filterMode == FilterMode.StereoPhotosOnly)\n        {\n            return true;\n        }\n        else if(filterMode == FilterMode.VideosOnly)\n        {\n            return mediaItem.IsVideo;\n        }\n        return false;\n    }\n\n    public void DestroyAllEntries()\n    {\n        foreach (var kvp in instantiatedEntries)\n        {\n            Destroy(kvp.Value.gameObject);\n        }\n        instantiatedPhotoKeys.Clear();\n        instantiatedEntries.Clear();\n        scrollViewContent.anchoredPosition = Vector2.zero;\n        selectedEntry = null;\n    }\n\n    public void LoadMore()\n    {\n        if (isShowingLibrary)\n        {\n            playerUIController.LoadLibraryMediaItems();\n        }\n        else\n        {\n            playerUIController.LoadAlbumMediaItems(displayedAlbumId);\n        }\n    }\n\n    void OnSelectPhoto(MediaItem mediaItem)\n    {\n        if (!instantiatedEntries.ContainsKey(mediaItem.id)) return;\n        videoFormatSelectHint.SetActive(false);\n        PhotoUIEntry entry = instantiatedEntries[mediaItem.id];\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n        }\n        if (selectedEntry == entry)\n        {\n            selectedEntry = null;\n        }\n        else\n        {\n            entry.SetSelected(true);\n            selectedEntry = entry;\n        }\n\n        if(selectedEntry == null)\n        {\n            photoDisplayer.StopDisplaying();\n        }\n        else if (mediaItem.IsPhoto)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedImageTexture == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadPhotoContent(mediaItem, AfterPhotoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                AfterPhotoDownloaded(mediaItem);\n            }\n        }\n        else if (mediaItem.IsVideo)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedVideoFilePath == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadVideoContent(mediaItem, AfterVideoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                photoDisplayer.CurrentMediaItem = mediaItem;\n                displayVideoOnNextFrame = true;\n                if (photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n                    videoFormatSelectHint.SetActive(true);\n            }\n        }\n    }\n\n    public void ClearSelection()\n    {\n        videoFormatSelectHint.SetActive(false);\n\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n            selectedEntry = null;\n        }\n    }\n\n    void OnDownloadProgressChange(float progress)\n    {\n        playerUIController.DisplayLoader(progress);\n    }\n\n    void AfterPhotoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n        SwitchPhotoTypeBasedOnMetadata(mediaItem);\n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayPhoto();\n    }\n\n    void AfterVideoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n        \n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayVideo();\n        if(photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n            videoFormatSelectHint.SetActive(true);\n    }\n\n    void SwitchPhotoTypeBasedOnMetadata(",
    "code_repairing_3": "//Here're the buggy code lines from /Assets/Scripts/PhotosUI.cs:\nusing System.Collections;\nusing System.Collections.Generic;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System.Linq;\nusing System.Threading.Tasks;\n\npublic class PhotosUI : MonoBehaviour\n{\n    public enum FilterMode\n    {\n        Unfiltered,\n        SphericalPhotosOnly,\n        StereoPhotosOnly,\n        VideosOnly\n    };\n    public float paddingLoadMoreButton;\n    public int numColumnsPerRow;\n    public Sprite iconRectangularMono;\n    public Sprite iconRectangularStereo;\n    public Sprite iconSphericalMono;\n    public Sprite iconSphericalStereo;\n\n    public GameObject photosUI;\n    public Image formatButtonIcon;\n    public GameObject formatModal;\n    public GameObject filterModal;\n    public RectTransform scrollViewContent;\n    public RectTransform loadMoreButton;\n    public TextMeshProUGUI albumTitle;\n    public GameObject photoEntryPrefab;\n    public PhotoDisplayer photoDisplayer;\n    public GameObject videoFormatSelectHint;\n    [System.NonSerialized]\n    public PlayerUIController playerUIController;\n    [System.NonSerialized]\n    FilterMode filterMode = FilterMode.Unfiltered;\n\n    float entryDimension;\n    bool isShowingLibrary = false;\n    string displayedAlbumId = null;\n    FilterMode displayedFilterMode = FilterMode.Unfiltered;\n    List<string> instantiatedPhotoKeys = new List<string>();\n    Dictionary<string, PhotoUIEntry> instantiatedEntries = new Dictionary<string, PhotoUIEntry>();\n    PhotoUIEntry selectedEntry;\n    bool displayVideoOnNextFrame = false;\n\n    public bool PhotoHasBeenSelected => selectedEntry!= null;\n\n    protected GameObject gobj3;\n    protected GameObject a3;\n\n    private float timeLimit = 5f;\n    private float timer = 0f;\n\n    private bool instantiate_gobj = false;\n\n\n    private void Start()\n    {\n        formatModal.SetActive(false);\n        filterModal.SetActive(false);\n        videoFormatSelectHint.SetActive(false);\n        OnFormatSelect(Utility.PhotoTypes.RectangularMono);\n    }\n\n    public void RefreshDisplay()\n    {\n        if (isShowingLibrary) DisplayLibrary(playerUIController.photosDataManager.data);\n        else if (displayedAlbumId!= null) DisplayAlbum(playerUIController.photosDataManager.data, displayedAlbumId);\n    }\n\n    public void DisplayLibrary(PhotosDataStore data)\n    {\n        if (!isShowingLibrary || displayedAlbumId!= null)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = true;\n        albumTitle.text = PlayerUIController.ALL_PHOTOS_TEXT;\n        displayedAlbumId = null;\n        StartCoroutine(DisplayPhotos(data.library.mediaItems, data.library.hasMoreMediaItemsToLoad));\n    }\n\n    public void DisplayAlbum(PhotosDataStore data, string albumKey)\n    {\n        Album album = data.albums[albumKey];\n        if(isShowingLibrary || displayedAlbumId!= album.id)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = false;\n        albumTitle.text = album.title;\n        displayedAlbumId = album.id;\n        StartCoroutine(DisplayPhotos(album.mediaItems, album.hasMoreMediaItemsToLoad));\n    }\n\n    IEnumerator DisplayPhotos(Dictionary<string, MediaItem> mediaItems, bool hasMoreMediaItemsToLoad)\n    {\n        yield return new WaitForEndOfFrame(); \n        entryDimension = scrollViewContent.rect.width / numColumnsPerRow;\n\n        if(filterMode!= displayedFilterMode)\n        {\n            displayedFilterMode = filterMode;\n            DestroyAllEntries();\n        }\n\n        int pos = 0;\n        for (int i = 0; i < mediaItems.Count; i++)\n        {\n            var kvp = mediaItems.ElementAt(i);\n            MediaItem mediaItem = kvp.Value;\n\n            if (!ShouldBeShown(mediaItem)) continue;\n            \n            if (!instantiatedPhotoKeys.Contains(kvp.Key))\n            {\n                instantiatedPhotoKeys.Add(kvp.Key);\n\n                int row = pos / numColumnsPerRow;\n                int col = pos % numColumnsPerRow;\n\n                GameObject newEntry = Instantiate(photoEntryPrefab, scrollViewContent);\n                RectTransform rt = newEntry.GetComponent<RectTransform>();\n\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Top,\n                    entryDimension * row,\n                    entryDimension\n                );\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Left,\n                    entryDimension * col,\n                    entryDimension\n                );\n\n                PhotoUIEntry photoUIEntry = newEntry.GetComponent<PhotoUIEntry>();\n                instantiatedEntries[kvp.Key] = photoUIEntry;\n                string imageUrl = null;\n                if (mediaItem.IsPhoto) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                else if (mediaItem.IsVideo) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                if (imageUrl!= null) StartCoroutine(photoUIEntry.DownloadThumbnail(mediaItem, playerUIController.photosDataManager));\n                photoUIEntry.button.onClick.AddListener(() => OnSelectPhoto(mediaItem));\n            }\n\n            pos++;\n        }\n\n        int numRows = (int)Mathf.Ceil((float)pos / numColumnsPerRow);\n        scrollViewContent.sizeDelta = new Vector2(\n            0,\n            entryDimension * numRows +\n            paddingLoadMoreButton * 2 +\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.SetInsetAndSizeFromParentEdge(\n            RectTransform.Edge.Top,\n            entryDimension * numRows + paddingLoadMoreButton,\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.gameObject.SetActive(hasMoreMediaItemsToLoad);\n    }\n\n    public bool ShouldBeShown(MediaItem mediaItem)\n    {\n        if (filterMode == FilterMode.Unfiltered)\n        {\n            return true;\n        }\n        else if (filterMode == FilterMode.SphericalPhotosOnly)\n        {\n            return mediaItem.projection == \"equirectangular\";\n        }\n        else if (filterMode == FilterMode.StereoPhotosOnly)\n        {\n            return true;\n        }\n        else if(filterMode == FilterMode.VideosOnly)\n        {\n            return mediaItem.IsVideo;\n        }\n        return false;\n    }\n\n    public void DestroyAllEntries()\n    {\n        foreach (var kvp in instantiatedEntries)\n        {\n            Destroy(kvp.Value.gameObject);\n        }\n        instantiatedPhotoKeys.Clear();\n        instantiatedEntries.Clear();\n        scrollViewContent.anchoredPosition = Vector2.zero;\n        selectedEntry = null;\n    }\n\n    public void LoadMore()\n    {\n        if (isShowingLibrary)\n        {\n            playerUIController.LoadLibraryMediaItems();\n        }\n        else\n        {\n            playerUIController.LoadAlbumMediaItems(displayedAlbumId);\n        }\n    }\n\n    void OnSelectPhoto(MediaItem mediaItem)\n    {\n        if (!instantiatedEntries.ContainsKey(mediaItem.id)) return;\n        videoFormatSelectHint.SetActive(false);\n        PhotoUIEntry entry = instantiatedEntries[mediaItem.id];\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n        }\n        if (selectedEntry == entry)\n        {\n            selectedEntry = null;\n        }\n        else\n        {\n            entry.SetSelected(true);\n            selectedEntry = entry;\n        }\n\n        if(selectedEntry == null)\n        {\n            photoDisplayer.StopDisplaying();\n        }\n        else if (mediaItem.IsPhoto)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedImageTexture == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadPhotoContent(mediaItem, AfterPhotoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                AfterPhotoDownloaded(mediaItem);\n            }\n        }\n        else if (mediaItem.IsVideo)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedVideoFilePath == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadVideoContent(mediaItem, AfterVideoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                photoDisplayer.CurrentMediaItem = mediaItem;\n                displayVideoOnNextFrame = true;\n                if (photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n                    videoFormatSelectHint.SetActive(true);\n            }\n        }\n    }\n\n    public void ClearSelection()\n    {\n        videoFormatSelectHint.SetActive(false);\n\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n            selectedEntry = null;\n        }\n    }\n\n    void OnDownloadProgressChange(float progress)\n    {\n        playerUIController.DisplayLoader(progress);\n    }\n\n    void AfterPhotoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n        SwitchPhotoTypeBasedOnMetadata(mediaItem);\n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayPhoto();\n    }\n\n    void AfterVideoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n        \n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayVideo();\n        if(photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n            videoFormatSelectHint.SetActive(true);\n    }",
    "code_repairing_4": "// Here're the buggy code lines from /Assets/Scripts/PhotosUI.cs:\nusing System.Collections;\nusing System.Collections.Generic;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System.Linq;\nusing System.Threading.Tasks;\n\npublic class PhotosUI : MonoBehaviour\n{\n    public enum FilterMode\n    {\n        Unfiltered,\n        SphericalPhotosOnly,\n        StereoPhotosOnly,\n        VideosOnly\n    };\n    public float paddingLoadMoreButton;\n    public int numColumnsPerRow;\n    public Sprite iconRectangularMono;\n    public Sprite iconRectangularStereo;\n    public Sprite iconSphericalMono;\n    public Sprite iconSphericalStereo;\n\n    public GameObject photosUI;\n    public Image formatButtonIcon;\n    public GameObject formatModal;\n    public GameObject filterModal;\n    public RectTransform scrollViewContent;\n    public RectTransform loadMoreButton;\n    public TextMeshProUGUI albumTitle;\n    public GameObject photoEntryPrefab;\n    public PhotoDisplayer photoDisplayer;\n    public GameObject videoFormatSelectHint;\n    [System.NonSerialized]\n    public PlayerUIController playerUIController;\n    [System.NonSerialized]\n    FilterMode filterMode = FilterMode.Unfiltered;\n\n    float entryDimension;\n    bool isShowingLibrary = false;\n    string displayedAlbumId = null;\n    FilterMode displayedFilterMode = FilterMode.Unfiltered;\n    List<string> instantiatedPhotoKeys = new List<string>();\n    Dictionary<string, PhotoUIEntry> instantiatedEntries = new Dictionary<string, PhotoUIEntry>();\n    PhotoUIEntry selectedEntry;\n    bool displayVideoOnNextFrame = false;\n\n    public bool PhotoHasBeenSelected => selectedEntry!= null;\n\n    protected GameObject gobj3;\n    protected GameObject a3;\n\n    private float timeLimit = 5f;\n    private float timer = 0f;\n\n    private bool instantiate_gobj = false;\n\n    protected void Start()\n    {\n        formatModal.SetActive(false);\n        filterModal.SetActive(false);\n        videoFormatSelectHint.SetActive(false);\n        OnFormatSelect(Utility.PhotoTypes.RectangularMono);\n    }\n\n    public void RefreshDisplay()\n    {\n        if (isShowingLibrary) DisplayLibrary(playerUIController.photosDataManager.data);\n        else if (displayedAlbumId!= null) DisplayAlbum(playerUIController.photosDataManager.data, displayedAlbumId);\n    }\n\n    public void DisplayLibrary(PhotosDataStore data)\n    {\n        if (!isShowingLibrary || displayedAlbumId!= null)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = true;\n        albumTitle.text = PlayerUIController.ALL_PHOTOS_TEXT;\n        displayedAlbumId = null;\n        StartCoroutine(DisplayPhotos(data.library.mediaItems, data.library.hasMoreMediaItemsToLoad));\n    }\n\n    public void DisplayAlbum(PhotosDataStore data, string albumKey)\n    {\n        Album album = data.albums[albumKey];\n        if (isShowingLibrary || displayedAlbumId!= album.id)\n        {\n            DestroyAllEntries();\n        }\n        isShowingLibrary = false;\n        albumTitle.text = album.title;\n        displayedAlbumId = album.id;\n        StartCoroutine(DisplayPhotos(album.mediaItems, album.hasMoreMediaItemsToLoad));\n    }\n\n    IEnumerator DisplayPhotos(Dictionary<string, MediaItem> mediaItems, bool hasMoreMediaItemsToLoad)\n    {\n        yield return new WaitForEndOfFrame();\n        entryDimension = scrollViewContent.rect.width / numColumnsPerRow;\n\n        if (filterMode!= displayedFilterMode)\n        {\n            displayedFilterMode = filterMode;\n            DestroyAllEntries();\n        }\n\n        int pos = 0;\n        for (int i = 0; i < mediaItems.Count; i++)\n        {\n            var kvp = mediaItems.ElementAt(i);\n            MediaItem mediaItem = kvp.Value;\n\n            if (!ShouldBeShown(mediaItem)) continue;\n\n            if (!instantiatedPhotoKeys.Contains(kvp.Key))\n            {\n                instantiatedPhotoKeys.Add(kvp.Key);\n\n                int row = pos / numColumnsPerRow;\n                int col = pos % numColumnsPerRow;\n\n                GameObject newEntry = Instantiate(photoEntryPrefab, scrollViewContent);\n                RectTransform rt = newEntry.GetComponent<RectTransform>();\n\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Top,\n                    entryDimension * row,\n                    entryDimension\n                );\n                rt.SetInsetAndSizeFromParentEdge(\n                    RectTransform.Edge.Left,\n                    entryDimension * col,\n                    entryDimension\n                );\n\n                PhotoUIEntry photoUIEntry = newEntry.GetComponent<PhotoUIEntry>();\n                instantiatedEntries[kvp.Key] = photoUIEntry;\n                string imageUrl = null;\n                if (mediaItem.IsPhoto) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                else if (mediaItem.IsVideo) imageUrl = mediaItem.baseUrl + \"=w500-h500-c\";\n                if (imageUrl!= null) StartCoroutine(photoUIEntry.DownloadThumbnail(mediaItem, playerUIController.photosDataManager));\n                photoUIEntry.button.onClick.AddListener(() => OnSelectPhoto(mediaItem));\n            }\n\n            pos++;\n        }\n\n        int numRows = (int)Mathf.Ceil((float)pos / numColumnsPerRow);\n        scrollViewContent.sizeDelta = new Vector2(\n            0,\n            entryDimension * numRows +\n            paddingLoadMoreButton * 2 +\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.SetInsetAndSizeFromParentEdge(\n            RectTransform.Edge.Top,\n            entryDimension * numRows + paddingLoadMoreButton,\n            loadMoreButton.rect.height\n        );\n        loadMoreButton.gameObject.SetActive(hasMoreMediaItemsToLoad);\n    }\n\n    public bool ShouldBeShown(MediaItem mediaItem)\n    {\n        if (filterMode == FilterMode.Unfiltered)\n        {\n            return true;\n        }\n        else if (filterMode == FilterMode.SphericalPhotosOnly)\n        {\n            return mediaItem.projection == \"equirectangular\";\n        }\n        else if (filterMode == FilterMode.StereoPhotosOnly)\n        {\n            return true;\n        }\n        else if (filterMode == FilterMode.VideosOnly)\n        {\n            return mediaItem.IsVideo;\n        }\n        return false;\n    }\n\n    public void DestroyAllEntries()\n    {\n        foreach (var kvp in instantiatedEntries)\n        {\n            Destroy(kvp.Value.gameObject);\n        }\n        instantiatedPhotoKeys.Clear();\n        instantiatedEntries.Clear();\n        scrollViewContent.anchoredPosition = Vector2.zero;\n        selectedEntry = null;\n    }\n\n    public void LoadMore()\n    {\n        if (isShowingLibrary)\n        {\n            playerUIController.LoadLibraryMediaItems();\n        }\n        else\n        {\n            playerUIController.LoadAlbumMediaItems(displayedAlbumId);\n        }\n    }\n\n    void OnSelectPhoto(MediaItem mediaItem)\n    {\n        if (!instantiatedEntries.ContainsKey(mediaItem.id)) return;\n        videoFormatSelectHint.SetActive(false);\n        PhotoUIEntry entry = instantiatedEntries[mediaItem.id];\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n        }\n        if (selectedEntry == entry)\n        {\n            selectedEntry = null;\n        }\n        else\n        {\n            entry.SetSelected(true);\n            selectedEntry = entry;\n        }\n\n        if (selectedEntry == null)\n        {\n            photoDisplayer.StopDisplaying();\n        }\n        else if (mediaItem.IsPhoto)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedImageTexture == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadPhotoContent(mediaItem, AfterPhotoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                AfterPhotoDownloaded(mediaItem);\n            }\n        }\n        else if (mediaItem.IsVideo)\n        {\n            playerUIController.DisplayLoader();\n            if (mediaItem.downloadedVideoFilePath == null)\n            {\n                StartCoroutine(playerUIController.photosDataManager.DownloadVideoContent(mediaItem, AfterVideoDownloaded, OnDownloadProgressChange));\n            }\n            else\n            {\n                photoDisplayer.CurrentMediaItem = mediaItem;\n                displayVideoOnNextFrame = true;\n                if (photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n                    videoFormatSelectHint.SetActive(true);\n            }\n        }\n    }\n\n    public void ClearSelection()\n    {\n        videoFormatSelectHint.SetActive(false);\n\n        if (selectedEntry!= null)\n        {\n            selectedEntry.SetSelected(false);\n            selectedEntry = null;\n        }\n    }\n\n    void OnDownloadProgressChange(float progress)\n    {\n        playerUIController.DisplayLoader(progress);\n    }\n\n    void AfterPhotoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n        SwitchPhotoTypeBasedOnMetadata(mediaItem);\n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayPhoto();\n    }\n\n    void AfterVideoDownloaded(MediaItem mediaItem)\n    {\n        photoDisplayer.CurrentMediaItem = null;\n\n        playerUIController.HideLoader();\n        photoDisplayer.CurrentMediaItem = mediaItem;\n        photoDisplayer.DisplayVideo();\n        if (photoDisplayer.PhotoType == Utility.PhotoTypes.RectangularMono)\n            videoFormatSelectHint.SetActive(true);\n    }"
}