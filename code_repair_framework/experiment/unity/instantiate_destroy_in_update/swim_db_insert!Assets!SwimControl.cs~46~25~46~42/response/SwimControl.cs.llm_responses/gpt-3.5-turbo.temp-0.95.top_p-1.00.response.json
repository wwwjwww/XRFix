{
    "id": "chatcmpl-9c9HaeLeTyzV9r5ZfFMDDU9Yl7k25",
    "object": "chat.completion",
    "created": 1718879174,
    "model": "gpt-35-turbo",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "        // Instantiate/Destroy should be done in appropriate methods like Start() or OnTriggerEnter()\n\n        // Example Fixed Version:\n        // void Start()\n        // {\n        //     GameObject a9 = Instantiate(gobj9);\n        //     var component9 = a9.AddComponent<HandManager>();\n        //     component9.CleanUpObject();\n\n        //     rb2.transform.Rotate(0, 40, 0);\n        // }\n    }\n\n    // Update is called once per frame\n    void FixedUpdate()\n    {\n        float speed = rb.velocity.magnitude;\n        speedReadout.text = \"Speed: \" + speed.ToString(\"F2\") + \" m/s\";\n        speedReadout2.text = \"Speed: \" + speed.ToString(\"F2\") + \" m/s\";\n\n        if (Vector3.Distance(transform.position, boat.transform.position) <= boatDistanceThreshold)\n        {\n            Vector3 direction = boat.transform.position - transform.position;\n            boatRb.AddForce(direction.normalized * boatForceMultiplier);\n            lifeguardAnim.SetBool(\"HandUp\", false);\n            handUpTime = 0;\n            handUp = false;\n        }\n        else\n        {\n            sfo.AddForce(head.transform.up * Input.GetAxis(\"Mouse Y\") * Time.deltaTime * swimForceMultiplier);\n\n            if (Input.GetMouseButton(0))\n            {\n                if (!handUp)\n                {\n                    handUp = true;\n                    handUpTime = Time.time;\n                }\n\n                if (Time.time - handUpTime > handDeltaThreshold)\n                {\n                    lifeguardAnim.SetBool(\"HandUp\", true);\n                    sfo.AddForce(head.transform.up * 10);\n                }\n            }\n            else\n            {\n                lifeguardAnim.SetBool(\"HandUp\", false);\n                handUpTime = 0;\n                handUp = false;\n            }\n        }\n\n        Vector3 leftHandDelta = leftHand.localPosition - lastLeftPosition;\n        Vector3 rightHandDelta = rightHand.localPosition - lastRightPosition;\n\n        Vector3 avgHandDelta = (leftHandDelta + rightHandDelta) / 2;\n        Vector3 torqueVector = new Vector3(avgHandDelta.y, -avgHandDelta.x, 0);\n\n        rb.AddTorque(torqueVector * 10);\n\n        lastLeftPosition = leftHand.localPosition;\n        lastRightPosition = rightHand.localPosition;\n    }\n}"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "        // Check if hands are above head\n        CheckHandsAboveHead();\n\n        // Control speed of boat\n        ControlBoatSpeed();\n\n        // Update speed readouts\n        UpdateSpeedReadouts();\n    }\n\n    void FixedUpdate()\n    {\n        // Swim forward based on hand movement\n        SwimForward();\n    }\n\n    void SwimForward()\n    {\n        // Calculate hand movement delta\n        float leftHandDelta = Vector3.Distance(leftHand.localPosition, lastLeftPosition);\n        float rightHandDelta = Vector3.Distance(rightHand.localPosition, lastRightPosition);\n\n        // Calculate total hand movement delta\n        float totalHandDelta = leftHandDelta + rightHandDelta;\n\n        // Apply swim force to move character forward\n        rb.AddForce(head.transform.forward * totalHandDelta * swimForceMultiplier);\n\n        // Save current hand positions for next frame\n        lastLeftPosition = leftHand.localPosition;\n        lastRightPosition = rightHand.localPosition;\n    }\n\n    void CheckHandsAboveHead()\n    {\n        // Check if hands are above head\n        if (leftHand.localPosition.y > head.transform.localPosition.y && rightHand.localPosition.y > head.transform.localPosition.y)\n        {\n            if (!handUp)\n            {\n                handUp = true;\n                lifeguardAnim.SetBool(\"HandUp\", true);\n                handUpTime = Time.time;\n            }\n            else\n            {\n                if (Time.time - handUpTime > handDeltaThreshold)\n                {\n                    // Implement action when hands are up for a certain time\n                    // For example, signal lifeguard for help\n                }\n            }\n        }\n        else\n        {\n            handUp = false;\n            lifeguardAnim.SetBool(\"HandUp\", false);\n        }\n    }\n\n    void ControlBoatSpeed()\n    {\n        // Calculate distance between player and boat\n        float distanceToBoat = Vector3.Distance(transform.position, boat.transform.position);\n\n        // Adjust boat speed based on distance\n        if (distanceToBoat < boatDistanceThreshold)\n        {\n            float speedMultiplier = 1 - (distanceToBoat / boatDistanceThreshold);\n            boatRb.AddForce(boat.transform.forward * boatForceMultiplier * speedMultiplier);\n            if (!boatMotor.isPlaying)\n            {\n                boatMotor.Play();\n            }\n        }\n        else\n        {\n            boatMotor.Stop();\n        }\n    }\n\n    void UpdateSpeedReadouts()\n    {\n        // Update speed readouts with boat speed\n        speedReadout.text = \"Boat Speed: \" + boatRb.velocity.magnitude.ToString(\"0.0\") + \" m/s\";\n        speedReadout2.text = \"Boat Speed: \" + boatRb.velocity.magnitude.ToString(\"0.0\") + \" m/s\";\n    }\n}"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "        // Instantiate gobj9 if not already instantiated\n        if (gobj9 == null)\n        {\n            gobj9 = Instantiate(gobj9);\n            rb2 = gobj9.GetComponent<Rigidbody>();\n        }\n\n        // Clean up the object\n        var component9 = gobj9.GetComponent<HandManager>();\n        component9.CleanUpObject();\n\n        // Rotate rb2\n        rb2.transform.Rotate(0, 40, 0);\n    }\n    \n    // Update is called once per frame\n    void FixedUpdate()\n    {\n        // Calculate hand movement velocity\n        float leftHandDelta = Vector3.Distance(leftHand.localPosition, lastLeftPosition) / Time.deltaTime;\n        float rightHandDelta = Vector3.Distance(rightHand.localPosition, lastRightPosition) / Time.deltaTime;\n\n        // Check if hand movement is above threshold\n        if (leftHandDelta > handDeltaThreshold || rightHandDelta > handDeltaThreshold)\n        {\n            handUpTime += Time.deltaTime;\n            if (!handUp)\n            {\n                handUp = true;\n                lifeguardAnim.SetTrigger(\"HandUp\");\n            }\n        }\n        else\n        {\n            handUp = false;\n            handUpTime = 0;\n        }\n\n        // Update last hand positions\n        lastLeftPosition = leftHand.localPosition;\n        lastRightPosition = rightHand.localPosition;\n\n        // Apply swim force to the swimmer\n        Vector3 swimForce = new Vector3(0, 0, (leftHandDelta + rightHandDelta) * swimForceMultiplier);\n        rb.AddRelativeForce(swimForce);\n\n        // Check if swimmer is close enough to the boat to apply force\n        float distanceToBoat = Vector3.Distance(transform.position, boat.transform.position);\n        if (distanceToBoat < boatDistanceThreshold)\n        {\n            Vector3 boatForce = (boat.transform.position - transform.position).normalized * boatForceMultiplier;\n            boatRb.AddForce(boatForce);\n            // Enable boat motor sound\n            if (!boatMotor.isPlaying)\n            {\n                boatMotor.Play();\n            }\n        }\n        else\n        {\n            // Disable boat motor sound\n            if (boatMotor.isPlaying)\n            {\n                boatMotor.Stop();\n            }\n        }\n\n        // Update speed readout text\n        speedReadout.text = \"Swim Speed: \" + Mathf.Round(rb.velocity.magnitude * 100) / 100 + \" m/s\";\n        speedReadout2.text = \"Boat Speed: \" + Mathf.Round(boatRb.velocity.magnitude * 100) / 100 + \" m/s\";\n    }\n}"
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 363,
        "completion_tokens": 1553,
        "total_tokens": 1916
    },
    "system_fingerprint": "fp_811936bd4f"
}