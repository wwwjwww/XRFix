{
    "code_repairing_0": "void Update()\n{\ndebug.text = controler.transform.rotation.x.ToString() +\n                 \"\\n\" + controler.transform.rotation.y.ToString() +\n                 \"\\n\" + controler.transform.rotation.z.ToString();\nif (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\n{\nif (!hasArrow)\n{\nAttachArrow();\n}\nelse if (isAttached) {\nFire();\n}\n}\nelse ThrowArrow();\n}\n\nvoid FixedUpdate()\n{\n// Move your \"AttachArrow\" and \"Fire\" functions here.\n}\n\npublic void ThrowArrow()\n{\nif (currentArrow != null)\n{\nLastArrow = currentArrow;\ncurrentArrow = null;\nLastArrow.transform.parent = null;\nLastArrow.GetComponent<Rigidbody>().isKinematic = false;\nLastArrow.GetComponent<Rigidbody>().angularVelocity = OVRInput.GetLocalControllerAngularVelocity(controller);\nLastArrow.GetComponent<Rigidbody>().velocity = OVRInput.GetLocalControllerVelocity(controller);\nhasArrow = false;\nisAttached = false;\n}\n}",
    "code_repairing_1": "public void FixedUpdate()\n{\ndebug.text = controler.transform.rotation.x.ToString() +\n\\n\" + controler.transform.rotation.y.ToString() +\n\\n\" + controler.transform.rotation.z.ToString();\nif (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\n{\nif (!hasArrow)\n{\nAttachArrow();\n}\nelse if (isAttached)\n{\nFire();\n}\n}\nelse\n{\nThrowArrow();\n}\n}\n \n// Remove the FixedUpdate() function from the Update() method and replace it with the Update() method.",
    "code_repairing_2": "Here is the fixed code:\n```\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ArrowManager : MonoBehaviour\n{\n    private GameObject currentArrow;\n    public static ArrowManager Instance;\n    public OVRInput.Controller controller;\n    public GameObject controler;\n    public GameObject arrowPrefab;\n    public GameObject LastArrow;\n    public GameObject arrowStartPoint;\n    public TextMesh debug;\n    private bool hasArrow = false;\n    private bool isAttached = false;\n\n    void Awake()\n    {\n        if (Instance == null)\n            Instance = this;\n    }\n\n    void OnDestroy()\n    {\n        if (Instance == this)\n            Instance = null;\n    }\n\n    // BUG: Transform object of Rigidbody in FixedUpdate() methods\n    // MESSAGE: Rigidbody needs to be transformed in FixedUpdate() methods to simulate real-world movement.\n    void FixedUpdate()\n    {\n        debug.text = controler.transform.rotation.x.ToString() +\n                 \"\\n\" + controler.transform.rotation.y.ToString() +\n                 \"\\n\" + controler.transform.rotation.z.ToString();\n        \n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\n        {\n            if (!hasArrow)\n            {\n                AttachArrow();\n            }\n            else if (isAttached)\n            {\n                Fire();\n            }\n        }\n        else ThrowArrow();\n    }\n    \n    public void AttachArrow()\n    {\n        if (currentArrow == null)\n        {\n            currentArrow = Instantiate(arrowPrefab, controler.transform);\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\n            hasArrow = true;\n        }\n    }\n    \n    private void Fire()\n    {\n        if (isAttached && OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) < 0)\n        {\n            float dist = (arrowStartPoint.transform.position - controler.transform.position).magnitude;\n            currentArrow.transform.parent = null;\n            Rigidbody r = currentArrow.GetComponent<Rigidbody>();\n            r.velocity = currentArrow.transform.forward * 25f * dist;\n            r.useGravity = true;\n            currentArrow.GetComponent<Collider>().isTrigger = false;\n            currentArrow = null;\n            hasArrow = false;\n            isAttached = false;\n        }\n    }\n    \n    public void ThrowArrow()\n    {\n        if (currentArrow != null)\n        {\n            LastArrow = currentArrow;\n            currentArrow = null;\n            LastArrow.transform.parent = null;\n            LastArrow.GetComponent<Rigidbody>().isKinematic = false;\n            LastArrow.GetComponent<Rigidbody>().angularVelocity = OVRInput.GetLocalControllerAngularVelocity(controller);\n            LastArrow.GetComponent<Rigidbody>().velocity = OVRInput.GetLocalControllerVelocity(controller);\n            hasArrow = false;\n            isAttached = false;\n        }\n    }\n}\n```\nIn the FixedUpdate() method, we have moved the code that was in `Update()` method to a new line of code that will now run every fixed frame (fixed step) instead of every frame (the default).\n\nWe also modified the `Fire()` function to make it run only when the trigger is released, as opposed to the original code which was always running even when the trigger was held.",
    "code_repairing_3": "void FixedUpdate()\n    {\n        debug.text = controler.transform.rotation.x.ToString() +\n                     \"\\n\" + controler.transform.rotation.y.ToString() +\n                     \"\\n\" + controler.transform.rotation.z.ToString();\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\n        {\n            if (!hasArrow)\n            {\n                AttachArrow();\n            } else if (isAttached) {\n                Fire();\n            }\n        }\n        else ThrowArrow();\n    }\n\npublic void AttachArrow()\n{\n    if (currentArrow == null)\n    {\n        currentArrow = Instantiate(arrowPrefab, controler.transform);\n        currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\n        currentArrow.GetComponent<Rigidbody>().isKinematic = true;\n        hasArrow = true;\n    }\n}\n\nprivate void Fire()\n{\n    if (isAttached && OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) < 0)\n    {\n        float dist = (arrowStartPoint.transform.position - controler.transform.position).magnitude;\n        currentArrow.transform.parent = null;\n        Rigidbody r = currentArrow.GetComponent<Rigidbody>();\n        r.velocity = currentArrow.transform.forward * 25f * dist;\n        r.useGravity = true;\n        currentArrow.GetComponent<Collider>().isTrigger = false;\n        currentArrow = null;\n        hasArrow = false;\n        isAttached = false;\n    }\n}\n\npublic void ThrowArrow()\n{\n    if (currentArrow != null)\n    {\n        LastArrow = currentArrow;\n        currentArrow = null;\n        LastArrow.transform.parent = null;\n        LastArrow.GetComponent<Rigidbody>().isKinematic = false;\n        LastArrow.GetComponent<Rigidbody>().angularVelocity = OVRInput.GetLocalControllerAngularVelocity(controller);\n        LastArrow.GetComponent<Rigidbody>().velocity = OVRInput.GetLocalControllerVelocity(controller);\n        hasArrow = false;\n        isAttached = false;\n    }\n}\n\nMove this function in FixedUpdate() methods instead of Update() to avoid the error.",
    "code_repairing_4": "'Fixed Code':\n\nvoid FixedUpdate()\n    {\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\n        {\n            if (!hasArrow)\n            {\n                AttachArrow();\n            } else if (isAttached) {\n                Fire();\n            }\n        }\n        else ThrowArrow();\n    }\n\n// Move this debug message to Update() methods.\n    void Update()\n    {\n        debug.text = controler.transform.rotation.x.ToString() +\n                     \"\\n\" + controler.transform.rotation.y.ToString() +\n                     \"\\n\" + controler.transform.rotation.z.ToString();\n    }\n// Add this code below to FixedUpdate method before Fire() method.\nif (currentArrow != null)\n{\n    LastArrow = currentArrow;\n    currentArrow = null;\n    LastArrow.GetComponent<Rigidbody>().isKinematic = false;\n    LastArrow.GetComponent<Rigidbody>().angularVelocity = OVRInput.GetLocalControllerAngularVelocity(controller);\n    LastArrow.GetComponent<Rigidbody>().velocity = OVRInput.GetLocalControllerVelocity(controller);\n    hasArrow = false;\n    isAttached = false;\n}\n// Change void Fire() to void Fire()\nvoid Fire()\n    {\n        if (isAttached && OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) < 0)\n        {\n            float dist = (arrowStartPoint.transform.position - controler.transform.position).magnitude;\n            currentArrow.transform.parent = null;\n            Rigidbody r = currentArrow.GetComponent<Rigidbody>();\n            r.velocity = currentArrow.transform.forward * 25f * dist;\n            r.useGravity = true;\n            currentArrow.GetComponent<Collider>().isTrigger = false;\n            currentArrow = null;\n            hasArrow = false;\n            isAttached = false;\n        }\n    }"
}