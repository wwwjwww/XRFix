//Here're the buggy code lines from /Assets/Oculus/VR/Scripts/Util/OVRGrabber.cs:
/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Collections.Generic;
using UnityEngine;




[RequireComponent(typeof(Rigidbody))]
public class OVRGrabber : MonoBehaviour
{

    public float grabBegin = 0.55f;
    public float grabEnd = 0.35f;






    [SerializeField]
    protected bool m_parentHeldObject = false;







    [SerializeField]
    protected bool m_moveHandPosition = false;



    [SerializeField]
    protected Transform m_gripTransform = null;


    [SerializeField]
    protected Collider[] m_grabVolumes = null;


    [SerializeField]
    protected OVRInput.Controller m_controller;




    [SerializeField]
    protected Transform m_parentTransform;

    [SerializeField]
    protected GameObject m_player;

    protected bool m_grabVolumeEnabled = true;
    protected Vector3 m_lastPos;
    protected Quaternion m_lastRot;
    protected Quaternion m_anchorOffsetRotation;
    protected Vector3 m_anchorOffsetPosition;
    protected float m_prevFlex;
    protected OVRGrabbable m_grabbedObj = null;
    protected Vector3 m_grabbedObjectPosOff;
    protected Quaternion m_grabbedObjectRotOff;
    protected Dictionary<OVRGrabbable, int> m_grabCandidates = new Dictionary<OVRGrabbable, int>();
    protected bool m_operatingWithoutOVRCameraRig = true;




    public OVRGrabbable grabbedObject
    {
        get { return m_grabbedObj; }
    }

    public void ForceRelease(OVRGrabbable grabbable)
    {
        bool canRelease = (
            (m_grabbedObj != null) &&
            (m_grabbedObj == grabbable)
        );
        if (canRelease)
        {
            GrabEnd();
        }
    }

    protected virtual void Awake()
    {
        m_anchorOffsetPosition = transform.localPosition;
        m_anchorOffsetRotation = transform.localRotation;

        if (!m_moveHandPosition)
        {

            OVRCameraRig rig = transform.GetComponentInParent<OVRCameraRig>();
            if (rig != null)
            {
                rig.UpdatedAnchors += (r) => { OnUpdatedAnchors(); };
                m_operatingWithoutOVRCameraRig = false;
            }
        }
    }

    protected virtual void Start()
    {
        m_lastPos = transform.position;
        m_lastRot = transform.rotation;
        if (m_parentTransform == null)
        {
            m_parentTransform = gameObject.transform;
        }


        SetPlayerIgnoreCollision(gameObject, true);
    }










//    virtual public void Update()
//    {
//        if (m_operatingWithoutOVRCameraRig)
//        {
//            OnUpdatedAnchors();
//        }
//    }




//    void OnUpdatedAnchors()
//    {
//        Vector3 destPos = m_parentTransform.TransformPoint(m_anchorOffsetPosition);
//        Quaternion destRot = m_parentTransform.rotation * m_anchorOffsetRotation;
//
//        if (m_moveHandPosition)
//        {
//            GetComponent<Rigidbody>().MovePosition(destPos);
//            GetComponent<Rigidbody>().MoveRotation(destRot);
//        }
//
//        if (!m_parentHeldObject)
//        {
//            MoveGrabbedObject(destPos, destRot);
//        }
//
//        m_lastPos = transform.position;
//        m_lastRot = transform.rotation;
//
//        float prevFlex = m_prevFlex;
//
//        m_prevFlex = OVRInput.Get(OVRInput.Axis1D.PrimaryHandTrigger, m_controller);
//
//        CheckForGrabOrRelease(prevFlex);
//    }

// FIXED CODE:
