{
    "code_repairing_0": "The code under the `FIXED CODE:` section seems to be missing some code related to the `OVRGradleGeneration` class. Here is the fixed code snippet:\n```\nnamespace Oculus.VR.Editor\n{\n    public class OVRGradleGeneration\n    {\n        public OVRADBTool adbTool;\n        public Process adbProcess;\n\n    #if USING_XR_MANAGEMENT && (USING_XR_SDK_OCULUS || USING_XR_SDK_OPENXR)\n    #define USING_XR_SDK\n    #endif\n\n        public int callbackOrder { get { return _callbackOrder; } }\n        static private System.DateTime buildStartTime;\n        static private System.Guid buildGuid;\n\n    #if UNITY_ANDROID\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Xml;\n    using System.Diagnostics;\n    using System.Threading;\n    using Oculus.VR.Editor;\n    using UnityEditor;\n    using UnityEngine;\n    using UnityEngine.Rendering;\n    using UnityEditor.Build;\n    using UnityEditor.Build.Reporting;\n    #if UNITY_ANDROID\n    using UnityEditor.Android;\n    #endif\n\n    #if USING_XR_SDK_OPENXR\n    using UnityEngine.XR.OpenXR;\n    using UnityEditor.XR.OpenXR.Features;\n    #endif\n\n    #if USING_XR_SDK_OCULUS\n    using Unity.XR.Oculus;\n    #endif\n\n    [InitializeOnLoad]\n    public class OVRGradleGeneration\n        : IPreprocessBuildWithReport, IPostprocessBuildWithReport\n    #if UNITY_ANDROID\n        , IPostGenerateGradleAndroidProject\n    #endif\n    {\n        public OVRADBTool adbTool;\n        public Process adbProcess;\n\n        private int _callbackOrder = 3;\n\n        static private System.DateTime buildStartTime;\n        static private System.Guid buildGuid;\n\n        static OVRGradleGeneration()\n        {\n            EditorApplication.delayCall += OnDelayCall;\n        }\n\n        static void OnDelayCall()\n        {\n        #if UNITY_ANDROID\n            autoIncrementVersion = PlayerPrefs.GetInt(prefName, 0) != 0;\n            Menu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n        #endif\n        }\n\n    #if UNITY_ANDROID\n        [MenuItem(menuItemAutoIncVersion)]\n        public static void ToggleUtilities()\n        {\n            autoIncrementVersion = !autoIncrementVersion;\n            Menu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n\n            int newValue = (autoIncrementVersion) ? 1 : 0;\n            PlayerPrefs.SetInt(prefName, newValue);\n            PlayerPrefs.Save();\n\n            Debug.Log(\"Auto Increment Version Code: \" + autoIncrementVersion);\n        }\n    #endif\n\n        public void OnPreprocessBuild(BuildReport report)\n        {\n        #if USING_XR_SDK_OPENXR\n            UnityEngine.Debug.LogWarning(\"The installation of Unity OpenXR Plugin is detected, which should NOT be used in production when developing Oculus apps for production. Please uninstall the package, and install the Oculus XR Plugin from the Package Manager.\");\n\n            var oculusXRFeature = FeatureHelpers.GetFeatureWithIdForBuildTarget(report.summary.platformGroup, Oculus.XR.OculusXRFeature.featureId);\n            if (oculusXRFeature.enabled)\n            {\n                if (!useOpenXR)\n                {\n                    throw new BuildFailedException(\"OpenXR backend for Oculus Plugin is disabled, which is required to support Unity OpenXR Plugin. Please enable OpenXR backend for Oculus Plugin through the 'Oculus -> Tools -> OpenXR' menu.\");\n                }\n\n                string ovrRootPath = OVRPluginInfo.GetUtilitiesRootPath();\n                var importers = PluginImporter.GetAllImporters();\n                foreach (var importer in importers)\n                {\n                    if (!importer.GetCompatibleWithPlatform(report.summary.platform))\n                        continue;\n                    string fullAssetPath = Path.Combine(Directory.GetCurrentDirectory(), importer.assetPath);\n        #if UNITY_EDITOR_WIN\n                    fullAssetPath = fullAssetPath.Replace(\"/\", \"\\\\\");\n        #endif\n                    if (fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"OVRPlugin\"))\n                    {\n                        UnityEngine.Debug.LogFormat(\"[Oculus] Native plugin included in build because of enabled OculusXRFeature: {0}\", importer.assetPath);\n                        importer.SetIncludeInBuildDelegate(path => true);\n                    }\n                    if (!fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"libopenxr_loader.so\"))\n                    {\n                        UnityEngine.Debug.LogFormat(\"[Oculus] libopenxr_loader.so from other packages will be disabled because of enabled OculusXRFeature: {0}\", importer.assetPath);\n                        importer.SetIncludeInBuildDelegate(path => false);\n                    }\n                }\n            }\n            else\n            {\n                UnityEngine.Debug.LogWarning(\"OculusXRFeature is not enabled in OpenXR Settings. Oculus Integration scripts will not be functional.\");\n            }\n        #endif\n\n        #if UNITY_ANDROID && !(USING_XR_SDK && UNITY_2019_3_OR_NEWER)\n            if (!PlayerSettings.GetUseDefaultGraphicsAPIs(BuildTarget.Android))\n            {\n                GraphicsDeviceType[] apis = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);\n                if (apis.Length >= 1 && apis[0] == GraphicsDeviceType.Vulkan)\n                {\n                    throw new BuildFailedException(\"The Vulkan Graphics API does not support XR in your configuration. To use Vulkan, you must use Unity 2019.3 or newer, and the XR Plugin Management.\");\n                }\n            }\n        #endif\n\n        #if UNITY_ANDROID && USING_XR_SDK_OCULUS && OCULUS_XR_SYMMETRIC\n            OculusSettings settings;\n            UnityEditor.EditorBuildSettings.TryGetConfigObject<OculusSettings>(\"Unity.XR.Oculus.Settings\", out settings);\n\n            if (settings.SymmetricProjection && !symmetricWarningShown)\n            {\n                symmetricWarningShown = true;\n                UnityEngine.Debug.LogWarning(\"Symmetric Projection is enabled in the Oculus XR Settings. To ensure best GPU performance, make sure at least FFR 1 is being used.\");\n            }\n        #endif\n\n        #if UNITY_ANDROID\n        #if USING_XR_SDK\n            if (useOpenXR)\n            {\n                UnityEngine.Debug.LogWarning(\"Oculus Utilities Plugin with OpenXR is being used, which is under experimental status\");\n\n                if (PlayerSettings.colorSpace != ColorSpace.Linear)\n                {\n                    throw new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports linear lighting. Please set 'Rendering/Color Space' to 'Linear' in Player Settings\");\n                }\n            }\n        #else\n            if (useOpenXR)\n            {\n                throw new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports XR Plug-in Managmenent with Oculus XR Plugin.\");\n            }\n        #endif\n        #endif\n\n        #if UNITY_ANDROID && USING_XR_SDK && !USING_COMPATIBLE_OCULUS_XR_PLUGIN_VERSION\n            if (PlayerSettings.Android.targetArchitectures != AndroidArchitecture.ARM64)\n                throw new BuildFailedException(\"Your project is using an Oculus XR Plugin version with known issues. Please navigate to the Package Manager and upgrade the Oculus XR Plugin to the latest verified version. When performing the upgrade\" +\n                    \", you must first \\\"Remove\\\" the",
    "code_repairing_1": "```\nFix the code to remove any errors or warnings.\n\npublic void OnPostProcessBuild(BuildReport report)\n{\n\tstring[] defaultProjPaths;\n\n\t// Add the following lines at the end of the OnPostGenerateGradleAndroidProject function:\n\t\n\tdefaultProjPaths = GetPaths(report);\n\n\tforeach (string defaultProjPath in defaultProjPaths)\n\t{\n\t\tFile.Move(defaultPath, defaultPath + \".bak\");\n\t\tFile.WriteAllText(defaultPath, File.ReadAllText(defaultPath + \".bak\").Replace(\"compile \\\"com.unity.modules.unitywebrequest\\\"\", \"compileOnly \\\"com.unity.modules.unitywebrequest\\\"\"));\n\t}\n\n\t// Move the following method to the end of the GetPaths function:\n\tprivate string[] GetPaths(BuildReport report)\n\t{\n\t\tstring projectRoot = report.summary.outputPath.Replace(\"/Assets\", \"\");\n\t\t\n\t\tList<string> defaultProjPaths = new List<string>();\n\n\t\tstring[] files = Directory.GetFiles(projectRoot, \"project.properties\", SearchOption.AllDirectories);\n\t\tforeach (string file in files)\n\t\t{\n\t\t\tdefaultProjPaths.Add(file);\n\t\t}\n\n\t\treturn defaultProjPaths.ToArray();\n\t}\n}\n```",
    "code_repairing_2": "FIXED CODE:\n\n#if USING_XR_MANAGEMENT && (USING_XR_SDK_OCULUS || USING_XR_SDK_OPENXR)\n#define USING_XR_SDK\n#endif\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if USING_XR_SDK_OCULUS\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999; \n#endif\n#endif\n\n \npublic int callbackOrder { get { return _callbackOrder; } }\nstatic private System.DateTime buildStartTime;\nstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if USING_XR_SDK_OCULUS\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999; \n#endif\n#endif\n\n \npublic int callbackOrder { get { return _callbackOrder; } }\nstatic private System.DateTime buildStartTime;\nstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if USING_XR_SDK_OCULUS\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999; \n#endif\n#endif\n\n \npublic int callbackOrder { get { return _callbackOrder; } }\nstatic private System.DateTime buildStartTime;\nstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if USING_XR_SDK_OCULUS\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999; \n#endif\n#endif\n\n \npublic int callbackOrder { get { return _callbackOrder; } }\nstatic private System.DateTime buildStartTime;\nstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if USING_XR_SDK_OCULUS\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999; \n#endif\n#endif\n\n \npublic int callbackOrder { get { return _callbackOrder; } }\nstatic private System.DateTime buildStartTime;\nstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;",
    "code_repairing_3": "Here is the fixed code:\n```\n#if USING_XR_MANAGEMENT && (USING_XR_SDK_OCULUS || USING_XR_SDK_OPENXR)\n#define USING_XR_SDK\n#endif\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999;\n#endif\n\n\tpublic int callbackOrder { get { return _callbackOrder; } }\n\tpublic static System.DateTime buildStartTime;\n\tpublic static System.Guid buildGuid;\n\n#if UNITY_ANDROID\n\tpublic const string prefName = \"OVRAutoIncrementVersionCode_Enabled\";\n\tpublic static bool autoIncrementVersion = false;\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS\n\tpublic static bool symmetricWarningShown = false;\n#endif\n\n\tstatic OVRGradleGeneration()\n\t{\n\t\tEditorApplication.delayCall += OnDelayCall;\n\t}\n\n\tstatic void OnDelayCall()\n\t{\n#if UNITY_ANDROID\n\t\tautoIncrementVersion = PlayerPrefs.GetInt(prefName, 0) != 0;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n#endif\n\t}\n\n#if UNITY_ANDROID\n\t[MenuItem(menuItemAutoIncVersion)]\n\tpublic static void ToggleUtilities()\n\t{\n\t\tautoIncrementVersion = !autoIncrementVersion;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n\n\t\tint newValue = (autoIncrementVersion) ? 1 : 0;\n\t\tPlayerPrefs.SetInt(prefName, newValue);\n\t\tPlayerPrefs.Save();\n\n\t\tUnityEngine.Debug.Log(\"Auto Increment Version Code: \" + autoIncrementVersion);\n\t}\n#endif\n\n\tpublic void OnPreprocessBuild(BuildReport report)\n\t{\n\t\tbool useOpenXR = OVRPluginInfo.IsOVRPluginOpenXRActivated();\n\n#if USING_XR_SDK_OPENXR\n\t\tUnityEngine.Debug.LogWarning(\"The installation of Unity OpenXR Plugin is detected, which should NOT be used in production when developing Oculus apps for production. Please uninstall the package, and install the Oculus XR Plugin from the Package Manager.\");\n\n\t\tvar oculusXRFeature = FeatureHelpers.GetFeatureWithIdForBuildTarget(report.summary.platformGroup, Oculus.XR.OculusXRFeature.featureId);\n\t\tif (oculusXRFeature.enabled)\n\t\t{\n\t\t\tif (!useOpenXR)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"OpenXR backend for Oculus Plugin is disabled, which is required to support Unity OpenXR Plugin. Please enable OpenXR backend for Oculus Plugin through the 'Oculus -> Tools -> OpenXR' menu.\");\n\t\t\t}\n\n\t\t\tstring ovrRootPath = OVRPluginInfo.GetUtilitiesRootPath();\n\t\t\tvar importers = PluginImporter.GetAllImporters();\n\t\t\tforeach (var importer in importers)\n\t\t\t{\n\t\t\t\tif (!importer.GetCompatibleWithPlatform(report.summary.platform))\n\t\t\t\t\tcontinue;\n\t\t\t\tstring fullAssetPath = Path.Combine(Directory.GetCurrentDirectory(), importer.assetPath);\n#if UNITY_EDITOR_WIN\n\t\t\t\tfullAssetPath = fullAssetPath.Replace(\"/\", \"\\\\\");\n#endif\n\t\t\t\tif (fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"OVRPlugin\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] Native plugin included in build because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => true);\n\t\t\t\t}\n\t\t\t\tif (!fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"libopenxr_loader.so\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] libopenxr_loader.so from other packages will be disabled because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"OculusXRFeature is not enabled in OpenXR Settings. Oculus Integration scripts will not be functional.\");\n\t\t}\n#endif\n\n#if UNITY_ANDROID && !(USING_XR_SDK && UNITY_2019_3_OR_NEWER)\n\t\tif (!PlayerSettings.GetUseDefaultGraphicsAPIs(BuildTarget.Android))\n\t\t{\n\t\t\tGraphicsDeviceType[] apis = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);\n\t\t\tif (apis.Length >= 1 && apis[0] == GraphicsDeviceType.Vulkan)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"The Vulkan Graphics API does not support XR in your configuration. To use Vulkan, you must use Unity 2019.3 or newer, and the XR Plugin Management.\");\n\t\t\t}\n\t\t}\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS && OCULUS_XR_SYMMETRIC\n\t\tif (UseSymmetricProjection && !symmetricWarningShown)\n\t\t{\n\t\t\tsymmetricWarningShown = true;\n\t\t\tUnityEngine.Debug.LogWarning(\"Symmetric Projection is enabled in the Oculus XR Settings. To ensure best GPU performance, make sure at least FFR 1 is being used.\");\n\t\t}\n#endif\n\n#if UNITY_ANDROID\n#if USING_XR_SDK\n\t\tif (useOpenXR)\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"Oculus Utilities Plugin with OpenXR is being used, which is under experimental status\");\n\n\t\t\tif (PlayerSettings.colorSpace != ColorSpace.Linear)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports linear lighting. Please set 'Rendering/Color Space' to 'Linear' in Player Settings\");\n\t\t\t}\n\t\t}\n#else\n\t\tif (useOpenXR)\n\t\t{\n\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports XR Plug-in Managmenent with Oculus XR Plugin.\");\n\t\t}\n#endif\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK && !USING_COMPATIBLE_OCULUS_XR_PLUGIN_VERSION\n\t\tif (PlayerSettings.Android.targetArchitectures != AndroidArchitecture.ARM64)",
    "code_repairing_4": "The `FIXED CODE:` area of the code should now look like this:\n```\n#if USING_XR_MANAGEMENT && (USING_XR_SDK_OCULUS || USING_XR_SDK_OPENXR)\n#define USING_XR_SDK\n#endif\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999; \n#endif\n\n\tpublic int callbackOrder { get { return _callbackOrder; } }\n\tstatic private System.DateTime buildStartTime;\n\tstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\n\tpublic const string prefName = \"OVRAutoIncrementVersionCode_Enabled\";\n\tprivate const string menuItemAutoIncVersion = \"Oculus/Tools/Auto Increment Version Code\";\n\tstatic bool autoIncrementVersion = false;\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS\n    static private bool symmetricWarningShown = false;\n#endif\n\n    static OVRGradleGeneration()\n\t{\n\t\tEditorApplication.delayCall += OnDelayCall;\n\t}\n\n\tstatic void OnDelayCall()\n\t{\n#if UNITY_ANDROID\n\t\tautoIncrementVersion = PlayerPrefs.GetInt(prefName, 0) != 0;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n#endif\n\t}\n\n#if UNITY_ANDROID\n\t[MenuItem(menuItemAutoIncVersion)]\n\tpublic static void ToggleUtilities()\n\t{\n\t\tautoIncrementVersion = !autoIncrementVersion;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n\n\t\tint newValue = (autoIncrementVersion) ? 1 : 0;\n\t\tPlayerPrefs.SetInt(prefName, newValue);\n\t\tPlayerPrefs.Save();\n\n\t\tUnityEngine.Debug.Log(\"Auto Increment Version Code: \" + autoIncrementVersion);\n\t}\n#endif\n\n\tpublic void OnPreprocessBuild(BuildReport report)\n\t{\n\t\tbool useOpenXR = OVRPluginInfo.IsOVRPluginOpenXRActivated();\n\n#if USING_XR_SDK_OPENXR\n\t\tUnityEngine.Debug.LogWarning(\"The installation of Unity OpenXR Plugin is detected, which should NOT be used in production when developing Oculus apps for production. Please uninstall the package, and install the Oculus XR Plugin from the Package Manager.\");\n\n\t\t\n\t\tvar oculusXRFeature = FeatureHelpers.GetFeatureWithIdForBuildTarget(report.summary.platformGroup, Oculus.XR.OculusXRFeature.featureId);\n\t\tif (oculusXRFeature.enabled)\n\t\t{\n\t\t\tif (!useOpenXR)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"OpenXR backend for Oculus Plugin is disabled, which is required to support Unity OpenXR Plugin. Please enable OpenXR backend for Oculus Plugin through the 'Oculus -> Tools -> OpenXR' menu.\");\n\t\t\t}\n\n\t\t\tstring ovrRootPath = OVRPluginInfo.GetUtilitiesRootPath();\n\t\t\tvar importers = PluginImporter.GetAllImporters();\n\t\t\tforeach (var importer in importers)\n\t\t\t{\n\t\t\t\tif (!importer.GetCompatibleWithPlatform(report.summary.platform))\n\t\t\t\t\tcontinue;\n\t\t\t\tstring fullAssetPath = Path.Combine(Directory.GetCurrentDirectory(), importer.assetPath);\n#if UNITY_EDITOR_WIN\n\t\t\t\tfullAssetPath = fullAssetPath.Replace(\"/\", \"\\\\\");\n#endif\n\t\t\t\tif (fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"OVRPlugin\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] Native plugin included in build because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => true);\n\t\t\t\t}\n\t\t\t\tif (!fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"libopenxr_loader.so\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] libopenxr_loader.so from other packages will be disabled because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"OculusXRFeature is not enabled in OpenXR Settings. Oculus Integration scripts will not be functional.\");\n\t\t}\n#endif\n\n#if UNITY_ANDROID && !(USING_XR_SDK && UNITY_2019_3_OR_NEWER)\n\t\t\n\t\tif (!PlayerSettings.GetUseDefaultGraphicsAPIs(BuildTarget.Android))\n\t\t{\n\t\t\tGraphicsDeviceType[] apis = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);\n\t\t\tif (apis.Length >= 1 && apis[0] == GraphicsDeviceType.Vulkan)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"The Vulkan Graphics API does not support XR in your configuration. To use Vulkan, you must use Unity 2019.3 or newer, and the XR Plugin Management.\");\n\t\t\t}\n\t\t}\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS && OCULUS_XR_SYMMETRIC\n        OculusSettings settings;\n        UnityEditor.EditorBuildSettings.TryGetConfigObject<OculusSettings>(\"Unity.XR.Oculus.Settings\", out settings);\n\n        if (settings.SymmetricProjection && !symmetricWarningShown)\n        {\n            symmetricWarningShown = true;\n            UnityEngine.Debug.LogWarning(\"Symmetric Projection is enabled in the Oculus XR Settings. To ensure best GPU performance, make sure at least FFR 1 is being used.\");\n        }\n#endif\n\n#if UNITY_ANDROID\n#if USING_XR_SDK\n        if (useOpenXR)\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"Oculus Utilities Plugin with OpenXR is being used, which is under experimental status\");\n\n\t\t\tif (PlayerSettings.colorSpace != ColorSpace.Linear)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports linear lighting. Please set 'Rendering/Color Space' to 'Linear' in Player Settings\");\n\t\t\t}\n\t\t}\n#else\n\t\tif (useOpenXR)\n\t\t{\n\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports XR Plug-in Managmenent with Oculus XR"
}