{
    "id": "chatcmpl-9yzJCRlTQVnlW7OBJPjqo0LnyRMl4",
    "object": "chat.completion",
    "created": 1724322378,
    "model": "gpt-4",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```csharp\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic static class OVRBoundary\n{\n    // Fixed methods and other code\n    public static bool GetConfigured()\n    {\n        return OVRManager.boundary.GetConfigured();\n    }\n\n    public static BoundaryTestResult TestNode(Node node, BoundaryType boundaryType)\n    {\n        var boundary = OVRManager.boundary;\n        return boundary.TestNode(node, boundaryType);\n    }\n\n    public static BoundaryTestResult TestPoint(Vector3 point, BoundaryType boundaryType)\n    {\n        var boundary = OVRManager.boundary;\n        return boundary.TestPoint(point, boundaryType);\n    }\n\n    // Other existing code...\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "```csharp\npublic bool GetConfigured()\n{\n\tif (!OVRManager.isHmdPresent)\n\t\treturn false;\n\t\t\n\treturn OVRPlugin.GetBoundaryConfigured();\n}\n\npublic OVRBoundary.BoundaryTestResult TestNode(OVRBoundary.Node node, OVRBoundary.BoundaryType boundaryType)\n{\n\tOVRPlugin.BoundaryTestResult ovrpRes = OVRPlugin.TestBoundaryNode((OVRPlugin.Node)node, (OVRPlugin.BoundaryType)boundaryType);\n\n\treturn new OVRBoundary.BoundaryTestResult()\n\t{\n\t\tIsTriggering = ovrpRes.IsTriggering,\n\t\tClosestDistance = ovrpRes.ClosestDistance,\n\t\tClosestPoint = ovrpRes.ClosestPoint.FromFlippedZVector3f(),\n\t\tClosestPointNormal = ovrpRes.ClosestPointNormal.FromFlippedZVector3f(),"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "```csharp\npublic List<Vector3> GetGeometry(BoundaryType boundaryType)\n{\n\tint pointsCount = 0;\n\tIntPtr pointsPtr = IntPtr.Zero;\n\n\tif (OVRManager.loadedXRDevice == OVRManager.XRDevice.Oculus)\n\t{\n\t\tpointsCount = OVRPlugin.GetBoundaryGeometry((OVRPlugin.BoundaryType)boundaryType, IntPtr.Zero, 0);\n\t\tif (pointsCount > 0)\n\t\t{\n\t\t\tif (cachedGeometryNativeBuffer.GetCapacity() < pointsCount * cachedVector3fSize)\n\t\t\t{\n\t\t\t\tcachedGeometryNativeBuffer.Reset(pointsCount * cachedVector3fSize);\n\t\t\t}\n\n\t\t\tpointsPtr = cachedGeometryNativeBuffer.GetPointer();\n\n\t\t\tif (OVRPlugin.GetBoundaryGeometry((OVRPlugin.BoundaryType)boundaryType, pointsPtr, pointsCount) > 0)\n\t\t\t{\n\t\t\t\tif (cachedGeometryManagedBuffer.Length < pointsCount * 3)\n\t\t\t\t{\n\t\t\t\t\tcachedGeometryManagedBuffer = new float[pointsCount * 3];\n\t\t\t\t}\n\n\t\t\t\tMarshal.Copy(pointsPtr, cachedGeometryManagedBuffer, 0, pointsCount * 3);\n\n\t\t\t\tList<Vector3> geometry = new List<Vector3>(pointsCount);\n\t\t\t\tfor (int i = 0; i < pointsCount; i++)\n\t\t\t\t{\n\t\t\t\t\tVector3 point = new Vector3(cachedGeometryManagedBuffer[i * 3 + 0], cachedGeometryManagedBuffer[i * 3 + 1], cachedGeometryManagedBuffer[i * 3 + 2]);\n\t\t\t\t\tgeometry.Add(point);\n\t\t\t\t}\n\t\t\t\treturn geometry; \n\t\t\t}\n\t\t}\n\n\t\treturn new List<Vector3>();"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "```csharp\npublic List<Vector3> GetGeometry(OVRBoundary.BoundaryType boundaryType)\n{\n    if (OVRManager.loadedXRDevice == OVRManager.XRDevice.Oculus)\n    {\n        var geometry = OVRPlugin.GetBoundaryGeometry((OVRPlugin.BoundaryType)boundaryType);\n        if (geometry.Length > 0)\n        {\n            if (cachedGeometryNativeBuffer.GetCapacity() < geometry.Length * cachedVector3fSize)\n            {\n                cachedGeometryNativeBuffer.Reset(geometry.Length * cachedVector3fSize);\n            }\n            if (cachedGeometryManagedBuffer.Length < geometry.Length * 3)\n            {\n                cachedGeometryManagedBuffer = new float[geometry.Length * 3];\n            }\n\n            Marshal.Copy(geometry, 0, cachedGeometryNativeBuffer.GetPointer(), geometry.Length);\n            cachedGeometryNativeBuffer.CopyTo(cachedGeometryManagedBuffer);\n            var geometryList = new List<Vector3>(geometry.Length);\n            for (int i = 0; i < geometry.Length; i++)\n            {\n                int floatIndex = i * 3;\n                Vector3 point = new Vector3(cachedGeometryManagedBuffer[floatIndex + 0], cachedGeometryManagedBuffer[floatIndex + 1], -cachedGeometryManagedBuffer[floatIndex + 2]);\n                geometryList.Add(point);\n            }\n            return geometryList;\n        }\n    }\n#if !USING_XR_SDK && !REQUIRES_XR_SDK\n    else\n    {\n        var boundaryGeometry = Boundary.TryGetGeometry();\n        if (boundaryGeometry.HasValue)\n        {\n            return boundaryGeometry.Value;\n        }\n    }\n#endif\n    return new List<Vector3>();\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "```csharp\npublic class OVRBoundary\n{\n    // ...\n\n    public static Vector3[] GetGeometry(BoundaryType boundaryType)\n    {\n        int pointsCount = 0;\n        IntPtr pointsPtr = IntPtr.Zero;\n\n        if (GetBoundaryGeometry(boundaryType, ref pointsPtr, ref pointsCount))\n        {\n            if (EnsureNativeBufferCapacity(pointsCount * cachedVector3fSize))\n            {\n                OVRPlugin.Vector3f[] points = new OVRPlugin.Vector3f[pointsCount];\n                Marshal.Copy(pointsPtr, points, 0, pointsCount);\n\n                cachedGeometryManagedBuffer = new float[pointsCount * 3];\n                \n                for (int i = 0; i < pointsCount; i++)\n                {\n                    cachedGeometryManagedBuffer[i * 3 + 0] = points[i].x;\n                    cachedGeometryManagedBuffer[i * 3 + 1] = points[i].y;\n                    cachedGeometryManagedBuffer[i * 3 + 2] = -points[i].z;\n                }\n\n                Vector3[] geometry = new Vector3[pointsCount];\n                for (int i = 0; i < pointsCount; i++)\n                {\n                    geometry[i] = new Vector3(cachedGeometryManagedBuffer[i * 3 + 0], cachedGeometryManagedBuffer[i * 3 + 1], cachedGeometryManagedBuffer[i * 3 + 2]);\n                }\n\n                return geometry;\n            }\n        }\n\n        return new Vector3[0];\n    }\n\n    private static bool EnsureNativeBufferCapacity(int capacity)\n    {\n        if (cachedGeometryNativeBuffer == null || cachedGeometryNativeBuffer.GetCapacity() < capacity)\n        {\n            if (cachedGeometryNativeBuffer != null)\n            {\n                cachedGeometryNativeBuffer.Dispose();\n            }\n\n            cachedGeometryNativeBuffer = new OVRNativeBuffer(capacity);\n        }\n\n        return cachedGeometryNativeBuffer != null && cachedGeometryNativeBuffer.GetCapacity() >= capacity;\n    }\n\n    private static bool GetBoundaryGeometry(BoundaryType boundaryType, ref IntPtr pointsPtr, ref int pointsCount)\n    {\n        OVRPlugin.BoundaryGeometry geometryType = (OVRPlugin.BoundaryGeometry)boundaryType;\n        return OVRPlugin.GetBoundaryGeometry(geometryType, ref pointsPtr, ref pointsCount);\n    }\n\n    // ...\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 788,
        "completion_tokens": 1469,
        "total_tokens": 2257
    },
    "system_fingerprint": "fp_e49e4201a9"
}