{
  "input_code": "        private void Gt_onControllersUpdate(Controller[] controllers)\n        {\n            foreach (var ctrl in controllers)\n            {\n                transform.SetPositionAndRotation(ctrl.position, ctrl.rotation);\n\n                var track = ctrl.GetAdditionalData(ref tracks);\n                track.all_tracks = tracks;\n                float closest_distance = float.PositiveInfinity;\n                IControllerDialog closest = null;\n\n                if (track.trigger_down)\n                {\n                    closest_distance = track.hover.FindDistance(camera, force: true);\n                    if (closest_distance > 100)\n                        closest_distance = 100;\n                    closest = track.hover;\n                }\n                else\n                {\n                    foreach (var vr_dialog in FindObjectsOfType<VRDialog>())\n                    {\n                        float distance = vr_dialog.FindDistance(camera);\n                        if (distance < closest_distance)\n                        {\n                            closest_distance = distance;\n                            closest = vr_dialog;\n                        }\n                    }\n\n                    float dist1 = LevelPlatform.FindDistanceTarget(camera, out var target);\n                    if (dist1 < closest_distance)\n                    {\n                        closest_distance = dist1;\n                        closest = target;\n                    }\n                }\n\n                if (track.hover != closest)\n                {\n                    if (track.trigger_down)\n                    {\n                        track.trigger_down = false;\n                        track.hover.TriggerUp(track, camera);\n                    }\n                    if (track.hover != null)\n                        track.hover.Leave(track);\n                    track.hover = closest;\n                    if (closest != null)\n                    {\n                        closest.Enter(track);\n                        ctrl.HapticPulse();\n                    }\n                }\n\n                Material mat;\n                if (closest == null)\n                {\n                    closest_distance = defaultDistance;\n                    mat = lineMissMaterial;\n                }\n                else\n                {\n<BUGS>                    bool trigger_pressed = ctrl.triggerPressed | ctrl.touchpadPressed;\n<BUGE>                    if (trigger_pressed != track.trigger_down)\n                    {\n                        track.trigger_down = trigger_pressed;\n                        if (trigger_pressed)\n                            closest.TriggerDown(track, camera);\n                        else\n                            closest.TriggerUp(track, camera);\n                    }\n                    closest.Hover(track, ctrl, camera);\n                    mat = lineMaterial;\n                }\n\n                if (closest == null || closest is LevelPlatform)\n                {\n                    if (track.trigger_down)\n                        track.touch_pad_scroll = null;\n                    else\n                    {\n                        if (track.touch_pad_scroll == null)\n                            track.touch_pad_scroll = new TouchPadScroll();\n                        LevelPlatform.HandleScroll(track.touch_pad_scroll.Handle(ctrl));\n                    }\n                }\n\n                var matrix = Matrix4x4.TRS(ctrl.position, ctrl.rotation, closest_distance * Vector3.one);\n                Graphics.DrawMesh(lineMesh, matrix, mat, 0);\n            }\n        }\n",
  "model_outputs": [
    {
      "response_id": 1,
      "output": "<FIXS> boolean trigger_pressed=ctrl.triggerPressed | ctrl.touchpadPressed; <FIXE> <FIXS> Diff diff=track.hover.FindDiff(camera); <FIXE> <FIXS> if (diff != null) { Diff diff=track.hover.FindDiff(camera); <FIXE> <FIXS> if (diff != null) { Diff diff=diff.subtract(camera); <FIXE>"
    },
    {
      "response_id": 2,
      "output": "<FIXS> boolean trigger_pressed=ctrl.triggerPressed | ctrl.touchpadPressed; <FIXE> <FIXS> Diff diff=track.hover.FindDiff(camera); <FIXE> <FIXS> if (diff != null) { Diff diff=track.hover.FindDiff(camera); <FIXE> <FIXS> if (diff != null) { Diff diff=diff.subtract(vs); <FIXE>"
    },
    {
      "response_id": 3,
      "output": "<FIXS> boolean trigger_pressed=ctrl.triggerPressed; <FIXE> <FIXS> Diff diff=track.hover.FindDiff(camera); <FIXE> <FIXS> if (diff > 0) { Diff diff=track.hover.FindDiff(camera); <FIXE> <FIXS> Diff diff=track.hover.FindDiff(camera); <FIXE>"
    },
    {
      "response_id": 4,
      "output": "<FIXS> Diff reset=ctrl.touchpadPressed;Fails.add(reset); <FIXE> <FIXS> <FIXE> <FIXS> for ( var vr_dialog : FindObjectsOfType<VRDialog>(camera)) { Diff diff=vr_dialog.FindDistance(camera); if (diff > 0) diff.setX(diff.x); Diff.setY(diff.y); Diff.setZ(diff.z); } <FIXE>"
    },
    {
      "response_id": 5,
      "output": "<FIXS> PDPermission ignored_permissions; <FIXE> <FIXS> PDPermission ignored_permissions=ctrl.ignore_permissions; <FIXE> <FIXS> PDPermission ignored_permissions=ctrl.ignore_permissions; <FIXE>"
    }
  ],
  "model_path": "Salesforce/codet5-base",
  "parameters": {
    "max_source_length": 512,
    "max_target_length": 256,
    "beam_size": 10,
    "num_responses": 5,
    "diversity_penalty": 1.0
  }
}