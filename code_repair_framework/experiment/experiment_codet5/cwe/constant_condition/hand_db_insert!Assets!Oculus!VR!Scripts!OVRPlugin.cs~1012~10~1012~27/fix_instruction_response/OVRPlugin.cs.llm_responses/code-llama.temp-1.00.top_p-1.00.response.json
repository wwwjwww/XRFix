{
    "code_repairing_0": "public const int Max = ((int)Hand.MaxSkinnable > 50) ? (int)Hand.MaxSkinnable : 50;\n\n\n\n\n\t\n}\n\n\n\n\n\n\n\n\t\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct Bone\n\t{\n\t\tpublic int Id;\n\t\tpublic IntPtr ParentId;\n\t\tpublic Posef Pose;\n\t\tpublic Posef Rotation;\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct HandState\n\t{\n\t\tpublic Bool bActive;\n\t\tpublic Bool bHandTracked;\n\t\tpublic Bool bSystemGestureInProgress;\n\t\tpublic HandStatus HandStatus;\n\t\tpublic TrackingConfidence Confidence;\n\t\tpublic int GestureId;\n\t\tpublic UInt32 SystemGesture;\n\t\tpublic Posef HeadPose;\n\n\t\tpublic struct HandData\n\t\t{\n\t\t\tpublic bool bIsTracked;\n\t\t\tpublic TrackingConfidence Confidence;\n\t\t\tpublic Posef Pose;\n\t\t\tpublic Quatf Rotation;\n\t\t\tpublic Posef RootPose;\n\t\t\tpublic Posef FingerPose[MaxSkinnable];\n\t\t\tpublic Posef LeapPose[MaxLeapBones];\n\t\t}\n\n\t\tpublic HandData Hand;\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct NodeState\n\t{\n\t\tpublic System.IntPtr ParentNode;\n\t\tpublic Posef Pose;\n\t\tpublic Posef Rotation;\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn string.Format(System.Globalization.CultureInfo.InvariantCulture, \"{0}, {1}\", Pose, Rotation);\n\t\t}\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct TrackingState\n\t{\n\t\tpublic System.IntPtr RootNode;\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]\n\t\tpublic NodeState[] Nodes;\n\t\tpublic int NodeCount;\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct UserPresence\n\t{\n\t\tpublic int UserId;\n\t\tpublic Bool IsUserPresent;\n\t\tpublic Byte UserCalibrationStatus;\n\t\tpublic Byte BlinkStrength;\n\t\tpublic Byte UserActivityLevel;\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct EyeTextureMeta\n\t{\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]\n\t\tpublic Sizei[] EyeTextureSize;\n\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]\n\t\tpublic Vector2f[] EyeTextureResolutionMultiplier;\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct System\n\t{\n\t\tpublic Handedness Handedness;\n\t\tpublic double DisplayFrequency;\n\t\tpublic double SystemClockFrequency;\n\t\tpublic double GpuClockFrequency;\n\t\tpublic int TrackingCameras;\n\t\tpublic int TrackingReferenceTypes;\n\t\tpublic int DisplayDebugMode;\n\t\tpublic int TrackingFrameOffset;\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct Version\n\t{\n\t\tpublic int Major;\n\t\tpublic int Minor;\n\t\tpublic int Build;\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn string.Format(\"{0}.{1}.{2}\", Major, Minor, Build);\n\t\t}\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct Result\n\t{\n\t\tpublic int result;\n\t\tpublic string error;\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn string.Format(\"{(int)result = {0}, (string)error = \\\"{1}\\\"}\", result, error);\n\t\t}\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct CameraSettings\n\t{\n\t\tpublic IntPtr Camera;\n\t\tpublic bool bIsActive;\n\t\tpublic Bool bUsePositionData;\n\t\tpublic Bool bUseRotationData;\n\t\tpublic Bool bUseProjectionSetData;\n\t\tpublic Bool bUseFovData;\n\t\tpublic Bool bUseViewportData;\n\t\tpublic Bool bUseLayerData;\n\t\tpublic Bool bUseTrackingData;\n\t\tpublic IntPtr PreLayerSubmit;\n\t\tpublic LayerLayout Layout;\n\t\tpublic int MipLevels;\n\t\tpublic Sizei TextureSize;\n\t\tpublic IntPtr SubmitPose;\n\t\tpublic EyeTextureFormat EyeTextureFormat;\n\t\tpublic int SampleCount;\n\t\tpublic EyeTextureResolution MultisampleResolution;\n\t\tpublic int TextureSwapChainSize;\n\t\tpublic int MaxViewportSize;\n\t\tpublic IntPtr TextureSwapChain;\n\n\t\tPosef HmdPose;\n\n\t\t\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]\n\t\tpublic Fovf[] HmdFov;\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]\n\t\tpublic Fovf[] EyeFov;\n\n\t\t\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]\n\t\tpublic Sizei[] TextureSizeDesc;\n\n\t\t\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]\n\t\tpublic Recti[] ViewportRect;\n\n\t\tpublic static readonly CameraDesc Default = new CameraDesc {\n\t\t\t\n\t\t\tHmdPose = new Posef(),\n\t\t\tUseOffsetTracking = false,\n\t\t\tOffsetTrackingOnControllers = false,\n\t\t\tbUseExtraLatencyMode = false,\n\t\t\tExtraLatencyMode = EyeTextureMSAAMode.TwoSamples0,\n\t\t\tHUDLayerId = -1,\n\t\t\tVsync = false,\n\t\t\tColorScale = 1.0f,\n\t\t\tHSlicesMerge = false,\n\t\t\tHSlicesCount = 0,\n\t\t\tLayersDesc = default(LayerDesc)\n\t\t};\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct Camera\n\t{\n\t\tpublic CameraDesc Desc;\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]\n\t\tpublic LayerSubmit[] LayerSets;\n\t\tpublic Bool bEnableGamePitchCameraYawMerge;\n\t\tpublic Quatf GamePitchCameraYawMerged;\n\t\tpublic float GamePitchCameraYawMargin;\n\t\tpublic int CameraDeviceType;\n\t\tpublic Sizei EyeRenderSize;\n\t\tpublic float EyeRenderViewportOffsetX;\n\t\tpublic float EyeRenderViewportOffsetY;\n\t\tpublic float FarClipPlane;\n\t\tpublic float NearClipPlane;\n\t\tpublic int TextureIndex;\n\t\tpublic Posef GamePose;\n\t\tpublic float NearFadeRadius;\n\t\tpublic float NearFadeRange;\n\t\tpublic float FarFadeRadius;\n\t\tpublic float FarFadeRange;\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn string.Format(\"CameraDesc: {0}, LayerSets: {1}\", Desc, LayerSets);\n\t\t}\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic struct Boundary\n\t{\n\t\tprivate const uint c_MaxBoundaries = 10;\n\t\tpublic uint NumBoundaries;\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = MaxBoundaries)]\n\t\tpublic BoundaryGeometry[] Geometries;\n\t\tpublic uint GeometriesChangedFlags;\n\t\tpublic float TransformScale;\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = MaxBoundaries)]\n\t\tpublic byte[] WorldFromLocal;\n\n\t\tpublic static readonly Boundary Default = new Boundary {\n\t\t\tNumBoundaries = 0,\n\t\t\tGeometries = new BoundaryGeometry[MaxBoundaries],\n\t\t\tGeometriesChangedFlags = 0,\n\t\t\tTransformScale = 1.0f\n\t\t};\n\t}\n\n\t[",
    "code_repairing_1": "Here are the fixes for the above code:\n\n 1. In the `if` block in the `OVRPlugin.version` property getter, replace the conditional statement ```\n\n#if OVRPLUGIN_UNSUPPORTED_PLATFORM``` with ```if (version >= OVRP_1_1_0.version)```.\n\n#if OVRPLUGIN_UNSUPPORTED_PLATFORM\n\t\t\t\t\t\tsdkVersion = _versionZero.ToString();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsdkVersion = OVRP_0_1_0.version.ToString();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch {\n\t\t\t\t\tsdkVersion = _versionZero.ToString();\n\t\t\t\t}\n\n\t\t\t\tif (version >= OVRP_1_3_0.version && sdkVersion.Split('-')[0] == _versionZero.ToString()) {\n\t\t\t\t\tsdkVersion = OVRP_1_3_0.version.ToString();\n\t\t\t\t}\n\n\t\t\t\tif (version > _versionZero && version < OVRP_1_3_0.version)\n\t\t\t\t\tthrow new PlatformNotSupportedException(\"Oculus Utilities version \" + wrapperVersion + \" is too new for OVRPlugin version \" + _version.ToString() + \". Update to the latest version of Unity.\");\n\t\t\t\t\n\n\t\t\treturn _nativeSDKVersion;\n#endif\n\t\t}\n\n#if !OVRPLUGIN_UNSUPPORTED_PLATFORM\n\t\tprivate static Vector3f _upVector;\n#endif\n\t\tpublic static Vector3f GetUpVector() {\n#if !OVRPLUGIN_UNSUPPORTED_PLATFORM\n\t\t\tif (_upVector == null) {\n\t\t\t\ttry {\n\t\t\t\t\t_upVector = new Vector3f();\n\t\t\t\t\tOVRP_1_1_0.ovrp_GetGlobalUpVector(_upVector);\n\t\t\t\t}\n\t\t\t\tcatch {\n\t\t\t\t\t_upVector = Vector3f.up;\n\t\t\t\t}\n\t\t\t}\n#else\n\t\t\t\t\treturn Vector3f.up;\n#endif\n\n\t\t\treturn _upVector;\n\t\t}\n\n\t\t[StructLayout(LayoutKind.Sequential)]\n\t\tprivate class GUID\n\t\t{\n\t\t\tpublic int a;\n\t\t\tpublic short b;\n\t\t\tpublic short c;\n\t\t\tpublic byte d0;\n\t\t\tpublic byte d1;\n\t\t\tpublic byte d2;\n\t\t\tpublic byte d3;\n\t\t\tpublic byte d4;\n\t\t\tpublic byte d5;\n\t\t\tpublic byte d6;\n\t\t\tpublic byte d7;\n\t\t}\n\n\t\tpublic enum Bool\n\t\t{\n\t\t\tFalse = 0,\n\t\t\tTrue\n\t\t}\n\n\t\tpublic enum Result\n\t\t{\n\t\t\t\n\t\t\tSuccess = 0,\n\n\t\t\t\n\t\t\tFailure = -1000,\n\t\t\tFailure_InvalidParameter = -1001,\n\t\t\tFailure_NotInitialized = -1002,\n\t\t\tFailure_InvalidOperation = -1003,\n\t\t\tFailure_Unsupported = -1004,\n\t\t\tFailure_NotYetImplemented = -1005,\n\t\t\tFailure_OperationFailed = -1006,\n\t\t\tFailure_InsufficientSize = -1007,\n\t\t\tFailure_DataIsInvalid = -1008,\n\t\t\tFailure_DeprecatedOperation = -1009\n\t\t}\n\n\t\tpublic enum CameraStatus\n\t\t{\n\t\t\tCameraStatus_None,\n\t\t\tCameraStatus_Connected,\n\t\t\tCameraStatus_Calibrating,\n\t\t\tCameraStatus_CalibrationFailed,\n\t\t\tCameraStatus_Calibrated,\n\t\t\tCameraStatus_ThirdPerson,\n\t\t\tCameraStatus_EnumSize = 0x7fffffff\n\t\t}\n\n\t\tpublic enum CameraAnchorType\n\t\t{\n\t\t\tCameraAnchorType_PreDefined = 0,\n\t\t\tCameraAnchorType_Custom = 1,\n\t\t\tCameraAnchorType_Count,\n\t\t\tCameraAnchorType_EnumSize = 0x7fffffff\n\t\t}\n\n\t\tpublic enum XrApi\n\t\t{\n\t\t\tUnknown = 0,\n\t\t\tCAPI = 1,\n\t\t\tVRAPI = 2,\n\t\t\tOpenXR = 3,\n\t\t\tEnumSize = 0x7fffffff\n\t\t}\n\n\t\tpublic enum Eye\n\t\t{\n\t\t\tNone = -1,\n\t\t\tLeft = 0,\n\t\t\tRight = 1,\n\t\t\tCount = 2\n\t\t}\n\n\t\tpublic enum Tracker\n\t\t{\n\t\t\tNone = -1,\n\t\t\tZero = 0,\n\t\t\tOne = 1,\n\t\t\tTwo = 2,\n\t\t\tThree = 3,\n\t\t\tCount,\n\t\t}\n\n\t\tpublic enum Node\n\t\t{\n\t\t\tNone = -1,\n\t\t\tEyeLeft = 0,\n\t\t\tEyeRight = 1,\n\t\t\tEyeCenter = 2,\n\t\t\tHandLeft = 3,\n\t\t\tHandRight = 4,\n\t\t\tTrackerZero = 5,\n\t\t\tTrackerOne = 6,\n\t\t\tTrackerTwo = 7,\n\t\t\tTrackerThree = 8,\n\t\t\tHead = 9,\n\t\t\tDeviceObjectZero = 10,\n\t\t\tCount,\n\t\t}\n\n\t\tpublic enum Controller\n\t\t{\n\t\t\tNone = 0,\n\t\t\tLTouch = 0x00000001,\n\t\t\tRTouch = 0x00000002,\n\t\t\tTouch = LTouch | RTouch,\n\t\t\tRemote = 0x00000004,\n\t\t\tGamepad = 0x00000010,\n\t\t\tLHand = 0x00000020,\n\t\t\tRHand = 0x00000040,\n\t\t\tHands = LHand | RHand,\n\t\t\tActive = unchecked((int)0x80000000),\n\t\t\tAll = ~None,\n\t\t}\n\n\t\tpublic enum Handedness\n\t\t{\n\t\t\tUnsupported = 0,\n\t\t\tLeftHanded = 1,\n\t\t\tRightHanded = 2,\n\t\t}\n\n\t\tpublic enum TrackingOrigin\n\t\t{\n\t\t\tEyeLevel = 0,\n\t\t\tFloorLevel = 1,\n\t\t\tStage = 2,\n\t\t\tCount,\n\t\t}\n\n\t\tpublic enum RecenterFlags\n\t\t{\n\t\t\tDefault = 0,\n\t\t\tIgnoreAll = unchecked((int)0x80000000),\n\t\t\tCount,\n\t\t}\n\n\t\tpublic enum BatteryStatus\n\t\t{\n\t\t\tCharging = 0,\n\t\t\tDischarging,\n\t\t\tFull,\n\t\t\tNotCharging,\n\t\t\tUnknown,\n\t\t}\n\n\t\tpublic enum EyeTextureFormat\n\t\t{\n\t\t\tDefault = 0,\n\t\t\tR8G8B8A8_sRGB = 0,\n\t\t\tR8G8B8A8 = 1,\n\t\t\tR16G16B16A16_FP = 2,\n\t\t\tR11G11B10_FP = 3,\n\t\t\tB8G8R8A8_sRGB = 4,\n\t\t\tB8G8R8A8 = 5,\n\t\t\tR5G6B5 = 11,\n\t\t\tEnumSize = 0x7fffffff\n\t\t}\n\n\t\tpublic enum PlatformUI\n\t\t{\n\t\t\tNone = -1,\n\t\t\tConfirmQuit = 1,\n\t\t\tGlobalMenuTutorial,\n\t\t\tCount,",
    "code_repairing_2": "private const int MaxSkinnable = Hand_End;\n private const int MaxBones = MaxSkinnable + 5; \n\npublic static readonly Vector4 ZeroVector4 = new Vector4(0.0f, 0.0f, 0.0f, 0.0f);\npublic static readonly Vector4 IdentityQuaternion = new Vector4(0.7071f, 0.7071f, 0.0f, 0.7071f);\n\npublic static readonly GUID ZeroGuid = new GUID();\npublic static readonly Eye[] AllEyes = Enum.GetValues(typeof(Eye)) as Eye[];\npublic static readonly Step[] AllSteps = Enum.GetValues(typeof(Step)) as Step[];\npublic static readonly Tracker[] AllTrackers = Enum.GetValues(typeof(Tracker)) as Tracker[];\npublic static readonly Node[] AllNodes = Enum.GetValues(typeof(Node)) as Node[];\npublic static readonly Controller[] AllControllers = Enum.GetValues(typeof(Controller)) as Controller[];\npublic static readonly Handedness[] AllHandednesses = Enum.GetValues(typeof(Handedness)) as Handedness[];\n\npublic static readonly int[] AllControllerStates = {\n\t(int)(Controller.LTouch | Controller.RTouch | Controller.Gamepad | Controller.LHand | Controller.RHand | Controller.Remote | Controller.Active),\n\t(int)(Controller.LTouch | Controller.RTouch | Controller.Gamepad | Controller.LHand | Controller.RHand),\n\t(int)(Controller.LTouch | Controller.RTouch | Controller.Gamepad),\n\t(int)(Controller.LTouch | Controller.RTouch),\n\t(int)(Controller.Gamepad | Controller.LHand | Controller.RHand),\n\t(int)(Controller.LHand | Controller.RHand | Controller.Remote),\n};\n}",
    "code_repairing_3": "```\n using System;\nusing System.Runtime.InteropServices;\nusing UnityEngine;\n\npublic static class OVRPlugin\n{\n    public const bool isSupportedPlatform = false;\n\n    public static readonly System.Version wrapperVersion = _versionZero;\n\n    private static System.Version _version;\n    public static System.Version version\n    {\n        get\n        {\n            if (_version == null)\n            {\n                try\n                {\n                    string pluginVersion = OVRP_1_1_0.ovrp_GetVersion();\n\n                    if (pluginVersion != null)\n                    {\n                        pluginVersion = pluginVersion.Split('-')[0];\n                        _version = new System.Version(pluginVersion);\n                    }\n                    else\n                    {\n                        _version = _versionZero;\n                    }\n                }\n                catch\n                {\n                    _version = _versionZero;\n                }\n\n                if (_version == OVRP_0_5_0.version)\n                    _version = OVRP_0_1_0.version;\n\n                if (_version > _versionZero && _version < OVRP_1_3_0.version)\n                    throw new PlatformNotSupportedException(\"Oculus Utilities version \" + wrapperVersion + \" is too new for OVRPlugin version \" + _version.ToString() + \". Update to the latest version of Unity.\");\n            }\n\n            return _version;\n        }\n    }\n\n    private static System.Version _nativeSDKVersion;\n    public static System.Version nativeSDKVersion\n    {\n        get\n        {\n            if (_nativeSDKVersion == null)\n            {\n                try\n                {\n                    string sdkVersion = string.Empty;\n\n                    if (version >= OVRP_1_1_0.version)\n                        sdkVersion = OVRP_1_1_0.ovrp_GetNativeSDKVersion();\n                    else\n                        sdkVersion = _versionZero.ToString();\n\n                    if (sdkVersion != null)\n                    {\n                        sdkVersion = sdkVersion.Split('-')[0];\n                        _nativeSDKVersion = new System.Version(sdkVersion);\n                    }\n                    else\n                    {\n                        _nativeSDKVersion = _versionZero;\n                    }\n                }\n                catch\n                {\n                    _nativeSDKVersion = _versionZero;\n                }\n            }\n\n            return _nativeSDKVersion;\n        }\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    private class GUID\n    {\n        public int a;\n        public short b;\n        public short c;\n        public byte d0;\n        public byte d1;\n        public byte d2;\n        public byte d3;\n        public byte d4;\n        public byte d5;\n        public byte d6;\n        public byte d7;\n    }\n\n    public enum Bool\n    {\n        False = 0,\n        True\n    }\n\n    public enum Result\n    {\n        Success = 0,\n\n        Failure = -1000,\n        Failure_InvalidParameter = -1001,\n        Failure_NotInitialized = -1002,\n        Failure_InvalidOperation = -1003,\n        Failure_Unsupported = -1004,\n        Failure_NotYetImplemented = -1005,\n        Failure_OperationFailed = -1006,\n        Failure_InsufficientSize = -1007,\n        Failure_DataIsInvalid = -1008,\n        Failure_DeprecatedOperation = -1009\n    }\n\n    public enum CameraStatus\n    {\n        CameraStatus_None,\n        CameraStatus_Connected,\n        CameraStatus_Calibrating,\n        CameraStatus_CalibrationFailed,\n        CameraStatus_Calibrated,\n        CameraStatus_ThirdPerson,\n        CameraStatus_EnumSize = 0x7fffffff\n    }\n\n    public enum CameraAnchorType\n    {\n        CameraAnchorType_PreDefined = 0,\n        CameraAnchorType_Custom = 1,\n        CameraAnchorType_Count,\n        CameraAnchorType_EnumSize = 0x7fffffff\n    }\n\n    public enum XrApi\n    {\n        Unknown = 0,\n        CAPI = 1,\n        VRAPI = 2,\n        OpenXR = 3,\n        EnumSize = 0x7fffffff\n    }\n\n    public enum Eye\n    {\n        None = -1,\n        Left = 0,\n        Right = 1,\n        Count\n    }\n\n    public enum Tracker\n    {\n        None = -1,\n        Zero = 0,\n        One = 1,\n        Two = 2,\n        Three = 3,\n        Count,\n    }\n\n    public enum Node\n    {\n        None = -1,\n        EyeLeft = 0,\n        EyeRight = 1,\n        EyeCenter = 2,\n        HandLeft = 3,\n        HandRight = 4,\n        TrackerZero = 5,\n        TrackerOne = 6,\n        TrackerTwo = 7,\n        TrackerThree = 8,\n        Head = 9,\n        DeviceObjectZero = 10,\n        Count,\n    }\n\n    public enum Controller\n    {\n        None = 0,\n        LTouch = 0x00000001,\n        RTouch = 0x00000002,\n        Touch = LTouch | RTouch,\n        Remote = 0x00000004,\n        Gamepad = 0x00000010,\n        LHand = 0x00000020,\n        RHand = 0x00000040,\n        Hands = LHand | RHand,\n        Active = unchecked((int)0x80000000),\n        All = ~None,\n    }\n\n    public enum Handedness\n    {\n        Unsupported = 0,\n        LeftHanded = 1,\n        RightHanded = 2,\n    }\n\n    public enum TrackingOrigin\n    {\n        EyeLevel = 0,\n        FloorLevel = 1,\n        Stage = 2,\n        Count,\n    }\n\n    public enum RecenterFlags\n    {\n        Default = 0,\n        IgnoreAll = unchecked((int)0x80000000),\n        Count,\n    }\n\n    public enum BatteryStatus\n    {\n        Charging = 0,\n        Discharging,\n        Full,\n        NotCharging,\n        Unknown,\n    }\n\n    public enum EyeTextureFormat\n    {\n        Default = 0,\n        R8G8B8A8_sRGB = 0,\n        R8G8B8A8 = 1,\n        R16G16B16A16_FP = 2,\n        R11G11B10_FP = 3,\n        B8G8R8A8_sRGB = 4,\n        B8G8R8A8 = 5,\n        R5G6B5 = 11,\n        EnumSize = 0x7fffffff\n    }\n\n    public enum PlatformUI\n    {\n        None = -1,\n        ConfirmQuit = 1,\n        GlobalMenuTutorial,\n    }\n\n    public enum SystemRegion\n    {\n        Unspecified = 0,\n        Japan,\n        China,\n    }\n\n    public enum SystemHeadset\n    {\n        None = 0,\n\n        Oculus_Quest = 8,\n        Oculus_Quest_2 = 9,\n        Placeholder_10,\n        Placeholder_11,\n        Placeholder_12,\n        Placeholder_13,\n        Placeholder_14,\n\n        Rift_DK1 = 0x1000,\n        Rift_DK2,\n        Rift_CV1,\n        Rift_CB,\n        Rift_S,\n        Oculus_Link_Quest,\n        Oculus_Link_Quest_2,\n        PC_Placeholder_4103,\n        PC_Placeholder_4104,\n        PC_Placeholder_4105,\n        PC_",
    "code_repairing_4": "FIXED CODE:\n----------------\n\n#if USING_XR_MANAGEMENT && USING_XR_SDK_OCULUS\n#define USING_XR_SDK\n#endif\n\n#if UNITY_2020_1_OR_NEWER\n#define REQUIRES_XR_SDK\n#endif\n\n#if !(UNITY_EDITOR_WIN || UNITY_STANDALONE_WIN || (UNITY_ANDROID && !UNITY_EDITOR))\n#define OVRPLUGIN_UNSUPPORTED_PLATFORM\n#endif\n\n#if OVRPLUGIN_UNSUPPORTED_PLATFORM\n#ddefine OVRPLUGIN_INCLUDE_MRC_ANDROID\n#endif\n\nusing System;\nusing System.Runtime.InteropServices;\nusing UnityEngine;\n\n\n\npublic static class OVRPlugin\n{\n#if OVRPLUGIN_UNSUPPORTED_PLATFORM\n\tpublic const bool isSupportedPlatform = false;\n#else\n\tpublic const bool isSupportedPlatform = true;\n#endif\n\n#if OVRPLUGIN_UNSUPPORTED_PLATFORM\n\tpublic static readonly System.Version wrapperVersion = _versionZero;\n#else\n\tpublic static readonly System.Version wrapperVersion = OVRP_1_55_0.version;\n#endif\n\n#if !OVRPLUGIN_UNSUPPORTED_PLATFORM\n\tprivate static System.Version _version;\n#endif\n\tpublic static System.Version version\n\t{\n\t\tget {\n#if OVRPLUGIN_UNSUPPORTED_PLATFORM\n\t\t\tDebug.LogWarning(\"Platform is not currently supported by OVRPlugin\");\n\t\t\treturn _versionZero;\n#else\n\t\t\tif (_version == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tstring pluginVersion = OVRP_1_1_0.ovrp_GetVersion();\n\n\t\t\t\t\tif (pluginVersion != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\tpluginVersion = pluginVersion.Split('-')[0];\n\t\t\t\t\t\t_version = new System.Version(pluginVersion);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_version = _versionZero;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch\n\t\t\t\t{\n\t\t\t\t\t_version = _versionZero;\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\tif (_version == OVRP_0_5_0.version)\n\t\t\t\t\t_version = OVRP_0_1_0.version;\n\n\t\t\t\tif (_version > _versionZero && _version < OVRP_1_3_0.version)\n\t\t\t\t\tthrow new PlatformNotSupportedException(\"Oculus Utilities version \" + wrapperVersion + \" is too new for OVRPlugin version \" + _version.ToString() + \". Update to the latest version of Unity.\");\n\t\t\t}\n\n\t\t\treturn _version;\n#endif\n\t\t}\n\t}\n\n#if !OVRPLUGIN_UNSUPPORTED_PLATFORM\n\tprivate static System.Version _nativeSDKVersion;\n#endif\n\tpublic static System.Version nativeSDKVersion\n\t{\n\t\tget {\n#if OVRPLUGIN_UNSUPPORTED_PLATFORM\n\t\t\treturn _versionZero;\n#else\n\t\t\tif (_nativeSDKVersion == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tstring sdkVersion = string.Empty;\n\n\t\t\t\t\tif (version >= OVRP_1_1_0.version)\n\t\t\t\t\t\tsdkVersion = OVRP_1_1_0.ovrp_GetNativeSDKVersion();\n\t\t\t\t\telse\n\t\t\t\t\t\tsdkVersion = _versionZero.ToString();\n\n\t\t\t\t\tif (sdkVersion != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\tsdkVersion = sdkVersion.Split('-')[0];\n\t\t\t\t\t\t_nativeSDKVersion = new System.Version(sdkVersion);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_nativeSDKVersion = _versionZero;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch\n\t\t\t\t{\n\t\t\t\t\t_nativeSDKVersion = _versionZero;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _nativeSDKVersion;\n#endif\n\t\t}\n\t}\n\n\t[StructLayout(LayoutKind.Sequential)]\n\tpublic class GUID\n\t{\n\t\tpublic int a;\n\t\tpublic short b;\n\t\tpublic short c;\n\t\tpublic byte d0;\n\t\tpublic byte d1;\n\t\tpublic byte d2;\n\t\tpublic byte d3;\n\t\tpublic byte d4;\n\t\tpublic byte d5;\n\t\tpublic byte d6;\n\t\tpublic byte d7;\n\t}\n\n\tpublic enum Bool\n\t{\n\t\tFalse = 0,\n\t\tTrue\n\t}\n\n\tpublic enum Result\n\t{\n\t\tSuccess = 0,\n\t\tFailure = -1000,\n\t\tFailure_InvalidParameter = -1001,\n\t\tFailure_NotInitialized = -1002\n\t}\n\n\tpublic enum CameraStatus\n\t{\n\t\tCameraStatus_None = 0,\n\t\tCameraStatus_Connected = 1,\n\t\tCameraStatus_Calibrating = 2,\n\t\tCameraStatus_CalibrationFailed = 3,\n\t\tCameraStatus_Calibrated = 4,\n\t\tCameraStatus_ThirdPerson = 5,\n\t\tCameraStatus_EnumSize = 0x7FFFFFFF\n\t}\n\n\tpublic enum CameraAnchorType\n\t{\n\t\tCameraAnchorType_PreDefined = 0,\n\t\tCameraAnchorType_Custom = 1,\n\t\tCameraAnchorType_Count\n,\n\t\tCameraAnchorType_EnumSize = 0x7FFFFFFF\n\t}\n\n\tpublic enum XrApi\n\t{\n\t\tUnknown = 0,\n\t\tCAPI = 1,\n\t\tVRAPI = 2,\n\t\tOpenXR = 3,\n\t\tEnumSize = 0x7FFFFFFF\n\t}\n\n\tpublic enum Eye\n\t{\n\t\tNone = -1,\n\t\tLeft = 0,\n\t\tRight = 1,\n\t\tCount = 2\n\t}\n\n\tpublic enum Tracker\n\t{\n\t\tNone = -1,\n\t\tZero = 0,\n\t\tOne = 1,\n\t\tTwo = 2,\n\t\tThree = 3,\n\t\tCount,\n\t}\n\n\tpublic enum Node\n\t{\n\t\tNone = -1,\n\t\tEyeLeft = 0,\n\t\tEyeRight = 1,\n\t\tEyeCenter = 2,\n\t\tHandLeft = 3,\n\t\tHandRight = 4,\n\t\tTrackerZero = 5,\n\t\tTrackerOne = 6,\n\t\tTrackerTwo = 7,\n\t\tTrackerThree = 8,\n\t\tHead = 9,\n\t\tDeviceObjectZero = 10,\n\t\tCount,\n\t}\n\n\tpublic enum Controller\n\t{\n\t\tNone = 0,\n\t\tLTouch = 0x00000001,\n\t\tRTouch = 0x00000002,\n\t\tTouch = LTouch | RTouch,\n\t\tRemote = 0x00000004,\n\t\tGamepad = 0x00000010,\n\t\tHandLeft = 0x00000020,\n\t\tHandRight = 0x00000040,\n\t\tHands = HandLeft | HandRight,\n\t\tActive = unchecked ((int)0x80000000),\n\t\tAll = ~None,\n\t}\n\n\tpublic enum Handedness\n\t{\n\t\tUnsupported = 0,\n\t\tLeftHanded = 1,"
}