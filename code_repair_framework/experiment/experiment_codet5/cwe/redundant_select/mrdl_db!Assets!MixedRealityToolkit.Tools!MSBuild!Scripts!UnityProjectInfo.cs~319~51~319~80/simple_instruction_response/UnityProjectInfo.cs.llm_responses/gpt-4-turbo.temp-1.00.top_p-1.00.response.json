{
    "id": "chatcmpl-9yzSyQw1mHZyUvMfGl6MO8FsXElLe",
    "object": "chat.completion",
    "created": 1724322984,
    "model": "gpt-4",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```csharp\nforeach (CSProjectInfo project in orderedProjects)\n{\n    string guidString = project.Guid.ToString().ToUpper();\n\n    foreach (string configPlatformLine in twoConfigs)\n    {\n        foreach (CompilationPlatformInfo platform in AvailablePlatforms)\n        {\n            string configurationPlatformMapping = configPlatformMappingTemplateBody.Replace(\"<PROJECT_GUID>\", guidString)\n                .Replace(\"<Configuration>\", configPlatformLine.Contains(\"InEditor\") ? \"Debug\" : \"Release\")\n                .Replace(\"<Platform>\", platform.Name.ToString())\n                .Replace(\"<Configuration_Platform>\", $\"{platform.Name.ToString()}|{(platform.InEditorConfiguration ? \"Any CPU\" : platform.BuildTarget.ToString())}\");\n\n            if (project.InEditorPlatform.Contains(platform.BuildTarget) || project.PlayerPlatform.Contains(platform.BuildTarget))\n            {\n                configurationMappings.Add(configurationPlatformMapping);\n            }\n            else\n            {\n                disabled.Add(configurationPlatformMapping);\n            }\n        }\n    }\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "```csharp\nforeach (CSProjectInfo project in orderedProjects)\n{\n    if (configurationPlatformMappingTemplateBody != null && configurationPlatformEnabledTemplateBody != null)\n    {\n        StringBuilder mappingBuilder = new StringBuilder();\n        StringBuilder enabledBuilder = new StringBuilder();\n\n        foreach (CompilationPlatformInfo platform in AvailablePlatforms)\n        {\n            string replacedMapping = configurationPlatformMappingTemplateBody\n                .Replace(\"<SOLUTION_CONFIGURATION>\", \"InEditor\")\n                .Replace(\"<SOLUTION_PLATFORM>\", platform.Name.ToString())\n                .Replace(\"<PROJECT_CONFIGURATION>\", \"Debug\")\n                .Replace(\"<PROJECT_PLATFORM>\", platform.Name.ToString())\n                .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper());\n\n            string replacedEnabled = configurationPlatformEnabledTemplateBody\n                .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper());\n\n            mappingBuilder.AppendLine(replacedMapping);\n\n            foreach (KeyValuePair<string, CompilationPlatformInfo> pair in project.InEditorPlatforms)\n            {\n                replacedMapping = configurationPlatformMappingTemplateBody\n                    .Replace(\"<SOLUTION_CONFIGURATION>\", \"InEditor\")\n                    .Replace(\"<SOLUTION_PLATFORM>\", pair.Key)\n                    .Replace(\"<PROJECT_CONFIGURATION>\", \"Debug\")\n                    .Replace(\"<PROJECT_PLATFORM>\", pair.Value.Name.ToString())\n                    .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper());\n    \n                replacedEnabled = configurationPlatformEnabledTemplateBody\n                    .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper());\n    \n                mappingBuilder.AppendLine(replacedMapping);\n            }\n\n            foreach (KeyValuePair<string, CompilationPlatformInfo> pair in project.PlayerPlatforms)\n            {\n                replacedMapping = configurationPlatformMappingTemplateBody\n                    .Replace(\"<SOLUTION_CONFIGURATION>\", \"Player\")\n                    .Replace(\"<SOLUTION_PLATFORM>\", pair.Key)\n                    .Replace(\"<PROJECT_CONFIGURATION>\", \"Release\")\n                    .Replace(\"<PROJECT_PLATFORM>\", pair.Value.Name.ToString())\n                    .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper());\n    \n                replacedEnabled = configurationPlatformEnabledTemplateBody\n                    .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper());\n    \n                mappingBuilder.AppendLine(replacedMapping);\n            }\n\n            enabledBuilder.AppendLine(replacedEnabled);\n        }\n\n        configurationMappings.Add(mappingBuilder.ToString());\n        disabled.Add(enabledBuilder.ToString());\n    }\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "```csharp\nforeach (CSProjectInfo project in orderedProjects)\n{\n    foreach (var platform in AvailablePlatforms)\n    {\n        string configurationMapping = configurationPlatformMappingTemplateBody\n            .Replace(\"<SOLUTION_CONFIGURATION>\", platform.Name.ToString())\n            .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper())\n            .Replace(\"<PROJECT_CONFIGURATION>\", platform.Name.ToString())\n            .Replace(\"<PROJECT_PLATFORM>\", platform.Name.ToString());\n\n        configurationMappings.Add(configurationMapping);\n\n        if (!project.InEditorPlatforms.Contains(platform) && !project.PlayerPlatforms.Contains(platform))\n        {\n            string disabledEntry = configurationPlatformEnabledTemplateBody\n                .Replace(\"<SOLUTION_CONFIGURATION>\", platform.Name.ToString())\n                .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper())\n                .Replace(\"<PROJECT_CONFIGURATION>\", \"Mixed Platforms\");\n\n            disabled.Add(disabledEntry);\n        }\n    }\n}\n\nstring combinedProjectEntries = string.Join(Environment.NewLine, projectEntries);\nstring combinedConfigPlatforms = string.Join(Environment.NewLine, configPlatforms);\nstring combinedConfigurationMappings = string.Join(Environment.NewLine, configurationMappings);\nstring combinedDisabled = string.Join(Environment.NewLine, disabled);\n\nStringBuilder solutionBuilder = new StringBuilder(solutionTemplateText);\nsolutionBuilder.Replace(projectEntryTemplate, combinedProjectEntries);\nsolutionBuilder.Replace(configurationPlatformEntry, combinedConfigPlatforms);\nsolutionBuilder.Replace(configurationPlatformMappingTemplate, combinedConfigurationMappings);\nsolutionBuilder.Replace(configurationPlatformEnabledTemplate, combinedDisabled);\n\nFile.WriteAllText(solutionFilePath, solutionBuilder.ToString());\n```\n"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "```csharp\nforeach (CSProjectInfo project in orderedProjects)\n{\n    foreach (CompilationPlatformInfo platform in AvailablePlatforms)\n    {\n        if (platform.Available || platform.Enabled)\n        {\n            string modifier = (platform.Available && platform.Enabled) ? \"ActiveCfg\" : \"Build.0\";\n            string configMapping = configurationPlatformMappingTemplateBody\n                .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper())\n                .Replace(\"<PLATFORM_NAME>\", platform.Name.ToString())\n                .Replace(\"<CONFIGURATION>\", \"InEditor\")\n                .Replace(\"<MODIFIER>\", modifier);\n\n            configurationMappings.Add(configMapping);\n\n            configMapping = configurationPlatformMappingTemplateBody\n                .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper())\n                .Replace(\"<PLATFORM_NAME>\", platform.Name.ToString())\n                .Replace(\"<CONFIGURATION>\", \"Player\")\n                .Replace(\"<MODIFIER>\", modifier);\n\n            configurationMappings.Add(configMapping);\n        }\n        else\n        {\n            string configEnabled = configurationPlatformEnabledTemplateBody\n                .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper())\n                .Replace(\"<PLATFORM_NAME>\", platform.Name.ToString())\n                .Replace(\"<CONFIGURATION>\", \"InEditor\");\n\n            disabled.Add(configEnabled);\n\n            configEnabled = configurationPlatformEnabledTemplateBody\n                .Replace(\"<PROJECT_GUID>\", project.Guid.ToString().ToUpper())\n                .Replace(\"<PLATFORM_NAME>\", platform.Name.ToString())\n                .Replace(\"<CONFIGURATION>\", \"Player\");\n\n            disabled.Add(configEnabled);\n        }\n    }\n}\n\nstring solutionFileContents = Utilities.ReplaceTokens(solutionTemplateText, new Dictionary<string, string>()\n{\n    { solutionTemplateText, projectEntryTemplate },\n    { \"<PROJECT_CONFIGURATION_PLATFORMS>\", string.Join(Environment.NewLine, configPlatforms) },\n    { \"<PROJECT_CONFIGURATION_MAPPINGS>\", string.Join(Environment.NewLine, configurationMappings) },\n    { \"<PROJECT_CONFIGURATION_DISABLED>\", string.Join(Environment.NewLine, disabled) }\n});\n\n// Write the solution file\nFile.WriteAllText(solutionFilePath, solutionFileContents);\n\n// Export project files\nforeach (var projectInfo in orderedProjects)\n{\n    string projectFilePath = Path.Combine(generatedProjectPath, $\"{projectInfo.Name}.csproj\");\n    string projectFileContents = Utilities.ReplaceTokens(projectFileTemplateText, new Dictionary<string, string>()\n    {\n        { \"<UNITY_PROJECT_NAME>\", UnityProjectName },\n        { \"<DEFINES>\", \"\" }, // this would ordinarily contain preprocessor definitions for the project\n        { \"<CS_INCLUDES>\", string.Join(Environment.NewLine, projectInfo.CompilationAssemblies.Select(each => $\"<Compile Include=\\\"{each}\\\" />\")) },\n        { \"<ASSEMBLY_NAME>\", projectInfo.AssemblyDefinitionInfo.Name },\n        { \"<ASSEMBLY_GUID>\", projectInfo.AssemblyDefinitionInfo.Guid.ToString() },\n        { \"<ASSEMBLY_OUTPUT_PATH>\", projectOutputPath },\n        { \"<ASSEMBLY_REF_INCLUDE>\", string.Join(Environment.NewLine, projectInfo.AssemblyReferences.Select(each => $\"<Reference Include=\\\"{each.Name}\\\"><HintPath>{each.Path}</HintPath></Reference>\")) },\n        { \"<PROJECT_GUID>\", projectInfo.Guid.ToString().ToUpper() },\n        { \"<PLATFORM_TARGET>\", \"\" }, // this would ordinarily contain the target platform, e.g. \"x64\"\n        { \"<PLATFORM_DEFINE>\", \"\" }, // this would ordinarily contain platform-specific preprocessor definitions\n        // Other tokens would be replaced here, such as for additional references, packages, files, etc.\n    });\n\n    // Write the project file\n    File.WriteAllText(projectFilePath, projectFileContents);\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "```csharp\n                foreach (CSProjectInfo project in orderedProjects)\n                {\n                    string currentConfigTemplate = configurationPlatformMappingTemplateBody;\n\n                    foreach (CompilationPlatformInfo platformInfo in AvailablePlatforms)\n                    {\n                        string currentConfig = currentConfigTemplate\n                            .Replace(\"<ProjectGuid>\", project.Guid.ToString().ToUpper())\n                            .Replace(\"<Configuration>\", \"InEditor\")\n                            .Replace(\"<Platform>\", platformInfo.Name)\n                            .Replace(\"<ProjectPlatform>\", platformInfo.Name)\n                            .Replace(\"<PlatformShortName>\", platformInfo.InEditorConfigurationName);\n\n                        configurationMappings.Add(currentConfig);\n\n                        if (!project.InEditorPlatforms.Contains(platformInfo.Name))\n                        {\n                            string disabledConfig = configurationPlatformEnabledTemplateBody\n                                .Replace(\"<ProjectGuid>\", project.Guid.ToString().ToUpper())\n                                .Replace(\"<Configuration>\", \"InEditor\")\n                                .Replace(\"<Platform>\", platformInfo.Name);\n\n                            disabled.Add(disabledConfig);\n                        }\n\n                        currentConfig = currentConfig\n                            .Replace(\"<Configuration>\", \"Player\");\n\n                        currentConfig = currentConfig\n                            .Replace(\"<PlatformShortName>\", platformInfo.PlayerConfigurationName);\n\n                        configurationMappings.Add(currentConfig);\n\n                        if (!project.PlayerPlatforms.Contains(platformInfo.Name))\n                        {\n                            string disabledConfig = configurationPlatformEnabledTemplateBody\n                                .Replace(\"<ProjectGuid>\", project.Guid.ToString().ToUpper())\n                                .Replace(\"<Configuration>\", \"Player\")\n                                .Replace(\"<Platform>\", platformInfo.Name);\n\n                            disabled.Add(disabledConfig);\n                        }\n                    }\n                }\n\n                StringBuilder builder = new StringBuilder();\n                builder.AppendLine(solutionTemplateText);\n                builder.AppendLine(string.Join(Environment.NewLine, projectEntries));\n                builder.AppendLine(string.Join(Environment.NewLine, configPlatforms));\n                builder.AppendLine(configurationPlatformMappingTemplate.Replace(\"<MappingEntries>\", string.Join(Environment.NewLine, configurationMappings)));\n                builder.AppendLine(configurationPlatformEnabledTemplate.Replace(\"<EnabledEntries>\", string.Join(Environment.NewLine, disabled)));\n\n                File.WriteAllText(solutionFilePath, builder.ToString());\n            }\n        }\n    }\n}\n#endif\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2319,
        "completion_tokens": 2004,
        "total_tokens": 4323
    },
    "system_fingerprint": "fp_e49e4201a9"
}