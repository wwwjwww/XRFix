"{\"id\":\"chatcmpl-B3J6bHutf09Ttoicco8EpQfleqGcI\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRenderers = 100;\\n\\n    private ParticleSystem particleSystem;\\n    private ParticleSystem.Particle[] particles;\\n    private ParticleSystem.MainModule particleSystemMainModule;\\n    public LineRenderer lineRendererTemplate;\\n    private List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n    private Transform _transform;\\n\\n    void Start() {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n    }\\n\\n    void LateUpdate() {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles) {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        if (lineRendererCount > maxLineRenderers) {\\n            for (int i = maxLineRenderers; i < lineRendererCount; i++) {\\n                Destroy(lineRenderers[i].gameObject);\\n            }\\n\\n            int removedCount = lineRendererCount - maxLineRenderers;\\n            lineRenderers.RemoveRange(maxLineRenderers, removedCount);\\n            lineRendererCount -= removedCount;\\n        }\\n\\n        if (maxConnections > 0 && maxLineRenderers > 0) {\\n            particleSystem.GetParticles(particles);\\n            int particleCount = particleSystem.particleCount;\\n\\n            float maxDistanceSqr = maxDistance * maxDistance;\\n            Vector3 p1_position, p2_position;\\n\\n            ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n            switch (simulationSpace) {\\n                case ParticleSystemSimulationSpace.Local:\\n                    _transform = transform;\\n                    break;\\n                case ParticleSystemSimulationSpace.Custom:\\n                    _transform = particleSystemMainModule.customSimulationSpace;\\n                    break;\\n                case ParticleSystemSimulationSpace.World:\\n                    _transform = transform;\\n                    break;\\n                default:\\n                    throw new System.NotSupportedException(\\n                        string.Format(\\\"Unsupported Simulation Space '{0}'.\\\",\\n                        System.Enum.GetName(typeof(ParticleSystemSimulationSpace), \\n                        particleSystemMainModule.simulationSpace))\\n                    );\\n            }\\n\\n            for (int i = 0; i < particleCount; i++) {\\n                if (lrIndex >= maxLineRenderers)\\n                    break;\\n\\n                p1_position = particles[i].position;\\n                int connections = 0;\\n\\n                for (int j = i + 1; j < particleCount; j++) {\\n                    p2_position = particles[j].position;\\n                    float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                    if (distanceSqr <= maxDistanceSqr) {\\n                        LineRenderer lr;\\n\\n                        if (lrIndex == lineRendererCount) {\\n                            lr = Instantiate(lineRendererTemplate, _transform, false);\\n                            lineRenderers.Add(lr);\\n                            lineRendererCount++;\\n                        }\\n\\n                        lr = lineRenderers[lrIndex];\\n                        lr.enabled = true;\\n                        lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World;\\n                        lr.SetPosition(0, p1_position);\\n                        lr.SetPosition(1, p2_position);\\n\\n                        lr.startColor = particles[i].GetCurrentColor(particleSystem);\\n                        lr.endColor = particles[j].GetCurrentColor(particleSystem);\\n\\n                        lrIndex++;\\n                        connections++;\\n\\n                        if (connections >= maxConnections || lrIndex >= maxLineRenderers)\\n                            break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++) {\\n            lineRenderers[i].enabled = false;\\n        }\\n    }\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    private ParticleSystem particleSystem;\\n    private ParticleSystem.Particle[] particles;\\n\\n    private ParticleSystem.MainModule particleSystemMainModule;\\n\\n    public LineRenderer lineRendererTemplate;\\n\\n    private List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n\\n    private Transform _transform;\\n\\n\\tvoid Start () {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n\\t}\\n\\n    void LateUpdate () {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n \\n        if (particles == null || particles.Length < maxParticles) {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        if (lineRendererCount > maxLineRendereres) {\\n            for (int i = maxLineRendereres; i < lineRendererCount; i++) {\\n                Destroy(lineRenderers[i].gameObject);\\n            }\\n\\n            int removedCount = lineRendererCount - maxLineRendereres;\\n            lineRenderers.RemoveRange(maxLineRendereres, removedCount);\\n            lineRendererCount -= removedCount;\\n        }\\n\\n        if (maxConnections > 0 && maxLineRendereres > 0) {\\n            particleSystem.GetParticles(particles);\\n            int particleCount = particleSystem.particleCount;\\n\\n            float maxDistanceSqr = maxDistance * maxDistance;\\n\\n            Vector3 p1_position, p2_position;\\n\\n            ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n            switch (simulationSpace) {\\n                case ParticleSystemSimulationSpace.Local:\\n                    _transform = transform;\\n                    break;\\n                case ParticleSystemSimulationSpace.Custom:\\n                    _transform = particleSystemMainModule.customSimulationSpace;\\n                    break;\\n                case ParticleSystemSimulationSpace.World:\\n                    _transform = transform;\\n                    break;\\n                default:\\n                    throw new System.NotSupportedException(\\n                        string.Format(\\\"Unsupported Simulation Space '{0}'.\\\",\\n                            System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)));\\n            }\\n\\n            for (int i = 0; i < particleCount; i++) {\\n                if (lrIndex >= maxLineRendereres)\\n                    break;\\n                p1_position = particles[i].position;\\n\\n                int connections = 0;\\n                for (int j = i + 1; j < particleCount; j++) {\\n                    p2_position = particles[j].position;\\n                    float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                    if (distanceSqr <= maxDistanceSqr) {\\n                        LineRenderer lr;\\n\\n                        if (lrIndex == lineRendererCount) {\\n                            lr = Instantiate(lineRendererTemplate, _transform, false);\\n                            lineRenderers.Add(lr);\\n\\n                            lineRendererCount++;\\n                        } else {\\n                            lr = lineRenderers[lrIndex];\\n                        }\\n\\n                        lr.enabled = true;\\n                        lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World ? true : false;\\n                        \\n                        lr.SetPosition(0, p1_position);\\n                        lr.SetPosition(1, p2_position);\\n\\n                        lr.startColor = particles[i].GetCurrentColor(particleSystem);\\n                        lr.endColor = particles[j].GetCurrentColor(particleSystem);\\n\\n                        lrIndex++;\\n                        connections++;\\n\\n                        if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                            break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++) {\\n            lineRenderers[i].enabled = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    new ParticleSystem particleSystem;\\n    ParticleSystem.Particle[] particles;\\n\\n    ParticleSystem.MainModule particleSystemMainModule;\\n\\n    public LineRenderer lineRendererTemplate;\\n\\n    List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n\\n    Transform _transform;\\n\\n    void Start () {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n    }\\n\\n    void LateUpdate() {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles) {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        if (lineRendererCount > maxLineRendereres) {\\n            for (int i = maxLineRendereres; i < lineRendererCount; i++) {\\n                Destroy(lineRenderers[i].gameObject);\\n            }\\n\\n            int removedCount = lineRendererCount - maxLineRendereres;\\n            lineRenderers.RemoveRange(maxLineRendereres, removedCount);\\n            lineRendererCount -= removedCount;\\n        }\\n\\n        if (maxConnections > 0 && maxLineRendereres > 0) {\\n            particleSystem.GetParticles(particles);\\n            int particleCount = particleSystem.particleCount;\\n\\n            float maxDistanceSqr = maxDistance * maxDistance;\\n\\n            Vector3 p1_position, p2_position;\\n\\n            ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n            switch (simulationSpace) {\\n                case ParticleSystemSimulationSpace.Local:\\n                case ParticleSystemSimulationSpace.World:\\n                    _transform = transform;\\n                    break;\\n                \\n                case ParticleSystemSimulationSpace.Custom:\\n                    _transform = particleSystemMainModule.customSimulationSpace;\\n                    break;\\n\\n                default:\\n                    throw new System.NotSupportedException(\\n                        string.Format(\\\"Unsupported Simulation Space '{0}'.\\\", System.Enum.GetName(typeof(ParticleSystemSimulationSpace), simulationSpace)));\\n            }\\n\\n            for (int i = 0; i < particleCount; i++) {\\n                if (lrIndex >= maxLineRendereres)\\n                    break;\\n                \\n                p1_position = particles[i].position;\\n                int connections = 0;\\n                \\n                for (int j = i + 1; j < particleCount; j++) {\\n                    p2_position = particles[j].position;\\n                    float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                    if (distanceSqr <= maxDistanceSqr) {\\n                        LineRenderer lr;\\n\\n                        if (lrIndex == lineRendererCount) {\\n                            lr = Instantiate(lineRendererTemplate, _transform, false);\\n                            lineRenderers.Add(lr);\\n                            lineRendererCount++;\\n                        }\\n\\n                        lr = lineRenderers[lrIndex];\\n                        lr.enabled = true;\\n                        lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World;\\n                        \\n                        lr.SetPosition(0, p1_position);\\n                        lr.SetPosition(1, p2_position);\\n\\n                        lr.startColor = particles[i].GetCurrentColor(particleSystem);\\n                        lr.endColor = particles[j].GetCurrentColor(particleSystem);\\n\\n                        lrIndex++;\\n                        connections++;\\n\\n                        if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                            break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++) {\\n            lineRenderers[i].enabled = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    new ParticleSystem particleSystem;\\n    ParticleSystem.Particle[] particles;\\n\\n    ParticleSystem.MainModule particleSystemMainModule;\\n\\n    public LineRenderer lineRendererTemplate;\\n\\n    List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n\\n    Transform _transform;\\n\\n    void Start() {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n    }\\n\\n    void LateUpdate() {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles) {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        if (lineRendererCount > maxLineRendereres) {\\n            for (int i = maxLineRendereres; i < lineRendererCount; i++) {\\n                Destroy(lineRenderers[i].gameObject);\\n            }\\n\\n            int removedCount = lineRendererCount - maxLineRendereres;\\n            lineRenderers.RemoveRange(maxLineRendereres, removedCount);\\n            lineRendererCount -= removedCount;\\n        }\\n\\n        if (maxConnections > 0 && maxLineRendereres > 0) {\\n            particleSystem.GetParticles(particles);\\n            int particleCount = particleSystem.particleCount;\\n\\n            float maxDistanceSqr = maxDistance * maxDistance;\\n\\n            Vector3 p1_position, p2_position;\\n\\n            ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n            switch (simulationSpace) {\\n                case ParticleSystemSimulationSpace.Local:\\n                    _transform = transform;\\n                    break;\\n                case ParticleSystemSimulationSpace.Custom:\\n                    _transform = particleSystemMainModule.customSimulationSpace;\\n                    break;\\n                case ParticleSystemSimulationSpace.World:\\n                    _transform = transform;\\n                    break;\\n                default:\\n                    throw new System.NotSupportedException(\\n                        string.Format(\\\"Unsupported Simulation Space '{0}'.\\\", System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)));\\n            }\\n\\n            for (int i = 0; i < particleCount; i++) {\\n                if (lrIndex >= maxLineRendereres)\\n                    break;\\n                p1_position = particles[i].position;\\n\\n                int connections = 0;\\n                for (int j = i + 1; j < particleCount; j++) {\\n                    p2_position = particles[j].position;\\n                    float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                    if (distanceSqr <= maxDistanceSqr) {\\n                        LineRenderer lr;\\n\\n                        if (lrIndex == lineRendererCount) {\\n                            lr = Instantiate(lineRendererTemplate, _transform, false);\\n                            lineRenderers.Add(lr);\\n                            lineRendererCount++;\\n                        }\\n\\n                        lr = lineRenderers[lrIndex];\\n\\n                        lr.enabled = true;\\n                        lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World;\\n                        \\n                        lr.SetPosition(0, p1_position);\\n                        lr.SetPosition(1, p2_position);\\n\\n                        lr.startColor = particles[i].GetCurrentColor(particleSystem);\\n                        lr.endColor = particles[j].GetCurrentColor(particleSystem);\\n\\n                        lrIndex++;\\n                        connections++;\\n\\n                        if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                            break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++) {\\n            lineRenderers[i].enabled = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\n[RequireComponent(typeof(ParticleSystem))]\\npublic class FX_plexus : MonoBehaviour {\\n\\n    public float maxDistance = 1.0f;\\n    public int maxConnections = 5;\\n    public int maxLineRendereres = 100;\\n\\n    private ParticleSystem particleSystem;\\n    private ParticleSystem.Particle[] particles;\\n    private ParticleSystem.MainModule particleSystemMainModule;\\n\\n    public LineRenderer lineRendererTemplate;\\n\\n    private List<LineRenderer> lineRenderers = new List<LineRenderer>();\\n\\n    private Transform _transform;\\n\\n    void Start () {\\n        particleSystem = GetComponent<ParticleSystem>();\\n        particleSystemMainModule = particleSystem.main;\\n    }\\n\\n    void LateUpdate () {\\n        int maxParticles = particleSystemMainModule.maxParticles;\\n\\n        if (particles == null || particles.Length < maxParticles) {\\n            particles = new ParticleSystem.Particle[maxParticles];\\n        }\\n\\n        int lrIndex = 0;\\n        int lineRendererCount = lineRenderers.Count;\\n\\n        if (lineRendererCount > maxLineRendereres) {\\n            for (int i = maxLineRendereres; i < lineRendererCount; i++) {\\n                Destroy(lineRenderers[i].gameObject);\\n            }\\n\\n            int removedCount = lineRendererCount - maxLineRendereres;\\n            lineRenderers.RemoveRange(maxLineRendereres, removedCount);\\n            lineRendererCount -= removedCount;\\n        }\\n\\n        if (maxConnections > 0 && maxLineRendereres > 0) {\\n\\n            particleSystem.GetParticles(particles);\\n            int particleCount = particleSystem.particleCount;\\n\\n            float maxDistanceSqr = maxDistance * maxDistance;\\n\\n            Vector3 p1_position, p2_position;\\n\\n            ParticleSystemSimulationSpace simulationSpace = particleSystemMainModule.simulationSpace;\\n\\n            switch (simulationSpace) {\\n                case ParticleSystemSimulationSpace.Local:\\n                    _transform = transform;\\n                    break;\\n                case ParticleSystemSimulationSpace.Custom:\\n                    _transform = particleSystemMainModule.customSimulationSpace;\\n                    break;\\n                case ParticleSystemSimulationSpace.World:\\n                    _transform = null;\\n                    break;\\n                default:\\n                    throw new System.NotSupportedException(\\n                        string.Format(\\\"Unsupported Simulation Space '{0}'.\\\", System.Enum.GetName(typeof(ParticleSystemSimulationSpace), particleSystemMainModule.simulationSpace)));\\n            }\\n\\n            for (int i = 0; i < particleCount; i++) {\\n                if (lrIndex >= maxLineRendereres)\\n                    break;\\n\\n                p1_position = particles[i].position;\\n                int connections = 0;\\n\\n                for (int j = i + 1; j < particleCount; j++) {\\n                    if (lrIndex >= maxLineRendereres)\\n                        break;\\n\\n                    p2_position = particles[j].position;\\n                    float distanceSqr = Vector3.SqrMagnitude(p1_position - p2_position);\\n\\n                    if (distanceSqr <= maxDistanceSqr) {\\n                        LineRenderer lr;\\n\\n                        if (lrIndex == lineRendererCount) {\\n                            lr = Instantiate(lineRendererTemplate, _transform);\\n                            lineRenderers.Add(lr);\\n                            lineRendererCount++;\\n                        }\\n\\n                        lr = lineRenderers[lrIndex];\\n\\n                        lr.enabled = true;\\n                        lr.useWorldSpace = simulationSpace == ParticleSystemSimulationSpace.World;\\n                        \\n                        lr.SetPosition(0, p1_position);\\n                        lr.SetPosition(1, p2_position);\\n\\n                        lr.startColor = particles[i].startColor;\\n                        lr.endColor = particles[j].startColor;\\n\\n                        lrIndex++;\\n                        connections++;\\n\\n                        if (connections >= maxConnections || lrIndex >= maxLineRendereres)\\n                            break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        for (int i = lrIndex; i < lineRendererCount; i++) {\\n            lineRenderers[i].enabled = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740128125,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":3944,\"prompt_tokens\":999,\"total_tokens\":4943,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"