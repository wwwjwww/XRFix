"{\"id\":\"chatcmpl-B4fjCQE0R6QfPhO9OrY3bkcAvlfsn\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\ninternal static class OVRMixedReality\\n{\\n    public static bool useFakeExternalCamera = false;\\n\\n    public static Vector3 fakeCameraFloorLevelPosition = new Vector3(0.0f, 2.0f, -0.5f);\\n    public static Vector3 fakeCameraEyeLevelPosition = fakeCameraFloorLevelPosition - new Vector3(0.0f, 1.8f, 0.0f);\\n\\n    public static Quaternion fakeCameraRotation = Quaternion.LookRotation(\\n        (new Vector3(0.0f, fakeCameraFloorLevelPosition.y, 0.0f) - fakeCameraFloorLevelPosition).normalized,\\n        Vector3.up);\\n\\n    public static float fakeCameraFov = 60.0f;\\n    public static float fakeCameraAspect = 16.0f / 9.0f;\\n\\n    public static OVRComposition currentComposition = null;\\n\\n    private static Dictionary<OVRManager.MrcCameraType, GameObject> cameraObjectPool = new Dictionary<OVRManager.MrcCameraType, GameObject>();\\n\\n    static OVRMixedReality()\\n    {\\n        // Initialize object pool\\n        cameraObjectPool[OVRManager.MrcCameraType.Background] = null;\\n        cameraObjectPool[OVRManager.MrcCameraType.Foreground] = null;\\n    }\\n\\n    public static void Update(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n    {\\n        if (!OVRPlugin.initialized)\\n        {\\n            Debug.LogError(\\\"OVRPlugin not initialized\\\");\\n            return;\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            OVRPlugin.InitializeMixedReality();\\n            if (OVRPlugin.IsMixedRealityInitialized())\\n            {\\n                Debug.Log(\\\"OVRPlugin_MixedReality initialized\\\");\\n            }\\n            else\\n            {\\n                Debug.LogError(\\\"Unable to initialize OVRPlugin_MixedReality\\\");\\n                return;\\n            }\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            return;\\n        }\\n\\n        OVRPlugin.UpdateExternalCamera();\\n#if !OVR_ANDROID_MRC\\n        OVRPlugin.UpdateCameraDevices();\\n#endif\\n\\n#if OVR_ANDROID_MRC\\n        useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\\n#endif\\n\\n        if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\\n        {\\n            currentComposition.Cleanup();\\n            currentComposition = null;\\n        }\\n\\n        if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\\n        {\\n            if (currentComposition == null)\\n            {\\n                currentComposition = new OVRExternalComposition(parentObject, mainCamera, configuration, cameraObjectPool);\\n            }\\n        }\\n        else\\n        {\\n            Debug.LogError(\\\"Unknown/Unsupported CompositionMethod : \\\" + configuration.compositionMethod);\\n            return;\\n        }\\n\\n        currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\\n    }\\n}\\n\\npublic class OVRExternalComposition : OVRComposition\\n{\\n    public OVRExternalComposition(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, Dictionary<OVRManager.MrcCameraType, GameObject> cameraObjectPool)\\n        : base(parentObject, mainCamera, configuration)\\n    {\\n        RefreshCameraObjects(parentObject, mainCamera, configuration, cameraObjectPool);\\n    }\\n\\n    private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, Dictionary<OVRManager.MrcCameraType, GameObject> cameraObjectPool)\\n    {\\n        if (mainCamera.gameObject != previousMainCameraObject)\\n        {\\n            Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n                mainCamera.gameObject.name);\\n\\n            OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\\n            backgroundCamera = null;\\n            OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\\n            foregroundCamera = null;\\n\\n            RefreshCameraRig(parentObject, mainCamera);\\n\\n            if (cameraObjectPool[OVRManager.MrcCameraType.Background] != null)\\n            {\\n                backgroundCameraGameObject = cameraObjectPool[OVRManager.MrcCameraType.Background];\\n                cameraObjectPool[OVRManager.MrcCameraType.Background] = null;\\n            }\\n            else\\n            {\\n                backgroundCameraGameObject = InstantiateCameraObject(mainCamera, OVRManager.MrcCameraType.Background, configuration);\\n            }\\n\\n            if (cameraObjectPool[OVRManager.MrcCameraType.Foreground] != null)\\n            {\\n                foregroundCameraGameObject = cameraObjectPool[OVRManager.MrcCameraType.Foreground];\\n                cameraObjectPool[OVRManager.MrcCameraType.Foreground] = null;\\n            }\\n            else\\n            {\\n                foregroundCameraGameObject = InstantiateCameraObject(mainCamera, OVRManager.MrcCameraType.Foreground, configuration);\\n            }\\n\\n            previousMainCameraObject = mainCamera.gameObject;\\n        }\\n    }\\n\\n    private GameObject InstantiateCameraObject(Camera mainCamera, OVRManager.MrcCameraType cameraType, OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            return configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject, cameraType);\\n        }\\n        else\\n        {\\n            return Object.Instantiate(mainCamera.gameObject);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\ninternal static class OVRMixedReality\\n{\\n    private static OVRExternalComposition externalCompositionPool;\\n\\n    public static void InitializePool(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (externalCompositionPool == null)\\n        {\\n            externalCompositionPool = new OVRExternalComposition(parentObject, mainCamera, configuration);\\n        }\\n    }\\n\\n    public static void Update(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n    {\\n        if (!OVRPlugin.initialized)\\n        {\\n            Debug.LogError(\\\"OVRPlugin not initialized\\\");\\n            return;\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            OVRPlugin.InitializeMixedReality();\\n            if (OVRPlugin.IsMixedRealityInitialized())\\n            {\\n                Debug.Log(\\\"OVRPlugin_MixedReality initialized\\\");\\n            }\\n            else\\n            {\\n                Debug.LogError(\\\"Unable to initialize OVRPlugin_MixedReality\\\");\\n                return;\\n            }\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            return;\\n        }\\n\\n        OVRPlugin.UpdateExternalCamera();\\n#if !OVR_ANDROID_MRC\\n        OVRPlugin.UpdateCameraDevices();\\n#endif\\n\\n#if OVR_ANDROID_MRC\\n        useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\\n#endif\\n\\n        if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\\n        {\\n            currentComposition.Cleanup();\\n            currentComposition = null;\\n        }\\n\\n        if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\\n        {\\n            if (currentComposition == null)\\n            {\\n                currentComposition = externalCompositionPool;\\n            }\\n        }\\n        else\\n        {\\n            Debug.LogError(\\\"Unknown/Unsupported CompositionMethod : \\\" + configuration.compositionMethod);\\n            return;\\n        }\\n\\n        currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\ninternal static class OVRMixedReality\\n{\\n    private static OVRExternalComposition externalCompositionPool;\\n\\n    public static void Update(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n    {\\n        if (!OVRPlugin.initialized)\\n        {\\n            Debug.LogError(\\\"OVRPlugin not initialized\\\");\\n            return;\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            OVRPlugin.InitializeMixedReality();\\n            if (OVRPlugin.IsMixedRealityInitialized())\\n            {\\n                Debug.Log(\\\"OVRPlugin_MixedReality initialized\\\");\\n            }\\n            else\\n            {\\n                Debug.LogError(\\\"Unable to initialize OVRPlugin_MixedReality\\\");\\n                return;\\n            }\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            return;\\n        }\\n\\n        OVRPlugin.UpdateExternalCamera();\\n#if !OVR_ANDROID_MRC\\n        OVRPlugin.UpdateCameraDevices();\\n#endif\\n\\n#if OVR_ANDROID_MRC\\n        useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\\n#endif\\n\\n        if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\\n        {\\n            currentComposition.Cleanup();\\n            currentComposition = null;\\n        }\\n\\n        if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\\n        {\\n            if (currentComposition == null)\\n            {\\n                if (externalCompositionPool == null)\\n                {\\n                    externalCompositionPool = new OVRExternalComposition(parentObject, mainCamera, configuration);\\n                }\\n                currentComposition = externalCompositionPool;\\n            }\\n        }\\n        else\\n        {\\n            Debug.LogError(\\\"Unknown/Unsupported CompositionMethod : \\\" + configuration.compositionMethod);\\n            return;\\n        }\\n\\n        currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\ninternal static class OVRMixedReality\\n{\\n    // Object pool for OVRExternalComposition instances\\n    private static Dictionary<OVRManager.CompositionMethod, OVRExternalComposition> compositionPool = \\n        new Dictionary<OVRManager.CompositionMethod, OVRExternalComposition>();\\n\\n    public static OVRComposition currentComposition = null;\\n\\n    public static void Update(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n    {\\n        if (!OVRPlugin.initialized)\\n        {\\n            Debug.LogError(\\\"OVRPlugin not initialized\\\");\\n            return;\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            OVRPlugin.InitializeMixedReality();\\n            if (OVRPlugin.IsMixedRealityInitialized())\\n            {\\n                Debug.Log(\\\"OVRPlugin_MixedReality initialized\\\");\\n            }\\n            else\\n            {\\n                Debug.LogError(\\\"Unable to initialize OVRPlugin_MixedReality\\\");\\n                return;\\n            }\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            return;\\n        }\\n\\n        OVRPlugin.UpdateExternalCamera();\\n#if !OVR_ANDROID_MRC\\n        OVRPlugin.UpdateCameraDevices();\\n#endif\\n\\n#if OVR_ANDROID_MRC\\n        useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\\n#endif\\n\\n        if (currentComposition != null && \\n            currentComposition.CompositionMethod() != configuration.compositionMethod)\\n        {\\n            currentComposition.Cleanup();\\n            currentComposition = null;\\n        }\\n\\n        if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\\n        {\\n            if (currentComposition == null)\\n            {\\n                // Check if a pre-instantiated instance is available in the pool\\n                if (!compositionPool.TryGetValue(configuration.compositionMethod, out OVRExternalComposition pooledComposition))\\n                {\\n                    // Instantiate a new OVRExternalComposition and add it to the pool\\n                    pooledComposition = new OVRExternalComposition(parentObject, mainCamera, configuration);\\n                    compositionPool[configuration.compositionMethod] = pooledComposition;\\n                }\\n\\n                currentComposition = pooledComposition;\\n            }\\n        }\\n        else\\n        {\\n           Debug.LogError(\\\"Unknown/Unsupported CompositionMethod : \\\" + configuration.compositionMethod);\\n           return;\\n        }\\n\\n        currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\ninternal static class OVRMixedReality\\n{\\n    private static OVRExternalComposition externalCompositionPrefab;\\n    private static Queue<OVRExternalComposition> compositionPool = new Queue<OVRExternalComposition>();\\n\\n    public static bool useFakeExternalCamera = false;\\n\\n    public static Vector3 fakeCameraFloorLevelPosition = new Vector3(0.0f, 2.0f, -0.5f);\\n    public static Vector3 fakeCameraEyeLevelPosition = fakeCameraFloorLevelPosition - new Vector3(0.0f, 1.8f, 0.0f);\\n\\n    public static Quaternion fakeCameraRotation = Quaternion.LookRotation(\\n        (new Vector3(0.0f, fakeCameraFloorLevelPosition.y, 0.0f) - fakeCameraFloorLevelPosition).normalized,\\n        Vector3.up);\\n\\n    public static float fakeCameraFov = 60.0f;\\n    public static float fakeCameraAspect = 16.0f / 9.0f;\\n\\n    public static OVRComposition currentComposition = null;\\n\\n    static OVRMixedReality()\\n    {\\n        // Assume externalCompositionPrefab is assigned or created elsewhere if needed\\n    }\\n\\n    public static void Update(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n    {\\n        if (!OVRPlugin.initialized)\\n        {\\n            Debug.LogError(\\\"OVRPlugin not initialized\\\");\\n            return;\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            OVRPlugin.InitializeMixedReality();\\n            if (OVRPlugin.IsMixedRealityInitialized())\\n            {\\n                Debug.Log(\\\"OVRPlugin_MixedReality initialized\\\");\\n            }\\n            else\\n            {\\n                Debug.LogError(\\\"Unable to initialize OVRPlugin_MixedReality\\\");\\n                return;\\n            }\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            return;\\n        }\\n\\n        OVRPlugin.UpdateExternalCamera();\\n#if !OVR_ANDROID_MRC\\n        OVRPlugin.UpdateCameraDevices();\\n#endif\\n\\n#if OVR_ANDROID_MRC\\n        useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\\n#endif\\n\\n        if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\\n        {\\n            currentComposition.Cleanup();\\n            ReturnCompositionToPool((OVRExternalComposition)currentComposition);\\n            currentComposition = null;\\n        }\\n\\n        if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\\n        {\\n            if (currentComposition == null)\\n            {\\n                currentComposition = GetCompositionFromPool(parentObject, mainCamera, configuration);\\n            }\\n        }\\n        else\\n        {\\n            Debug.LogError(\\\"Unknown/Unsupported CompositionMethod : \\\" + configuration.compositionMethod);\\n            return;\\n        }\\n\\n        currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\\n    }\\n\\n    private static void BuildCompositionPool()\\n    {\\n        for (int i = 0; i < 5; i++)\\n        {\\n            OVRExternalComposition composition = new OVRExternalComposition(null, null, null);\\n            compositionPool.Enqueue(composition);\\n        }\\n    }\\n\\n    private static OVRExternalComposition GetCompositionFromPool(GameObject parentObject, Camera mainCamera, OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (compositionPool.Count == 0)\\n        {\\n            BuildCompositionPool();\\n        }\\n\\n        OVRExternalComposition composition = compositionPool.Dequeue();\\n        composition.Initialize(parentObject, mainCamera, configuration);\\n        return composition;\\n    }\\n\\n    private static void ReturnCompositionToPool(OVRExternalComposition composition)\\n    {\\n        composition.Cleanup();\\n        compositionPool.Enqueue(composition);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740453414,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":3166,\"prompt_tokens\":3108,\"total_tokens\":6274,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"