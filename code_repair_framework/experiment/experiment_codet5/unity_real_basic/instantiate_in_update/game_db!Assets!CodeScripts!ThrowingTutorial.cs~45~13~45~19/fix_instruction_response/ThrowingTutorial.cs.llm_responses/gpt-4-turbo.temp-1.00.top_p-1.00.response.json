"{\"id\":\"chatcmpl-B1sU3EHJg5Ti852qEvUpnXhZmNDl2\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; \\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n\\n    private int throwCounter = 0; \\n    private bool inCollider = false; \\n\\n    AudioManager audioManager;\\n\\n    // Object pool\\n    private Queue<GameObject> objectPool = new Queue<GameObject>();\\n    public int poolSize = 10;\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n\\n        // Initialize object pool\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject pooledObject = Instantiate(objectToThrow);\\n            pooledObject.SetActive(false);\\n            objectPool.Enqueue(pooledObject);\\n        }\\n    }\\n\\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows && objectPool.Count > 0)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n\\n            GameObject thrownObject = objectPool.Dequeue();\\n            thrownObject.transform.position = attackPoint.position;\\n            thrownObject.transform.rotation = attackPoint.rotation;\\n            thrownObject.SetActive(true);\\n\\n            Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n            rb.velocity = Vector3.zero; // Reset velocity\\n            rb.angularVelocity = Vector3.zero; // Reset angular velocity\\n            rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n            throwCounter++;\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false);\\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true);\\n        }\\n\\n        totalThrows--;\\n        \\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n\\n    private void OnTriggerEnter(Collider other)\\n    {\\n        if (other.gameObject == player)\\n        {\\n            inCollider = true;\\n        }\\n    }\\n\\n    private void OnTriggerExit(Collider other)\\n    {\\n        if (other.gameObject == player)\\n        {\\n            inCollider = false;\\n        }\\n    }\\n\\n    public void ReturnToPool(GameObject returnedObject)\\n    {\\n        returnedObject.SetActive(false);\\n        objectPool.Enqueue(returnedObject);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; \\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n\\n    private int throwCounter = 0; \\n    private bool inCollider = false; \\n\\n    AudioManager audioManager;\\n\\n    // Object pool for the objects to throw\\n    private Queue<GameObject> throwObjectPool = new Queue<GameObject>();\\n    private int poolSize = 10; // adjust pool size as needed\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n        \\n        // Initialize the object pool\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(objectToThrow);\\n            obj.SetActive(false);\\n            throwObjectPool.Enqueue(obj);\\n        }\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n    }\\n\\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n            \\n            GameObject thrownObject = throwObjectPool.Dequeue();\\n            thrownObject.SetActive(true);\\n            thrownObject.transform.position = attackPoint.position;\\n            thrownObject.transform.rotation = attackPoint.rotation;\\n            \\n            Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n            rb.velocity = Vector3.zero; // reset velocity\\n            rb.angularVelocity = Vector3.zero; // reset angular velocity\\n            rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n\\n            throwObjectPool.Enqueue(thrownObject); // add the object back into the pool\\n\\n            throwCounter++;\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); \\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); \\n        }\\n\\n        totalThrows--;\\n\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; \\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n\\n    private int throwCounter = 0; \\n    private bool inCollider = false; \\n\\n    AudioManager audioManager;\\n    private Queue<GameObject> objectPool;\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n        // Initialize object pool\\n        objectPool = new Queue<GameObject>();\\n        for (int i = 0; i < totalThrows; i++)\\n        {\\n            GameObject obj = Instantiate(objectToThrow);\\n            obj.SetActive(false);\\n            objectPool.Enqueue(obj);\\n        }\\n    }\\n\\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows && objectPool.Count > 0)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n            \\n            GameObject thrownObject = objectPool.Dequeue();\\n            thrownObject.transform.position = attackPoint.position;\\n            thrownObject.transform.rotation = attackPoint.rotation;\\n            thrownObject.SetActive(true);\\n\\n            Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n            rb.velocity = Vector3.zero; // Reset any existing velocity\\n            rb.angularVelocity = Vector3.zero; // Reset any existing angular velocity\\n            rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n            throwCounter++;\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); \\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); \\n        }\\n\\n        totalThrows--;\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; \\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n\\n    private int throwCounter = 0; \\n    private bool inCollider = false; \\n\\n    AudioManager audioManager;\\n\\n    private List<GameObject> objectPool = new List<GameObject>();\\n    private int poolSize = 10;\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n        InitializeObjectPool();\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n    }\\n\\n    private void InitializeObjectPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(objectToThrow);\\n            obj.SetActive(false);\\n            objectPool.Add(obj);\\n        }\\n    }\\n\\n    private GameObject GetPooledObject()\\n    {\\n        foreach (var obj in objectPool)\\n        {\\n            if (!obj.activeInHierarchy)\\n            {\\n                return obj;\\n            }\\n        }\\n        // If no inactive objects are available, optionally expand the pool\\n        GameObject newObj = Instantiate(objectToThrow);\\n        newObj.SetActive(false);\\n        objectPool.Add(newObj);\\n        return newObj;\\n    }\\n\\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n\\n            GameObject thrownObject = GetPooledObject();\\n            thrownObject.transform.position = attackPoint.position;\\n            thrownObject.transform.rotation = attackPoint.rotation;\\n            thrownObject.SetActive(true);\\n\\n            Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n            rb.velocity = Vector3.zero; // Reset velocity for accurate repeated throws\\n            rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n            throwCounter++;\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); \\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); \\n        }\\n\\n        totalThrows--;\\n\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; \\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n    \\n    private int throwCounter = 0; \\n    private bool inCollider = false; \\n\\n    AudioManager audioManager;\\n\\n    // Creating an object pool\\n    private Queue<GameObject> objectPool = new Queue<GameObject>();\\n    private int poolSize = 10;\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n        InitializeObjectPool();\\n    }\\n\\n    // Initialize the object pool with recycled objects\\n    private void InitializeObjectPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(objectToThrow);\\n            obj.SetActive(false);\\n            objectPool.Enqueue(obj);\\n        }\\n    }\\n\\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n\\n            GameObject thrownObject = GetObjectFromPool();\\n            thrownObject.transform.position = attackPoint.position;\\n            thrownObject.transform.rotation = attackPoint.rotation;\\n            \\n            Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n            rb.velocity = Vector3.zero; // Reset velocity before applying force\\n            rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n            throwCounter++;\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); \\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); \\n        }\\n\\n        totalThrows--;\\n\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    // Method to get an object from the pool\\n    private GameObject GetObjectFromPool()\\n    {\\n        if (objectPool.Count > 0)\\n        {\\n            GameObject obj = objectPool.Dequeue();\\n            obj.SetActive(true);\\n            return obj;\\n        }\\n        else\\n        {\\n            // If pool is empty, instantiate a new object\\n            GameObject newObj = Instantiate(objectToThrow);\\n            return newObj;\\n        }\\n    }\\n\\n    // Method to return an object back to the pool\\n    private void ReturnObjectToPool(GameObject obj)\\n    {\\n        obj.SetActive(false);\\n        objectPool.Enqueue(obj);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787463,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_f3927aa00d\",\"usage\":{\"completion_tokens\":3022,\"prompt_tokens\":545,\"total_tokens\":3567,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"