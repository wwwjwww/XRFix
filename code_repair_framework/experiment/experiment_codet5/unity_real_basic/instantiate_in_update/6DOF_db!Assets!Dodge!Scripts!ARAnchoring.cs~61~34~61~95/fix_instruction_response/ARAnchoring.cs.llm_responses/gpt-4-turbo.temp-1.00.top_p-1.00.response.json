"{\"id\":\"chatcmpl-B1sOPH7tQyrNUGnyb4UG9ww7BQzOo\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    private GameObject andyObject;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n\\n        // Create a single instance of the 'Environment' object\\n        andyObject = Instantiate(Environment);\\n        andyObject.SetActive(false);\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width*0.5f, Screen.height*0.5f, raycastFilter, out hit))\\n        {\\n            hit.Trackable.GetType();\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0 ))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                // Use the pre-instantiated object\\n                andyObject.transform.position = hit.Pose.position;\\n                andyObject.transform.rotation = hit.Pose.rotation;\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                andyObject.SetActive(true);\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    private Queue<GameObject> environmentPool = new Queue<GameObject>();\\n    private int poolSize = 10;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n        \\n        InitializeEnvironmentPool();\\n    }\\n\\n    private void InitializeEnvironmentPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(Environment);\\n            obj.SetActive(false);\\n            environmentPool.Enqueue(obj);\\n        }\\n    }\\n\\n    private GameObject GetPooledEnvironment()\\n    {\\n        if (environmentPool.Count > 0)\\n        {\\n            GameObject obj = environmentPool.Dequeue();\\n            obj.SetActive(true);\\n            return obj;\\n        }\\n        Debug.LogWarning(\\\"Environment pool exhausted!\\\");\\n        return Instantiate(Environment);\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            hit.Trackable.GetType();\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = GetPooledEnvironment();\\n                andyObject.transform.position = hit.Pose.position;\\n                andyObject.transform.rotation = hit.Pose.rotation;\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n    private Queue<GameObject> objectPool = new Queue<GameObject>();\\n\\n    public void Start()\\n    {  \\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n\\n        // Pre-instantiate a pool of objects to avoid using Instantiate() in the Update method\\n        for (int i = 0; i < 10; i++) // Adjust the pool size based on your needs\\n        {\\n            var obj = Instantiate(Environment);\\n            obj.SetActive(false);\\n            objectPool.Enqueue(obj);\\n        }\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if (hit.Trackable is DetectedPlane && Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) >= 0)\\n            {\\n                if (objectPool.Count > 0)\\n                {\\n                    var andyObject = objectPool.Dequeue();\\n                    andyObject.transform.position = hit.Pose.position;\\n                    andyObject.transform.rotation = hit.Pose.rotation;\\n                    andyObject.SetActive(true);\\n                    \\n                    var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                    andyObject.transform.parent = anchor.transform;\\n                    FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                    isVR = true;\\n                }\\n            }\\n            else\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    private Queue<GameObject> objectPool = new Queue<GameObject>();\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n        CreateObjectPool();\\n    }\\n\\n    private void CreateObjectPool()\\n    {\\n        for (int i = 0; i < 10; i++) // Create a pool of 10 objects\\n        {\\n            GameObject obj = Instantiate(Environment);\\n            obj.SetActive(false);\\n            objectPool.Enqueue(obj);\\n        }\\n    }\\n\\n    private GameObject GetPooledObject(Vector3 position, Quaternion rotation)\\n    {\\n        if (objectPool.Count > 0)\\n        {\\n            GameObject obj = objectPool.Dequeue();\\n            obj.transform.position = position;\\n            obj.transform.rotation = rotation;\\n            obj.SetActive(true);\\n            return obj;\\n        }\\n        return null; // No available object in pool\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if (!(hit.Trackable is DetectedPlane) ||\\n                Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) >= 0)\\n            {\\n                GameObject andyObject = GetPooledObject(hit.Pose.position, hit.Pose.rotation);\\n                if (andyObject != null)\\n                {\\n                    var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                    andyObject.transform.parent = anchor.transform;\\n                    FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                    isVR = true;\\n                }\\n            }\\n            else\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n    \\n    private List<GameObject> objectPool = new List<GameObject>();\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n        \\n        // Initialize object pool\\n        InitializeObjectPool();\\n    }\\n    \\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                // Use object from the pool\\n                GameObject andyObject = GetObjectFromPool();\\n                if (andyObject == null)\\n                {\\n                    return;\\n                }\\n\\n                andyObject.transform.position = hit.Pose.position;\\n                andyObject.transform.rotation = hit.Pose.rotation;\\n                andyObject.SetActive(true);\\n\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n\\n    private void InitializeObjectPool()\\n    {\\n        for (int i = 0; i < 10; i++)  // Example size of the pool\\n        {\\n            GameObject obj = Instantiate(Environment);\\n            obj.SetActive(false);\\n            objectPool.Add(obj);\\n        }\\n    }\\n\\n    private GameObject GetObjectFromPool()\\n    {\\n        foreach (GameObject obj in objectPool)\\n        {\\n            if (!obj.activeInHierarchy)\\n            {\\n                return obj;\\n            }\\n        }\\n\\n        return null;  // Pool is exhausted\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787113,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_2f6c0d94dc\",\"usage\":{\"completion_tokens\":3008,\"prompt_tokens\":616,\"total_tokens\":3624,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"