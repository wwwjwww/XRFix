{
  "test_code": "        void Update()\n        {\n\n\n\n            if (m_AttemptSpawn)\n            {\n                m_AttemptSpawn = false;\n\n\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\n                {\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\n                        return;\n\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\n                        return;\n\n<BUGS>                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\n<BUGE>                }\n\n                return;\n            }\n\n            var selectState = m_ARInteractor.logicalSelectState;\n\n            if (m_BlockSpawnWhenInteractorHasSelection)\n            {\n                if (selectState.wasPerformedThisFrame)\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\n                else if (selectState.active)\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\n            }\n\n            m_AttemptSpawn = false;\n            switch (m_SpawnTriggerType)\n            {\n                case SpawnTriggerType.SelectAttempt:\n                    if (selectState.wasCompletedThisFrame)\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\n                    break;\n\n                case SpawnTriggerType.InputAction:\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\n                    break;\n            }\n        }\n\n/*Addition Code for reference:\n        public bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\n        {\n            if (transform.childCount > 0)\n            {\n                return false;\n            }\n            \n            if (m_OnlySpawnInView)\n            {\n                var inViewMin = m_ViewportPeriphery;\n                var inViewMax = 1f - m_ViewportPeriphery;\n                var pointInViewportSpace = cameraToFace.WorldToViewportPoint(spawnPoint);\n                if (pointInViewportSpace.z < 0f || pointInViewportSpace.x > inViewMax || pointInViewportSpace.x < inViewMin ||\n                    pointInViewportSpace.y > inViewMax || pointInViewportSpace.y < inViewMin)\n                {\n                    return false;\n                }\n            }\n\n            var objectIndex = isSpawnOptionRandomized ? Random.Range(0, m_ObjectPrefabs.Count) : m_SpawnOptionIndex;\n            var newObject = Instantiate(m_ObjectPrefabs[objectIndex]);\n            if (m_SpawnAsChildren)\n                newObject.transform.parent = transform;\n\n            newObject.transform.position = spawnPoint;\n            EnsureFacingCamera();\n\n            var facePosition = m_CameraToFace.transform.position;\n            var forward = facePosition - spawnPoint;\n            BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);\n            newObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);\n\n            if (m_ApplyRandomAngleAtSpawn)\n            {\n                var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);\n                newObject.transform.Rotate(Vector3.up, randomRotation);\n            }\n\n            if (m_SpawnVisualizationPrefab != null)\n            {\n                var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;\n                visualizationTrans.position = spawnPoint;\n                visualizationTrans.rotation = newObject.transform.rotation;\n            }\n\n            objectSpawned?.Invoke(newObject);\n            return true;\n        }\n*/"
}