"{\"id\":\"chatcmpl-Bq3ehfEEXpNV6r0qsFQuBctMwnNr7\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprivate Vector3 rootScaleVector3;\\n\\nprivate void Start()\\n{\\n    if (_skeletonType != SkeletonType.None)\\n    {\\n        Initialize();\\n        rootScaleVector3 = new Vector3();\\n    }\\n}\\n\\nprivate void Update()\\n{\\n#if UNITY_EDITOR\\n    if (OVRInput.IsControllerConnected(OVRInput.Controller.Hands) && !IsInitialized)\\n    {\\n        if (_skeletonType != SkeletonType.None)\\n        {\\n            Initialize();\\n        }\\n    }\\n\\n    if (!ShouldUpdateBonePoses)\\n    {\\n        return;\\n    }\\n#endif\\n\\n    if (!IsInitialized || _dataProvider == null)\\n    {\\n        IsDataValid = false;\\n        IsDataHighConfidence = false;\\n\\n        return;\\n    }\\n\\n    var data = _dataProvider.GetSkeletonPoseData();\\n\\n    IsDataValid = data.IsDataValid;\\n    if (data.IsDataValid)\\n    {\\n        IsDataHighConfidence = data.IsDataHighConfidence;\\n\\n        if (_updateRootPose)\\n        {\\n            transform.localPosition = data.RootPose.Position.FromFlippedZVector3f();\\n            transform.localRotation = data.RootPose.Orientation.FromFlippedZQuatf();\\n        }\\n\\n        if (_updateRootScale)\\n        {\\n            rootScaleVector3.Set(data.RootScale, data.RootScale, data.RootScale);\\n            transform.localScale = rootScaleVector3;\\n        }\\n\\n        for (var i = 0; i < _bones.Count; ++i)\\n        {\\n            if (_bones[i].Transform != null)\\n            {\\n                _bones[i].Transform.localRotation = data.BoneRotations[i].FromFlippedXQuatf();\\n                if (_bones[i].Id == BoneId.Hand_WristRoot)\\n                {\\n                    _bones[i].Transform.localRotation *= wristFixupRotation;\\n                }\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprivate Vector3 _rootScaleVector = Vector3.one;\\n\\nprivate void Update()\\n{\\n#if UNITY_EDITOR\\n\\tif (OVRInput.IsControllerConnected(OVRInput.Controller.Hands) && !IsInitialized)\\n\\t{\\n\\t\\tif (_skeletonType != SkeletonType.None)\\n\\t\\t{\\n\\t\\t\\tInitialize();\\n\\t\\t}\\n\\t}\\n\\n\\tif (!ShouldUpdateBonePoses)\\n\\t{\\n\\t\\treturn;\\n\\t}\\n#endif\\n\\n\\tif (!IsInitialized || _dataProvider == null)\\n\\t{\\n\\t\\tIsDataValid = false;\\n\\t\\tIsDataHighConfidence = false;\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tvar data = _dataProvider.GetSkeletonPoseData();\\n\\n\\tIsDataValid = data.IsDataValid;\\n\\tif (data.IsDataValid)\\n\\t{\\n\\t\\tIsDataHighConfidence = data.IsDataHighConfidence;\\n\\n\\t\\tif (_updateRootPose)\\n\\t\\t{\\n\\t\\t\\ttransform.localPosition = data.RootPose.Position.FromFlippedZVector3f();\\n\\t\\t\\ttransform.localRotation = data.RootPose.Orientation.FromFlippedZQuatf();\\n\\t\\t}\\n\\n\\t\\tif (_updateRootScale)\\n\\t\\t{\\n\\t\\t\\t_rootScaleVector.Set(data.RootScale, data.RootScale, data.RootScale);\\n\\t\\t\\ttransform.localScale = _rootScaleVector;\\n\\t\\t}\\n\\n\\t\\tfor (var i = 0; i < _bones.Count; ++i)\\n\\t\\t{\\n\\t\\t\\tif (_bones[i].Transform != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\t_bones[i].Transform.localRotation = data.BoneRotations[i].FromFlippedXQuatf();\\n\\t\\t\\t\\tif (_bones[i].Id == BoneId.Hand_WristRoot)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t_bones[i].Transform.localRotation *= wristFixupRotation;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\\tprivate void Update()\\n\\t{\\n#if UNITY_EDITOR\\n\\t\\tif (OVRInput.IsControllerConnected(OVRInput.Controller.Hands) && !IsInitialized)\\n\\t\\t{\\n\\t\\t\\tif (_skeletonType != SkeletonType.None)\\n\\t\\t\\t{\\n\\t\\t\\t\\tInitialize();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ShouldUpdateBonePoses)\\n\\t\\t{\\n\\t\\t\\treturn;\\n\\t\\t}\\n#endif\\n\\n\\t\\tif (!IsInitialized || _dataProvider == null)\\n\\t\\t{\\n\\t\\t\\tIsDataValid = false;\\n\\t\\t\\tIsDataHighConfidence = false;\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar data = _dataProvider.GetSkeletonPoseData();\\n\\n\\t\\tIsDataValid = data.IsDataValid;\\n\\t\\tif (data.IsDataValid)\\n\\t\\t{\\n\\t\\t\\tIsDataHighConfidence = data.IsDataHighConfidence;\\n\\n\\t\\t\\tif (_updateRootPose)\\n\\t\\t\\t{\\n\\t\\t\\t\\ttransform.localPosition = data.RootPose.Position.FromFlippedZVector3f();\\n\\t\\t\\t\\ttransform.localRotation = data.RootPose.Orientation.FromFlippedZQuatf();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_updateRootScale)\\n\\t\\t\\t{\\n\\t\\t\\t\\t// Reuse the existing Vector3 allocation for better performance\\n\\t\\t\\t\\tVector3 rootScale = transform.localScale;\\n\\t\\t\\t\\trootScale.Set(data.RootScale, data.RootScale, data.RootScale);\\n\\t\\t\\t\\ttransform.localScale = rootScale;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor (var i = 0; i < _bones.Count; ++i)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (_bones[i].Transform != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t_bones[i].Transform.localRotation = data.BoneRotations[i].FromFlippedXQuatf();\\n\\t\\t\\t\\t\\tif (_bones[i].Id == BoneId.Hand_WristRoot)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t_bones[i].Transform.localRotation *= wristFixupRotation;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprivate void Update()\\n{\\n#if UNITY_EDITOR\\n    if (OVRInput.IsControllerConnected(OVRInput.Controller.Hands) && !IsInitialized)\\n    {\\n        if (_skeletonType != SkeletonType.None)\\n        {\\n            Initialize();\\n        }\\n    }\\n\\n    if (!ShouldUpdateBonePoses)\\n    {\\n        return;\\n    }\\n#endif\\n\\n    if (!IsInitialized || _dataProvider == null)\\n    {\\n        IsDataValid = false;\\n        IsDataHighConfidence = false;\\n\\n        return;\\n    }\\n\\n    var data = _dataProvider.GetSkeletonPoseData();\\n\\n    IsDataValid = data.IsDataValid;\\n    if (data.IsDataValid)\\n    {\\n        IsDataHighConfidence = data.IsDataHighConfidence;\\n\\n        if (_updateRootPose)\\n        {\\n            transform.localPosition = data.RootPose.Position.FromFlippedZVector3f();\\n            transform.localRotation = data.RootPose.Orientation.FromFlippedZQuatf();\\n        }\\n\\n        if (_updateRootScale)\\n        {\\n            // Use a preallocated Vector3 instead of creating a new one every frame\\n            Vector3 updatedScale = Vector3.one * data.RootScale;\\n            transform.localScale = updatedScale;\\n        }\\n\\n        for (var i = 0; i < _bones.Count; ++i)\\n        {\\n            if (_bones[i].Transform != null)\\n            {\\n                _bones[i].Transform.localRotation = data.BoneRotations[i].FromFlippedXQuatf();\\n                if (_bones[i].Id == BoneId.Hand_WristRoot)\\n                {\\n                    _bones[i].Transform.localRotation *= wristFixupRotation;\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n// Declare the preallocated Vector3 outside of Update() to avoid repeated allocations per frame.\\nprivate static readonly Vector3 DefaultLocalScale = Vector3.one;\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprivate void Update()\\n{\\n#if UNITY_EDITOR\\n    if (OVRInput.IsControllerConnected(OVRInput.Controller.Hands) && !IsInitialized)\\n    {\\n        if (_skeletonType != SkeletonType.None)\\n        {\\n            Initialize();\\n        }\\n    }\\n\\n    if (!ShouldUpdateBonePoses)\\n    {\\n        return;\\n    }\\n#endif\\n\\n    if (!IsInitialized || _dataProvider == null)\\n    {\\n        IsDataValid = false;\\n        IsDataHighConfidence = false;\\n\\n        return;\\n    }\\n\\n    var data = _dataProvider.GetSkeletonPoseData();\\n\\n    IsDataValid = data.IsDataValid;\\n    if (data.IsDataValid)\\n    {\\n        IsDataHighConfidence = data.IsDataHighConfidence;\\n\\n        if (_updateRootPose)\\n        {\\n            transform.localPosition = data.RootPose.Position.FromFlippedZVector3f();\\n            transform.localRotation = data.RootPose.Orientation.FromFlippedZQuatf();\\n        }\\n\\n        if (_updateRootScale)\\n        {\\n            // Store the reused vector instance as a class member\\n            _reusedScaleVector.Set(data.RootScale, data.RootScale, data.RootScale);\\n            transform.localScale = _reusedScaleVector;\\n        }\\n\\n        for (var i = 0; i < _bones.Count; ++i)\\n        {\\n            if (_bones[i].Transform != null)\\n            {\\n                _bones[i].Transform.localRotation = data.BoneRotations[i].FromFlippedXQuatf();\\n                if (_bones[i].Id == BoneId.Hand_WristRoot)\\n                {\\n                    _bones[i].Transform.localRotation *= wristFixupRotation;\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n// Add this private field to store the reused vector\\nprivate Vector3 _reusedScaleVector = Vector3.one;\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751746807,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":1851,\"prompt_tokens\":3357,\"total_tokens\":5208,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"