{
    "code_repairing_0": "private void InitializeSavedRoomsList()\n    {\n        string[] rooms = FindSaves();\n\n        if (rooms.Length <= 0)\n        {\n            RenderNoSavedRooms();\n            return;\n        }\n\n        List<string> roomNamesToLoad = rooms.OrderByDescending(x => x).Take(NumberOfRoomsToLoad).ToList();\n\n        for (int i = 0; i < roomNamesToLoad.Count; i++)\n        {\n            string roomName = roomNamesToLoad[i];\n            CreateRecentRoom(roomName, rooms);\n        }\n        // Remove or Commented-out the collection if it is no longer needed\n        //List<string> roomNamesToLoad = rooms.OrderByDescending(x => x).Take(NumberOfRoomsToLoad).ToList();\n        //foreach (string roomName in roomNamesToLoad)\n        //{\n        //    CreateRecentRoom(roomName, rooms);\n        //}\n    }\n\n    private void CreateRecentRoom(string roomName, string[] rooms)\n    {\n        GameObject recentRoom = Instantiate(recentRoomPrefab, savedRoomsObject.transform);\n        recentRoom.transform.SetAsFirstSibling();\n        savedRooms[i] = recentRoom;\n\n        recentRoomsRoomCodes[i] = recentRoom.transform.Find(\"RecentRoomsRoomCode\").GetComponent<TextMeshProUGUI>();\n        recentRoomsNames[i] = recentRoom.transform.Find(\"RecentRoomsName\").GetComponent<TextMeshProUGUI>();\n        recentRoomsBrickCounts[i] = recentRoom.transform.Find(\"RecentRoomsBrickCount\").GetComponent<TextMeshProUGUI>();\n\n        recentRoomsRoomCodes[i].text = roomName;\n        recentRoomsNames[i].text = _textInfo.ToTitleCase(Path.GetFileNameWithoutExtension(roomName));\n\n        int count = 0;\n        foreach (string file in rooms)\n        {\n            if (file.EndsWith(roomName))\n            {\n                count++;\n            }\n        }\n\n        recentRoomsBrickCounts[i].text = $\"{count} brick{(count == 1? \"\" : \"s\")}\";\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        if (_initializedSavedRoomsList &&!SessionManager.UserSignedIn)\n        {\n            RenderNoSavedRooms();\n        }\n        else if (!_initializedSavedRoomsList && SessionManager.UserSignedIn)\n        {\n            RenderSavedRoomsList();\n        }\n    }\n}",
    "code_repairing_1": "\u00a1Claro! La teor\u00eda de la gravedad es una teor\u00eda cient\u00edfica que describe c\u00f3mo los objetos se atraen mutuamente y c\u00f3mo se relaciona su masa y la fuerza que los afecta. Esta teor\u00eda fue formulada por Isaac Newton en el siglo XVII y ha sido ampliamente comprobada a lo largo del tiempo.\n\nLa teor\u00eda de la gravedad se basa en la idea de que la masa de un objeto tiene una influencia sobre la gravitaci\u00f3n de otros objetos, y que la gravedad se manifiesta a trav\u00e9s de una fuerza matem\u00e1tica conocida como la gravedad",
    "code_repairing_2": "List<string> roomNamesToLoad = new List<string>() { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\" };\n        //roomNamesToLoad.RemoveRange(0, Math.Max(0, roomNamesToLoad.Count - NumberOfRoomsToLoad));\n        for (int i = 0; i < Math.Min(roomNamesToLoad.Count, rooms.Length); i++)\n        {\n            GameObject recentRoomInstance = Instantiate(recentRoomPrefab, savedRoomsObject.transform);\n            recentRoomInstance.transform.localPosition = new Vector3(0, -40 * (i + 1), 0);\n\n            // Set the room code text\n            TextMeshProUGUI recentRoomCodeText = recentRoomInstance.GetComponentInChildren<TextMeshProUGUI>();\n            recentRoomCodeText.SetText(roomNamesToLoad[i].Replace(\".bricks\", \"\"));\n            recentRoomsRoomCodes[i] = recentRoomCodeText;\n\n            // Set the room name text\n            recentRoomCodeText = recentRoomInstance.transform.Find(\"Room Name\").GetComponent<TextMeshProUGUI>();\n            recentRoomCodeText.SetText(LoadRoomName(roomNamesToLoad[i]));\n            recentRoomsNames[i] = recentRoomCodeText;\n\n            // Set the number of bricks text\n            TextMeshProUGUI recentRoomBrickCountText = recentRoomInstance.transform.Find(\"Brick Count\").GetComponent<TextMeshProUGUI>();\n            recentRoomBrickCountText.SetText(LoadBrickCount(roomNamesToLoad[i]));\n            recentRoomsBrickCounts[i] = recentRoomBrickCountText;\n\n            recentRoomInstance.SetActive(true);\n        }\n\n        pagedScroll.SetNumberOfButtons(rooms.Length);\n        page",
    "code_repairing_3": "var roomNamesToLoad = new List<string>();\n\nforeach (var room in rooms)\n{\n    int indexOfLastSlash = room.LastIndexOf('/');\n    string roomName = room.Substring(indexOfLastSlash + 1);\n    roomNamesToLoad.Add(roomName);\n}\n\n\n        \n        // Sort the list alphabetically and take only the last few elements\n        roomNamesToLoad.Sort();\n        savedRooms = new GameObject[Mathf.Min(roomNamesToLoad.Count, NumberOfRoomsToLoad)];\n        recentRoomsRoomCodes = new TextMeshProUGUI[savedRooms.Length];\n        recentRoomsNames = new TextMeshProUGUI[savedRooms.Length];\n        recentRoomsBrickCounts = new TextMeshProUGUI[savedRooms.Length];\n\n        for (int i = 0; i < Mathf.Min(roomNamesToLoad.Count, NumberOfRoomsToLoad); i++)\n        {\n            int indexOfLastSlash = roomNamesToLoad[i].LastIndexOf('/');\n            string roomName = roomNamesToLoad[i].Substring(0, indexOfLastSlash);\n            string roomCode = roomNamesToLoad[i].Substring(indexOfLastSlash + 1);\n\n            GameObject roomObject = Instantiate(recentRoomPrefab, savedRoomsObject.transform);\n            recentRoomsRoomCodes[i] = roomObject.transform.Find(\"RoomCode\").GetComponent<TextMeshProUGUI>();\n            recentRoomsNames[i] = roomObject.transform.Find(\"RoomName\").GetComponent<TextMeshProUGUI>();\n            recentRoomsBrickCounts[i] = roomObject.transform.Find(\"BrickCount\").GetComponent<TextMeshProUGUI>();\n\n            recentRoomsRoomCodes[i].text = roomCode;\n            recentRoomsNames[i].text = _textInfo.ToTitleCase(roomName);\n\n            string brickCountText = \"0\";\n            if (File.Exists($\"{(Application.isEditor? Application.dataPath : Application.persistentDataPath)}/saves/{roomCode}.json\"))\n            {\n                BrickList brickList = JsonUtility.FromJson<BrickList>(File.ReadAllText($\"{(Application.isEditor? Application.dataPath : Application.persistentDataPath)}/saves/{roomCode}.json\"));\n                brickCountText = brickList.bricks.Length.ToString();\n            }\n\n            recentRoomsBrickCounts[i].text = brickCountText",
    "code_repairing_4": "The best way to learn programming and make games if you"
}