// FIXED CODE:

using System;
using System.Collections.Generic;

internal static class OVRTask
{
    internal static OVRTask<TResult> FromGuid<TResult>(Guid id) => Create<TResult>(id);
    internal static OVRTask<TResult> FromRequest<TResult>(ulong id) => Create<TResult>(GetId(id));

    internal static OVRTask<TResult> FromResult<TResult>(TResult result)
    {
        var task = Create<TResult>(Guid.NewGuid());
        task.SetResult(result);
        return task;
    }

    internal static OVRTask<TResult> GetExisting<TResult>(Guid id) => Get<TResult>(id);
    internal static OVRTask<TResult> GetExisting<TResult>(ulong id) => Get<TResult>(GetId(id));

    internal static void SetResult<TResult>(Guid id, TResult result) =>
        GetExisting<TResult>(id).SetResult(result);

    internal static void SetResult<TResult>(ulong id, TResult result) =>
        GetExisting<TResult>(id).SetResult(result);

    private static OVRTask<TResult> Get<TResult>(Guid id)
    {
        return new OVRTask<TResult>(id);
    }

    private static OVRTask<TResult> Create<TResult>(Guid id)
    {
        var task = Get<TResult>(id);
        task.AddToPending();
        return task;
    }

    internal static Guid GetId(ulong value)
    {
        const ulong hashModifier1 = 0x319642b2d24d8ec3;
        const ulong hashModifier2 = 0x96de1b173f119089;
        var guid = default(Guid);
        unsafe
        {
            *(ulong*)&guid = unchecked(value + hashModifier1);
            *((ulong*)&guid + 1) = hashModifier2;
        }
        return guid;
    }
}

public readonly struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable
{
    private static readonly HashSet<Guid> Pending = new HashSet<Guid>();
    private static readonly Dictionary<Guid, TResult> Results = new Dictionary<Guid, TResult>();
    private static readonly Dictionary<Guid, Action> Continuations = new Dictionary<Guid, Action>();
    private static readonly Dictionary<Guid, CallbackInvoker> CallbackInvokers = new Dictionary<Guid, CallbackInvoker>();
    private static readonly Dictionary<Guid, CallbackRemover> CallbackRemovers = new Dictionary<Guid, CallbackRemover>();
    private static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers = new Dictionary<Guid, InternalDataRemover>();
    private static readonly Dictionary<Guid, Action<Guid>> SubscriberRemovers = new Dictionary<Guid, Action<Guid>>();

    private readonly Guid id;

    public OVRTask(Guid id)
    {
        this.id = id;
    }

    public void Dispose()
    {
        // Dispose resources here if needed
    }

    public bool Equals(OVRTask<TResult> other)
    {
        return id.Equals(other.id);
    }

    private void AddToPending() 
    {
        // Implementation to add id to pending set
        Pending.Add(id);
    }

    private void SetResult(TResult result)
    {
        // Implementation to set result for this task
        Results[id] = result;
    }

    private delegate void CallbackInvoker(Guid guid, TResult result);
    private delegate bool CallbackRemover(Guid guid);
    private delegate bool InternalDataRemover(Guid guid);
}
