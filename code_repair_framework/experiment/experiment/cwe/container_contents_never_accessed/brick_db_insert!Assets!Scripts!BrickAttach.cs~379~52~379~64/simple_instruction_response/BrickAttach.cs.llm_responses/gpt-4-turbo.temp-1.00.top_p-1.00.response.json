{
    "id": "chatcmpl-9yzJTF7G0g0zG6Apl1JPJuqm2HmKX",
    "object": "chat.completion",
    "created": 1724322395,
    "model": "gpt-4",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```csharp\npublic void SetColor(Color32 color)\n{\n    if (model == null)\n    {\n        Debug.LogError(\"There should be a model on this object\");\n        return;\n    }\n\n    _color = color;\n    \n    UpdateBrickColor();\n}\n\npublic void RecalculateRenderedGeometry()\n{\n    bool placed = placedBrickRenderer == null;\n    bool performanceMode = _userSettings.SuperUltraPerformanceMode;\n\n    string cacheKey = \"\";\n    cacheKey += normalPrefabName;\n\n    bool allFemalePegsCovered = femaleConnectorScripts.All(s => s.covered);\n\n    bool isOnCarpet = IsOnCarpet();\n\n    if (performanceMode)\n    {\n        cacheKey += \"-perfmode\";\n    }\n    else\n    {\n        foreach (LegoConnectorScript s in maleConnectorScripts)\n        {\n            cacheKey += ((placed && s.covered) ? \"Y\" : \"N\");\n        }\n\n        if ((allFemalePegsCovered || isOnCarpet) && placed) cacheKey += \"-bottomcovered\";\n    }\n\n    MeshFilter combinedMeshFilter = combinedModel.GetComponent<MeshFilter>();\n\n    Mesh cachedMesh = BrickMeshCache.GetInstance().Get(cacheKey);\n    if (cachedMesh != null)\n    {\n        combinedMeshFilter.mesh = cachedMesh;\n        SetSortedMaterial(combinedMeshFilter.sharedMesh);\n        return;\n    }\n\n    Vector3 originalPos = transform.position;\n    transform.position = Vector3.zero;\n\n    Quaternion originalRot = transform.rotation;\n    transform.rotation = Quaternion.identity;\n\n    List<CombineInstance> combineInstances = new List<CombineInstance>();\n\n    _modularModel.transform.position = transform.position;\n\n    foreach (MeshFilter meshFilter in _modularModel.GetComponentsInChildren<MeshFilter>())\n    {\n        GameObject obj = meshFilter.gameObject;\n        string parentName = meshFilter.transform.parent.name;\n\n        switch (parentName)\n        {\n            case \"Studs\":\n                if (maleConnectorScriptsByName[obj.name].covered || performanceMode)\n                    continue;\n                break;\n            case \"Tubes\":\n                if (allFemalePegsCovered || performanceMode)\n                    continue;\n                break;\n            case \"Body\":\n                if (allFemalePegsCovered || performanceMode || isOnCarpet)\n                    continue;\n                break;\n            case \"FlatBody\":\n                if (performanceMode || allFemalePegsCovered || isOnCarpet)\n                    continue;\n                break;\n        }\n\n        CombineInstance instance = new CombineInstance\n        {\n            mesh = meshFilter.sharedMesh,\n            transform = meshFilter.transform.localToWorldMatrix\n        };\n        combineInstances.Add(instance);\n    }\n\n    Mesh newMesh = new Mesh();\n    combinedMeshFilter.mesh = newMesh;\n    combinedMeshFilter.mesh.CombineMeshes(combineInstances.ToArray(), true, false);\n    combinedMeshFilter.mesh.Optimize();\n\n    BrickMeshCache.GetInstance().Put(cacheKey, combinedMeshFilter.sharedMesh);\n\n    transform.position = originalPos;\n    transform.rotation = originalRot;\n\n    SetColor(_color);\n    SetSortedMaterial(combinedMeshFilter.sharedMesh);\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "```csharp\n    private void SetSortedMaterial(Mesh mesh = null)\n    {\n        if (!meshRenderer) return;\n\n        meshRenderer.material = BrickRenderQueueSorter.SortedMaterialFromMesh(mesh ? mesh : meshFilter.sharedMesh, meshRenderer.sharedMaterial);\n        renderQueue = meshRenderer.sharedMaterial.renderQueue;\n    }\n\n    private List<GameObject> OverlappingBricksFromConnectors(List<GameObject> connectors) {\n        return connectors.SelectMany(connector => Physics.OverlapSphere(connector.transform.position, 0.01f, LayerMask.GetMask(\"Brick\"), QueryTriggerInteraction.Ignore))\n                         .Select(collider => collider.gameObject)\n                         .Distinct()\n                         .ToList();\n    }\n\n    private void OnValidate()\n    {\n        maleConnectors = maleConnectorParent.transform.Cast<Transform>().Select(t => t.gameObject).ToList();\n        maleConnectorScripts = maleConnectors.Select(connector => connector.GetComponent<LegoConnectorScript>()).ToList();\n\n        femaleConnectors = femaleConnectorParent.transform.Cast<Transform>().Select(t => t.gameObject).ToList();\n        femaleConnectorScripts = femaleConnectors.Select(connector => connector.GetComponent<LegoConnectorScript>()).ToList();\n    }\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "```csharp\nprivate void SetHovered(bool hovered, bool left)\n{\n    if (left)\n        _hoveredLeft = hovered;\n    else\n        _hoveredRight = hovered;\n\n    UpdateBrickColor();\n}\n\npublic void SetHeld(bool held)\n{\n    Held = held;\n    UpdateBrickColor();\n}\n\npublic void RecalculateRenderedGeometry() {\n    bool placed = placedBrickRenderer == null;\n    bool performanceMode = _userSettings.SuperUltraPerformanceMode;\n\n    string cacheKey = normalPrefabName;\n\n    bool allFemalePegsCovered = femaleConnectorScripts.All(s => s.covered);\n\n    bool isOnCarpet = IsOnCarpet();\n\n    if (performanceMode)\n    {\n        cacheKey += \"perfmode\"; \n    }\n    else\n    {\n        foreach (LegoConnectorScript s in maleConnectorScripts)\n        {\n            cacheKey += ((placed && s.covered) ? \"Y\" : \"N\");\n        }\n\n        if((allFemalePegsCovered || isOnCarpet) && placed) cacheKey += \"-bottomcovered\";\n    }\n\n    // ... (rest of the method remains unchanged)\n}\n\npublic bool IsOnCarpet()\n{\n    return Mathf.Abs((transform.position.y + femaleConnectorParent.transform.localPosition.y) - (-0.065864f)) < 0.001f;\n}\n\nprivate void OnValidate()\n{\n    if (!Application.isEditor || Application.isPlaying) return;\n    \n    maleConnectors.Clear();\n    maleConnectorScripts.Clear();\n    foreach (Transform child in maleConnectorParent.transform)\n    {\n        maleConnectors.Add(child.gameObject);\n        maleConnectorScripts.Add(child.gameObject.GetComponent<LegoConnectorScript>());\n    }\n\n    femaleConnectors.Clear();\n    femaleConnectorScripts.Clear();\n    foreach (Transform child in femaleConnectorParent.transform)\n    {\n        femaleConnectors.Add(child.gameObject);\n        femaleConnectorScripts.Add(child.gameObject.GetComponent<LegoConnectorScript>());\n    }\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "```csharp\n\n    private Color32 CalculateHoverColor(Color32 baseColor) {\n        int difference = (Convert.ToInt32(baseColor.r) + Convert.ToInt32(baseColor.g) + Convert.ToInt32(baseColor.b)) > 300 ? -20 : 20;\n        byte r = (byte)Mathf.Clamp(baseColor.r + difference, 0, 255);\n        byte g = (byte)Mathf.Clamp(baseColor.g + difference, 0, 255);\n        byte b = (byte)Mathf.Clamp(baseColor.b + difference, 0, 255);\n        byte a = baseColor.a;\n\n        return new Color32(r, g, b, a);\n    }\n\n    public Color32 HoverColor => CalculateHoverColor(_color);\n\n    private void Awake() {\n        // ...\n        solidMesh = modularBrickObject.GetSolidMesh(normalPrefabName);\n        hollowMesh = modularBrickObject.GetHollowMesh(normalPrefabName);\n        studMesh = modularBrickObject.GetStudMesh(normalPrefabName);\n\n        originalMaterial = model.GetComponent<MeshRenderer>().sharedMaterial;\n        originalMesh = _modularModel.transform.Find(\"FlatBody\").GetComponentInChildren<MeshFilter>().sharedMesh;\n        // ...\n    }\n\n    private void RecalculateRenderedGeometry() {\n        // ...\n        bool placed = placedBrickRenderer != null;\n        // ...\n    }\n    \n    private bool IsOnCarpet()\n    {\n        return Mathf.Abs((transform.position.y + femaleConnectorParent.transform.localPosition.y) - (-0.065864f)) < 0.001f;\n    }\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "```csharp\nprivate void Awake() {\n    texOffset = Random.Range(0f, 1f);\n    _props = new MaterialPropertyBlock();\n    _brickUuid = GetComponent<BrickUuid>();\n    _userSettings = UserSettings.GetInstance();\n    placedBrickRenderer = GetComponent<PlacedBrickRenderer>();\n    meshFilter = model.GetComponent<MeshFilter>();\n    meshRenderer = model.GetComponent<MeshRenderer>();\n\n    maleConnectorScriptsByName.Clear(); // Clear the dictionary to avoid duplicates on re-awake\n    foreach (Transform child in maleConnectorParent.transform) {\n        var legoConnectorScript = child.gameObject.GetComponent<LegoConnectorScript>();\n        if (legoConnectorScript != null) { // null check to assure a component exists\n            maleConnectorScriptsByName[child.gameObject.name] = legoConnectorScript; // Use assignment instead of Add for Idempotence\n        }\n    }\n\n    ModularBrickObjects modularBrickObject = ModularBrickObjects.GetInstance();\n    // [...the rest of your original Awake method's code...]\n}\n\npublic void RecalculateRenderedGeometry() {\n    bool placed = placedBrickRenderer; // Check if placedBrickRenderer is not null directly\n    bool performanceMode = _userSettings.SuperUltraPerformanceMode;\n\n    StringBuilder cacheKeyBuilder = new StringBuilder(); // Use StringBuilder for memory efficiency\n    cacheKeyBuilder.Append(normalPrefabName);\n\n    bool allFemalePegsCovered = femaleConnectorScripts.All(s => s.covered);\n\n    bool isOnCarpet = IsOnCarpet();\n\n    if (performanceMode)\n    {\n        cacheKeyBuilder.Append(\"perfmode\");\n    }\n    else\n    {\n        foreach (LegoConnectorScript s in maleConnectorScripts)\n        {\n            cacheKeyBuilder.Append((placed && s.covered) ? \"Y\" : \"N\");\n        }\n\n        if((allFemalePegsCovered || isOnCarpet) && placed) cacheKeyBuilder.Append(\"-bottomcovered\");\n    }\n\n    string cacheKey = cacheKeyBuilder.ToString(); // Get the final cache key string\n\n    // [...the rest of your original RecalculateRenderedGeometry method's code...]\n}\n\nprivate void OnValidate()\n{\n    if (!Application.isEditor) return;\n    if (Application.isPlaying) return;\n\n    maleConnectors.Clear(); // Ensure the list is cleared before adding to it\n    maleConnectorScripts.Clear(); // Clear the script list as well\n    foreach (Transform child in maleConnectorParent.transform)\n    {\n        maleConnectors.Add(child.gameObject);\n        var maleConnectorScript = child.gameObject.GetComponent<LegoConnectorScript>();\n        if (maleConnectorScript != null) { // null check to assure a component is obtained\n            maleConnectorScripts.Add(maleConnectorScript);\n        }\n    }\n\n    femaleConnectors.Clear(); // Clear the list to avoid duplicates\n    femaleConnectorScripts.Clear(); // Clear the script list too\n    foreach (Transform child in femaleConnectorParent.transform)\n    {\n        femaleConnectors.Add(child.gameObject);\n        var femaleConnectorScript = child.gameObject.GetComponent<LegoConnectorScript>();\n        if (femaleConnectorScript != null) { // null check to assure a component is obtained\n            femaleConnectorScripts.Add(femaleConnectorScript);\n        }\n    }\n}\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2612,
        "completion_tokens": 2255,
        "total_tokens": 4867
    },
    "system_fingerprint": "fp_e49e4201a9"
}