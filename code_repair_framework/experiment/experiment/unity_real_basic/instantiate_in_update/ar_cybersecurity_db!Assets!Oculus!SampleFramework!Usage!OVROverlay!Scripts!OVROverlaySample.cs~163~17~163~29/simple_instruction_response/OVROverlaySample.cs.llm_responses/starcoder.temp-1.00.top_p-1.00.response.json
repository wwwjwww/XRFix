{
    "code_repairing_0": "Fixed Code:\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System;\n\nnamespace OculusSampleFramework\n{\n\npublic enum EUiDisplayType\n{\n    EUDT_WorldGeoQuad,\n    EUDT_OverlayQuad,\n    EUDT_None,\n    EUDT_MaxDislayTypes\n}\n\npublic class OVROverlaySample : MonoBehaviour\n{\n    bool inMenu;\n\n    const string ovrOverlayID = \"OVROverlayID\";\n\n    const string applicationID = \"ApplicationID\";\n    const string noneID = \"NoneID\";\n\n    Toggle applicationRadioButton;\n\n    Toggle noneRadioButton;\n\n    [Header(\"App vs Compositor Comparison Settings\")]\n\n    public GameObject mainCamera;\n\n    public GameObject uiCamera;\n\n    public GameObject uiGeoParent;\n    public GameObject worldspaceGeoParent;\n\n    public OVROverlay cameraRenderOverlay;\n\n    public OVROverlay renderingLabelOverlay;\n\n    public Texture applicationLabelTexture;\n    public Texture compositorLabelTexture;\n\n    [Header(\"Level Loading Sim Settings\")]\n    public GameObject prefabForLevelLoadSim;\n    public OVROverlay cubemapOverlay;\n    public OVROverlay loadingTextQuadOverlay;\n    public float distanceFromCamToLoadText;\n    public float cubeSpawnRadius;\n    public float heightBetweenItems;\n    public int numObjectsPerLevel;\n    public int numLevels;\n    public int numLoopsTrigger = 500000000;\n    List<GameObject> spawnedCubes = new List<GameObject>();\n\n    #region MonoBehaviour handler\n\n    void Start()\n    {\n        DebugUIBuilder.instance.AddLabel(\"OVROverlay Sample\");\n        DebugUIBuilder.instance.AddDivider();\n        DebugUIBuilder.instance.AddLabel(\"Level Loading Example\");\n        DebugUIBuilder.instance.AddButton(\"Simulate Level Load\", TriggerLoad);\n        DebugUIBuilder.instance.AddButton(\"Destroy Cubes\", TriggerUnload);\n        DebugUIBuilder.instance.AddDivider();\n        DebugUIBuilder.instance.AddLabel(\"OVROverlay vs. Application Render Comparison\");\n        DebugUIBuilder.instance\n           .AddRadio(\"OVROverlay\", \"group\", delegate(Toggle t) { RadioPressed(ovrOverlayID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n        applicationRadioButton = DebugUIBuilder.instance\n           .AddRadio(\"Application\", \"group\", delegate(Toggle t) { RadioPressed(applicationID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n        noneRadioButton = DebugUIBuilder.instance\n           .AddRadio(\"None\", \"group\", delegate(Toggle t) { RadioPressed(noneID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n\n        DebugUIBuilder.instance.Show();\n\n        CameraAndRenderTargetSetup();\n        cameraRenderOverlay.enabled = true;\n        cameraRenderOverlay.currentOverlayShape = OVROverlay.OverlayShape.Quad;\n        spawnedCubes.Capacity = numObjectsPerLevel * numLevels;\n    }\n\n    void Update()\n    {\n        if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\n        {\n            if (inMenu) DebugUIBuilder.instance.Hide();\n            else DebugUIBuilder.instance.Show();\n            inMenu =!inMenu;\n        }\n\n\n        if (Input.GetKeyDown(KeyCode.A))\n        {\n            TriggerLoad();\n        }\n    }\n\n    #endregion\n\n    #region Private Functions\n\n    void ActivateWorldGeo()\n    {\n        worldspaceGeoParent.SetActive(true);\n        uiGeoParent.SetActive(false);\n        uiCamera.SetActive(false);\n        cameraRenderOverlay.enabled = false;\n        renderingLabelOverlay.enabled = true;\n        renderingLabelOverlay.textures[0] = applicationLabelTexture;\n        Debug.Log(\"Switched to ActivateWorldGeo\");\n    }\n\n    void ActivateOVROverlay()\n    {\n        worldspaceGeoParent.SetActive(false);\n        uiCamera.SetActive(true);\n        cameraRenderOverlay.enabled = true;\n        uiGeoParent.SetActive(true);\n        renderingLabelOverlay.enabled = true;\n        renderingLabelOverlay.textures[0] = compositorLabelTexture;\n        Debug.Log(\"Switched to ActivateOVROVerlay\");\n    }\n\n    void ActivateNone()\n    {\n        worldspaceGeoParent.SetActive(false);\n        uiCamera.SetActive(false);\n        cameraRenderOverlay.enabled = false;\n        uiGeoParent.SetActive(false);\n        renderingLabelOverlay.enabled = false;\n        Debug.Log(\"Switched to ActivateNone\");\n    }\n\n    void TriggerLoad()\n    {\n        StartCoroutine(WaitforOVROverlay());\n    }\n\n    IEnumerator WaitforOVROverlay()\n    {\n        Transform camTransform = mainCamera.transform;\n        Transform uiTextOverlayTrasnform = loadingTextQuadOverlay.transform;\n        Vector3 newPos = camTransform.position + camTransform.forward * distanceFromCamToLoadText;\n        newPos.y = camTransform.position.y;\n        uiTextOverlayTrasnform.position = newPos;\n        cubemapOverlay.enabled = true;\n        loadingTextQuadOverlay.enabled = true;\n        noneRadioButton.isOn = true;\n        yield return new WaitForSeconds(0.1f);\n        ClearObjects();\n        SimulateLevelLoad();\n        cubemapOverlay.enabled = false;\n        loadingTextQuadOverlay.enabled = false;\n        yield return null;\n    }\n\n    void TriggerUnload()\n    {\n        ClearObjects();\n        applicationRadioButton.isOn = true;\n    }\n\n    void CameraAndRenderTargetSetup()\n    {\n        float overlayWidth = cameraRenderOverlay.transform.localScale.x;\n        float overlayHeight = cameraRenderOverlay.transform.localScale.y;\n        float overlayRadius = cameraRenderOverlay.transform.localScale.z;\n\n#if UNITY_ANDROID\n\n        float hmdPanelResWidth = 2560;\n        float hmdPanelResHeight = 1440;\n#else\n\n        float hmdPanelResWidth = 2160;\n        float hmdPanelResHeight = 1200;\n#endif\n\n        float singleEyeScreenPhysicalResX = hmdPanelResWidth * 0.5f;\n        float singleEyeScreenPhysicalResY = hmdPanelResHeight;\n\n\n\n\n        float halfFovY = mainCamera.GetComponent<Camera>().fieldOfView / 2;\n        float screenSizeYInWorld = 2 * overlayRadius * Mathf.Tan(Mathf.Deg2Rad * halfFovY);\n        float pixelDensityYPerWorldUnit = singleEyeScreenPhysicalResY / screenSizeYInWorld;\n        float renderTargetHeight = pixelDensityYPerWorldUnit * overlayWidth;\n\n\n        float renderTargetWidth = 0.0f;\n\n\n\n\n        float screenSizeXInWorld = screenSizeYInWorld * mainCamera.GetComponent<Camera>().aspect;\n        float pixelDensityXPerWorldUnit = singleEyeScreenPhysicalResX / screenSizeXInWorld;\n        renderTargetWidth = pixelDensityXPerWorldUnit * overlayWidth;\n\n\n        float orthographicSize = overlayHeight / 2.0f;\n        float orthoCameraAspect = overlayWidth / overlayHeight;\n        uiCamera.GetComponent<Camera>().orthographicSize = orthographicSize;\n        uiCamera.GetComponent<Camera>().aspect = orthoCameraAspect;\n\n        if (uiCamera.GetComponent<Camera>().targetTexture!= null)\n            uiCamera.GetComponent<Camera>().targetTexture.Release();\n\n        RenderTexture overlayRT = new RenderTexture(\n            (int)renderTargetWidth * 2,\n            (int)renderTargetHeight * 2,\n            0,\n            RenderTextureFormat.ARGB32,\n            RenderTextureReadWrite.sRGB);\n        Debug.Log(\"Created RT of resolution w: \" + renderTargetWidth + \" and h: \" + renderTargetHeight);\n\n        overlayRT.hideFlags = HideFlags.DontSave;\n        overlayRT.useMipMap = true;\n        overlayRT.filterMode = FilterMode.Trilinear;\n        overlayRT.anisoLevel = 4;\n#if UNITY_5_5_OR_NEWER\n        overlayRT.autoGenerateMips = true;\n#else\n        overlayRT.generateMips = true;\n#endif\n        uiCamera.GetComponent<Camera>().targetTexture = overlayRT;\n\n        cameraRenderOverlay.textures[0] = overlayRT;\n    }\n\n    void SimulateLevelLoad()\n    {\n        int numToPrint = 0;\n        for (int p = 0; p < numLoopsTrigger; p++)\n        {\n            numToPrint++;\n        }\n\n        Debug.Log(\"Finished \" + numToPrint + \" Loops\");\n        Vector3 playerPos = mainCamera.transform.position;\n        playerPos.y = 0.5f;\n\n        for (int j = 0; j < numLevels; j++)\n        {\n            for (var i = 0; i < numObjectsPerLevel; i++)\n            {\n                var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\n                float stagger = (i % 2 == 0)? 1.5f : 1.0f;\n                var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\n                pos.y = j * heightBetweenItems;\n                var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\n                var newObjTransform = newInst.transform;\n                newObjTransform.LookAt(playerPos);\n                Vector3 newAngle = newObjTransform.rotation.eulerAngles;\n                newAngle.x = 0.0f;\n                newObjTransform.rotation = Quaternion.Euler(newAngle);\n                spawnedCubes.Add(newInst);\n            }\n        }\n    }\n\n    void ClearObjects()\n    {\n        foreach (var go in spawnedCubes)\n        {\n            Destroy(go);\n        }\n        spawnedCubes.Clear();\n    }\n}\n\n}",
    "code_repairing_1": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System;\n\nnamespace OculusSampleFramework\n{\n\n\n\n    public enum EUiDisplayType\n    {\n        EUDT_WorldGeoQuad,\n        EUDT_OverlayQuad,\n        EUDT_None,\n        EUDT_MaxDislayTypes\n    }\n\n\n\n\n\n\n\n\n\n\n\n    public class OVROverlaySample : MonoBehaviour\n    {\n        bool inMenu;\n\n\n\n\n        const string ovrOverlayID = \"OVROverlayID\";\n\n        const string applicationID = \"ApplicationID\";\n        const string noneID = \"NoneID\";\n\n\n\n\n        Toggle applicationRadioButton;\n\n        Toggle noneRadioButton;\n\n        [Header(\"App vs Compositor Comparison Settings\")]\n\n\n\n        public GameObject mainCamera;\n\n\n\n\n        public GameObject uiCamera;\n\n\n\n\n        public GameObject uiGeoParent;\n\n        public GameObject worldspaceGeoParent;\n\n\n\n\n        public OVROverlay cameraRenderOverlay;\n\n\n\n\n        public OVROverlay renderingLabelOverlay;\n\n\n\n\n        public Texture applicationLabelTexture;\n\n        public Texture compositorLabelTexture;\n\n\n\n\n        [Header(\"Level Loading Sim Settings\")]\n        public GameObject prefabForLevelLoadSim;\n\n        public OVROverlay cubemapOverlay;\n        public OVROverlay loadingTextQuadOverlay;\n        public float distanceFromCamToLoadText;\n        public float cubeSpawnRadius;\n        public float heightBetweenItems;\n        public int numObjectsPerLevel;\n        public int numLevels;\n        public int numLoopsTrigger = 500000000;\n        List<GameObject> spawnedCubes = new List<GameObject>();\n\n        #region MonoBehaviour handler\n\n        void Start()\n        {\n            DebugUIBuilder.instance.AddLabel(\"OVROverlay Sample\");\n            DebugUIBuilder.instance.AddDivider();\n            DebugUIBuilder.instance.AddLabel(\"Level Loading Example\");\n            DebugUIBuilder.instance.AddButton(\"Simulate Level Load\", TriggerLoad);\n            DebugUIBuilder.instance.AddButton(\"Destroy Cubes\", TriggerUnload);\n            DebugUIBuilder.instance.AddDivider();\n            DebugUIBuilder.instance.AddLabel(\"OVROverlay vs. Application Render Comparison\");\n            DebugUIBuilder.instance\n               .AddRadio(\"OVROverlay\", \"group\", delegate(Toggle t) { RadioPressed(ovrOverlayID, \"group\", t); })\n               .GetComponentInChildren<Toggle>();\n            applicationRadioButton = DebugUIBuilder.instance\n               .AddRadio(\"Application\", \"group\", delegate(Toggle t) { RadioPressed(applicationID, \"group\", t); })\n               .GetComponentInChildren<Toggle>();\n            noneRadioButton = DebugUIBuilder.instance\n               .AddRadio(\"None\", \"group\", delegate(Toggle t) { RadioPressed(noneID, \"group\", t); })\n               .GetComponentInChildren<Toggle>();\n\n            DebugUIBuilder.instance.Show();\n\n\n            CameraAndRenderTargetSetup();\n            cameraRenderOverlay.enabled = true;\n            cameraRenderOverlay.currentOverlayShape = OVROverlay.OverlayShape.Quad;\n            spawnedCubes.Capacity = numObjectsPerLevel * numLevels;\n        }\n\n        void Update()\n        {\n\n            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\n            {\n                if (inMenu) DebugUIBuilder.instance.Hide();\n                else DebugUIBuilder.instance.Show();\n                inMenu =!inMenu;\n            }\n\n\n            if (Input.GetKeyDown(KeyCode.A))\n            {\n                TriggerLoad();\n            }\n        }\n\n        #endregion\n\n        #region Private Functions\n\n\n\n\n        void ActivateWorldGeo()\n        {\n            worldspaceGeoParent.SetActive(true);\n            uiGeoParent.SetActive(false);\n            uiCamera.SetActive(false);\n            cameraRenderOverlay.enabled = false;\n            renderingLabelOverlay.enabled = true;\n            renderingLabelOverlay.textures[0] = applicationLabelTexture;\n            Debug.Log(\"Switched to ActivateWorldGeo\");\n        }\n\n\n\n\n        void ActivateOVROverlay()\n        {\n            worldspaceGeoParent.SetActive(false);\n            uiCamera.SetActive(true);\n            cameraRenderOverlay.enabled = true;\n            uiGeoParent.SetActive(true);\n            renderingLabelOverlay.enabled = true;\n            renderingLabelOverlay.textures[0] = compositorLabelTexture;\n            Debug.Log(\"Switched to ActivateOVROVerlay\");\n        }\n\n\n\n\n        void ActivateNone()\n        {\n            worldspaceGeoParent.SetActive(false);\n            uiCamera.SetActive(false);\n            cameraRenderOverlay.enabled = false;\n            uiGeoParent.SetActive(false);\n            renderingLabelOverlay.enabled = false;\n            Debug.Log(\"Switched to ActivateNone\");\n        }\n\n\n\n\n\n\n\n        void TriggerLoad()\n        {\n            StartCoroutine(WaitforOVROverlay());\n        }\n\n        IEnumerator WaitforOVROverlay()\n        {\n            Transform camTransform = mainCamera.transform;\n            Transform uiTextOverlayTrasnform = loadingTextQuadOverlay.transform;\n            Vector3 newPos = camTransform.position + camTransform.forward * distanceFromCamToLoadText;\n            newPos.y = camTransform.position.y;\n            uiTextOverlayTrasnform.position = newPos;\n            cubemapOverlay.enabled = true;\n            loadingTextQuadOverlay.enabled = true;\n            noneRadioButton.isOn = true;\n            yield return new WaitForSeconds(0.1f);\n            ClearObjects();\n            SimulateLevelLoad();\n            cubemapOverlay.enabled = false;\n            loadingTextQuadOverlay.enabled = false;\n            yield return null;\n        }\n\n\n\n\n\n        void TriggerUnload()\n        {\n            ClearObjects();\n            applicationRadioButton.isOn = true;\n        }\n\n\n\n\n        void CameraAndRenderTargetSetup()\n        {\n            float overlayWidth = cameraRenderOverlay.transform.localScale.x;\n            float overlayHeight = cameraRenderOverlay.transform.localScale.y;\n            float overlayRadius = cameraRenderOverlay.transform.localScale.z;\n\n#if UNITY_ANDROID\n\n            float hmdPanelResWidth = 2560;\n            float hmdPanelResHeight = 1440;\n#else\n\n            float hmdPanelResWidth = 2160;\n            float hmdPanelResHeight = 1200;\n#endif\n\n            float singleEyeScreenPhysicalResX = hmdPanelResWidth * 0.5f;\n            float singleEyeScreenPhysicalResY = hmdPanelResHeight;\n\n\n\n\n\n            float halfFovY = mainCamera.GetComponent<Camera>().fieldOfView / 2;\n            float screenSizeYInWorld = 2 * overlayRadius * Mathf.Tan(Mathf.Deg2Rad * halfFovY);\n            float pixelDensityYPerWorldUnit = singleEyeScreenPhysicalResY / screenSizeYInWorld;\n            float renderTargetHeight = pixelDensityYPerWorldUnit * overlayWidth;\n\n\n            float renderTargetWidth = 0.0f;\n\n\n\n\n            float screenSizeXInWorld = screenSizeYInWorld * mainCamera.GetComponent<Camera>().aspect;\n            float pixelDensityXPerWorldUnit = singleEyeScreenPhysicalResX / screenSizeXInWorld;\n            renderTargetWidth = pixelDensityXPerWorldUnit * overlayWidth;\n\n\n            float orthographicSize = overlayHeight / 2.0f;\n            float orthoCameraAspect = overlayWidth / overlayHeight;\n            uiCamera.GetComponent<Camera>().orthographicSize = orthographicSize;\n            uiCamera.GetComponent<Camera>().aspect = orthoCameraAspect;\n\n            if (uiCamera.GetComponent<Camera>().targetTexture!= null)\n                uiCamera.GetComponent<Camera>().targetTexture.Release();\n\n            RenderTexture overlayRT = new RenderTexture(\n                (int)renderTargetWidth * 2,\n                (int)renderTargetHeight * 2,\n                0,\n                RenderTextureFormat.ARGB32,\n                RenderTextureReadWrite.sRGB);\n            Debug.Log(\"Created RT of resolution w: \" + renderTargetWidth + \" and h: \" + renderTargetHeight);\n\n            overlayRT.hideFlags = HideFlags.DontSave;\n            overlayRT.useMipMap = true;\n            overlayRT.filterMode = FilterMode.Trilinear;\n            overlayRT.anisoLevel = 4;\n#if UNITY_5_5_OR_NEWER\n            overlayRT.autoGenerateMips = true;\n#else\n        overlayRT.generateMips = true;\n#endif\n            uiCamera.GetComponent<Camera>().targetTexture = overlayRT;\n\n            cameraRenderOverlay.textures[0] = overlayRT;\n        }\n\n\n\n\n\n//        void SimulateLevelLoad()\n//        {\n//            int numToPrint = 0;\n//            for (int p = 0; p < numLoopsTrigger; p++)\n//            {\n//                numToPrint++;\n//            }\n//\n//            Debug.Log(\"Finished \" + numToPrint + \" Loops\");\n//            Vector3 playerPos = mainCamera.transform.position;\n//            playerPos.y = 0.5f;\n//\n//            for (int j = 0; j < numLevels; j++)\n//            {\n//                for (var i = 0; i < numObjectsPerLevel; i++)\n//                {\n//                    var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\n//                    float stagger = (i % 2 == 0)? 1.5f : 1.0f;\n//                    var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\n//                    pos.y = j * heightBetweenItems;\n//                    var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\n//                    var newObjTransform = newInst.transform;\n//                    newObjTransform.LookAt(playerPos);\n//                    Vector3 newAngle = newObjTransform.rotation.eulerAngles;\n//                    newAngle.x = 0.0f;\n//                    newObjTransform.rotation = Quaternion.Euler(newAngle",
    "code_repairing_2": "#region MonoBehaviour handler\n\n    void Start()\n    {\n        DebugUIBuilder.instance.AddLabel(\"OVROverlay Sample\");\n        DebugUIBuilder.instance.AddDivider();\n        DebugUIBuilder.instance.AddLabel(\"Level Loading Example\");\n        DebugUIBuilder.instance.AddButton(\"Simulate Level Load\", TriggerLoad);\n        DebugUIBuilder.instance.AddButton(\"Destroy Cubes\", TriggerUnload);\n        DebugUIBuilder.instance.AddDivider();\n        DebugUIBuilder.instance.AddLabel(\"OVROverlay vs. Application Render Comparison\");\n        DebugUIBuilder.instance\n           .AddRadio(\"OVROverlay\", \"group\", delegate(Toggle t) { RadioPressed(ovrOverlayID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n        applicationRadioButton = DebugUIBuilder.instance\n           .AddRadio(\"Application\", \"group\", delegate(Toggle t) { RadioPressed(applicationID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n        noneRadioButton = DebugUIBuilder.instance\n           .AddRadio(\"None\", \"group\", delegate(Toggle t) { RadioPressed(noneID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n\n        DebugUIBuilder.instance.Show();\n\n\n        CameraAndRenderTargetSetup();\n        cameraRenderOverlay.enabled = true;\n        cameraRenderOverlay.currentOverlayShape = OVROverlay.OverlayShape.Quad;\n        spawnedCubes.Capacity = numObjectsPerLevel * numLevels;\n    }\n\n//        void Update()\n//        {\n//\n//            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\n//            {\n//                if (inMenu) DebugUIBuilder.instance.Hide();\n//                else DebugUIBuilder.instance.Show();\n//                inMenu =!inMenu;\n//            }\n//\n//\n//            if (Input.GetKeyDown(KeyCode.A))\n//            {\n//                TriggerLoad();\n//            }\n//        }\n\n    #endregion\n\n    #region Private Functions\n\n    const string ovrOverlayID = \"OVROverlayID\";\n\n    const string applicationID = \"ApplicationID\";\n    const string noneID = \"NoneID\";\n\n    bool inMenu;\n\n    Toggle applicationRadioButton;\n\n    Toggle noneRadioButton;\n\n    [Header(\"App vs Compositor Comparison Settings\")]\n\n    public GameObject mainCamera;\n\n    public GameObject uiCamera;\n\n    public GameObject uiGeoParent;\n\n    public GameObject worldspaceGeoParent;\n\n    public OVROverlay cameraRenderOverlay;\n\n    public OVROverlay renderingLabelOverlay;\n\n    public Texture applicationLabelTexture;\n\n    public Texture compositorLabelTexture;\n\n    [Header(\"Level Loading Sim Settings\")]\n    public GameObject prefabForLevelLoadSim;\n\n    public OVROverlay cubemapOverlay;\n    public OVROverlay loadingTextQuadOverlay;\n    public float distanceFromCamToLoadText;\n    public float cubeSpawnRadius;\n    public float heightBetweenItems;\n    public int numObjectsPerLevel;\n    public int numLevels;\n    public int numLoopsTrigger = 500000000;\n    List<GameObject> spawnedCubes = new List<GameObject>();\n\n    void Start()\n    {\n        DebugUIBuilder.instance.AddLabel(\"OVROverlay Sample\");\n        DebugUIBuilder.instance.AddDivider();\n        DebugUIBuilder.instance.AddLabel(\"Level Loading Example\");\n        DebugUIBuilder.instance.AddButton(\"Simulate Level Load\", TriggerLoad);\n        DebugUIBuilder.instance.AddButton(\"Destroy Cubes\", TriggerUnload);\n        DebugUIBuilder.instance.AddDivider();\n        DebugUIBuilder.instance.AddLabel(\"OVROverlay vs. Application Render Comparison\");\n        DebugUIBuilder.instance\n           .AddRadio(\"OVROverlay\", \"group\", delegate(Toggle t) { RadioPressed(ovrOverlayID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n        applicationRadioButton = DebugUIBuilder.instance\n           .AddRadio(\"Application\", \"group\", delegate(Toggle t) { RadioPressed(applicationID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n        noneRadioButton = DebugUIBuilder.instance\n           .AddRadio(\"None\", \"group\", delegate(Toggle t) { RadioPressed(noneID, \"group\", t); })\n           .GetComponentInChildren<Toggle>();\n\n        DebugUIBuilder.instance.Show();\n\n\n        CameraAndRenderTargetSetup();\n        cameraRenderOverlay.enabled = true;\n        cameraRenderOverlay.currentOverlayShape = OVROverlay.OverlayShape.Quad;\n        spawnedCubes.Capacity = numObjectsPerLevel * numLevels;\n    }\n\n    void Update()\n    {\n\n        if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\n        {\n            if (inMenu) DebugUIBuilder.instance.Hide();\n            else DebugUIBuilder.instance.Show();\n            inMenu =!inMenu;\n        }\n\n\n\n        if (Input.GetKeyDown(KeyCode.A))\n        {\n            TriggerLoad();\n        }\n    }\n\n    void CameraAndRenderTargetSetup()\n    {\n        float overlayWidth = cameraRenderOverlay.transform.localScale.x;\n        float overlayHeight = cameraRenderOverlay.transform.localScale.y;\n        float overlayRadius = cameraRenderOverlay.transform.localScale.z;\n\n#if UNITY_ANDROID\n\n        float hmdPanelResWidth = 2560;\n        float hmdPanelResHeight = 1440;\n#else\n\n        float hmdPanelResWidth = 2160;\n        float hmdPanelResHeight = 1200;\n#endif\n\n        float singleEyeScreenPhysicalResX = hmdPanelResWidth * 0.5f;\n        float singleEyeScreenPhysicalResY = hmdPanelResHeight;\n\n\n\n\n\n        float halfFovY = mainCamera.GetComponent<Camera>().fieldOfView / 2;\n        float screenSizeYInWorld = 2 * overlayRadius * Mathf.Tan(Mathf.Deg2Rad * halfFovY);\n        float pixelDensityYPerWorldUnit = singleEyeScreenPhysicalResY / screenSizeYInWorld;\n        float renderTargetHeight = pixelDensityYPerWorldUnit * overlayWidth;\n\n\n        float renderTargetWidth = 0.0f;\n\n\n\n\n        float screenSizeXInWorld = screenSizeYInWorld * mainCamera.GetComponent<Camera>().aspect;\n        float pixelDensityXPerWorldUnit = singleEyeScreenPhysicalResX / screenSizeXInWorld;\n        renderTargetWidth = pixelDensityXPerWorldUnit * overlayWidth;\n\n\n        float orthographicSize = overlayHeight / 2.0f;\n        float orthoCameraAspect = overlayWidth / overlayHeight;\n        uiCamera.GetComponent<Camera>().orthographicSize = orthographicSize;\n        uiCamera.GetComponent<Camera>().aspect = orthoCameraAspect;\n\n        if (uiCamera.GetComponent<Camera>().targetTexture!= null)\n            uiCamera.GetComponent<Camera>().targetTexture.Release();\n\n        RenderTexture overlayRT = new RenderTexture(\n            (int)renderTargetWidth * 2,\n            (int)renderTargetHeight * 2,\n            0,\n            RenderTextureFormat.ARGB32,\n            RenderTextureReadWrite.sRGB);\n        Debug.Log(\"Created RT of resolution w: \" + renderTargetWidth + \" and h: \" + renderTargetHeight);\n\n        overlayRT.hideFlags = HideFlags.DontSave;\n        overlayRT.useMipMap = true;\n        overlayRT.filterMode = FilterMode.Trilinear;\n        overlayRT.anisoLevel = 4;\n#if UNITY_5_5_OR_NEWER\n        overlayRT.autoGenerateMips = true;\n#else\n        overlayRT.generateMips = true;\n#endif\n        uiCamera.GetComponent<Camera>().targetTexture = overlayRT;\n\n        cameraRenderOverlay.textures[0] = overlayRT;\n    }\n\n    void TriggerLoad()\n    {\n        StartCoroutine(WaitforOVROverlay());\n    }\n\n    IEnumerator WaitforOVROverlay()\n    {\n        Transform camTransform = mainCamera.transform;\n        Transform uiTextOverlayTrasnform = loadingTextQuadOverlay.transform;\n        Vector3 newPos = camTransform.position + camTransform.forward * distanceFromCamToLoadText;\n        newPos.y = camTransform.position.y;\n        uiTextOverlayTrasnform.position = newPos;\n        cubemapOverlay.enabled = true;\n        loadingTextQuadOverlay.enabled = true;\n        noneRadioButton.isOn = true;\n        yield return new WaitForSeconds(0.1f);\n        ClearObjects();\n        SimulateLevelLoad();\n        cubemapOverlay.enabled = false;\n        loadingTextQuadOverlay.enabled = false;\n        yield return null;\n    }\n\n    void TriggerUnload()\n    {\n        ClearObjects();\n        applicationRadioButton.isOn = true;\n    }\n\n    void SimulateLevelLoad()\n    {\n        int numToPrint = 0;\n        for (int p = 0; p < numLoopsTrigger; p++)\n        {\n            numToPrint++;\n        }\n\n        Debug.Log(\"Finished \" + numToPrint + \" Loops\");\n        Vector3 playerPos = mainCamera.transform.position;\n        playerPos.y = 0.5f;\n\n        for (int j = 0; j < numLevels; j++)\n        {\n            for (var i = 0; i < numObjectsPerLevel; i++)\n            {\n                var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\n                float stagger = (i % 2 == 0)? 1.5f : 1.0f;\n                var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\n                pos.y = j * heightBetweenItems;\n                var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\n                var newObjTransform = newInst.transform;\n                newObjTransform.LookAt(",
    "code_repairing_3": "//Here're the fixed code lines from /Assets/Oculus/SampleFramework/Usage/OVROverlay/Scripts/OVROverlaySample.cs:\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System;\n\nnamespace OculusSampleFramework\n{\n\n    public enum EUiDisplayType\n    {\n        EUDT_WorldGeoQuad,\n        EUDT_OverlayQuad,\n        EUDT_None,\n        EUDT_MaxDislayTypes\n    }\n\n    public class OVROverlaySample : MonoBehaviour\n    {\n        bool inMenu;\n\n        const string ovrOverlayID = \"OVROverlayID\";\n\n        const string applicationID = \"ApplicationID\";\n        const string noneID = \"NoneID\";\n\n        Toggle applicationRadioButton;\n\n        Toggle noneRadioButton;\n\n        [Header(\"App vs Compositor Comparison Settings\")]\n\n        public GameObject mainCamera;\n\n        public GameObject uiCamera;\n\n        public GameObject uiGeoParent;\n\n        public GameObject worldspaceGeoParent;\n\n        public OVROverlay cameraRenderOverlay;\n\n        public OVROverlay renderingLabelOverlay;\n\n        public Texture applicationLabelTexture;\n\n        public Texture compositorLabelTexture;\n\n        [Header(\"Level Loading Sim Settings\")]\n        public GameObject prefabForLevelLoadSim;\n\n        public OVROverlay cubemapOverlay;\n        public OVROverlay loadingTextQuadOverlay;\n        public float distanceFromCamToLoadText;\n        public float cubeSpawnRadius;\n        public float heightBetweenItems;\n        public int numObjectsPerLevel;\n        public int numLevels;\n        public int numLoopsTrigger = 500000000;\n        List<GameObject> spawnedCubes = new List<GameObject>();\n\n        #region MonoBehaviour handler\n\n        void Start()\n        {\n            DebugUIBuilder.instance.AddLabel(\"OVROverlay Sample\");\n            DebugUIBuilder.instance.AddDivider();\n            DebugUIBuilder.instance.AddLabel(\"Level Loading Example\");\n            DebugUIBuilder.instance.AddButton(\"Simulate Level Load\", TriggerLoad);\n            DebugUIBuilder.instance.AddButton(\"Destroy Cubes\", TriggerUnload);\n            DebugUIBuilder.instance.AddDivider();\n            DebugUIBuilder.instance.AddLabel(\"OVROverlay vs. Application Render Comparison\");\n            DebugUIBuilder.instance\n               .AddRadio(\"OVROverlay\", \"group\", delegate(Toggle t) { RadioPressed(ovrOverlayID, \"group\", t); })\n               .GetComponentInChildren<Toggle>();\n            applicationRadioButton = DebugUIBuilder.instance\n               .AddRadio(\"Application\", \"group\", delegate(Toggle t) { RadioPressed(applicationID, \"group\", t); })\n               .GetComponentInChildren<Toggle>();\n            noneRadioButton = DebugUIBuilder.instance\n               .AddRadio(\"None\", \"group\", delegate(Toggle t) { RadioPressed(noneID, \"group\", t); })\n               .GetComponentInChildren<Toggle>();\n\n            DebugUIBuilder.instance.Show();\n\n            CameraAndRenderTargetSetup();\n            cameraRenderOverlay.enabled = true;\n            cameraRenderOverlay.currentOverlayShape = OVROverlay.OverlayShape.Quad;\n            spawnedCubes.Capacity = numObjectsPerLevel * numLevels;\n        }\n\n        void Update()\n        {\n            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\n            {\n                if (inMenu) DebugUIBuilder.instance.Hide();\n                else DebugUIBuilder.instance.Show();\n                inMenu =!inMenu;\n            }\n\n            if (Input.GetKeyDown(KeyCode.A))\n            {\n                TriggerLoad();\n            }\n        }\n\n        #endregion\n\n        #region Private Functions\n\n        void ActivateWorldGeo()\n        {\n            worldspaceGeoParent.SetActive(true);\n            uiGeoParent.SetActive(false);\n            uiCamera.SetActive(false);\n            cameraRenderOverlay.enabled = false;\n            renderingLabelOverlay.enabled = true;\n            renderingLabelOverlay.textures[0] = applicationLabelTexture;\n            Debug.Log(\"Switched to ActivateWorldGeo\");\n        }\n\n        void ActivateOVROverlay()\n        {\n            worldspaceGeoParent.SetActive(false);\n            uiCamera.SetActive(true);\n            cameraRenderOverlay.enabled = true;\n            uiGeoParent.SetActive(true);\n            renderingLabelOverlay.enabled = true;\n            renderingLabelOverlay.textures[0] = compositorLabelTexture;\n            Debug.Log(\"Switched to ActivateOVROVerlay\");\n        }\n\n        void ActivateNone()\n        {\n            worldspaceGeoParent.SetActive(false);\n            uiCamera.SetActive(false);\n            cameraRenderOverlay.enabled = false;\n            uiGeoParent.SetActive(false);\n            renderingLabelOverlay.enabled = false;\n            Debug.Log(\"Switched to ActivateNone\");\n        }\n\n        void TriggerLoad()\n        {\n            StartCoroutine(WaitforOVROverlay());\n        }\n\n        IEnumerator WaitforOVROverlay()\n        {\n            Transform camTransform = mainCamera.transform;\n            Transform uiTextOverlayTrasnform = loadingTextQuadOverlay.transform;\n            Vector3 newPos = camTransform.position + camTransform.forward * distanceFromCamToLoadText;\n            newPos.y = camTransform.position.y;\n            uiTextOverlayTrasnform.position = newPos;\n            cubemapOverlay.enabled = true;\n            loadingTextQuadOverlay.enabled = true;\n            noneRadioButton.isOn = true;\n            yield return new WaitForSeconds(0.1f);\n            ClearObjects();\n            SimulateLevelLoad();\n            cubemapOverlay.enabled = false;\n            loadingTextQuadOverlay.enabled = false;\n            yield return null;\n        }\n\n        void TriggerUnload()\n        {\n            ClearObjects();\n            applicationRadioButton.isOn = true;\n        }\n\n        void CameraAndRenderTargetSetup()\n        {\n            float overlayWidth = cameraRenderOverlay.transform.localScale.x;\n            float overlayHeight = cameraRenderOverlay.transform.localScale.y;\n            float overlayRadius = cameraRenderOverlay.transform.localScale.z;\n\n#if UNITY_ANDROID\n\n            float hmdPanelResWidth = 2560;\n            float hmdPanelResHeight = 1440;\n#else\n\n            float hmdPanelResWidth = 2160;\n            float hmdPanelResHeight = 1200;\n#endif\n\n            float singleEyeScreenPhysicalResX = hmdPanelResWidth * 0.5f;\n            float singleEyeScreenPhysicalResY = hmdPanelResHeight;\n\n\n\n            float halfFovY = mainCamera.GetComponent<Camera>().fieldOfView / 2;\n            float screenSizeYInWorld = 2 * overlayRadius * Mathf.Tan(Mathf.Deg2Rad * halfFovY);\n            float pixelDensityYPerWorldUnit = singleEyeScreenPhysicalResY / screenSizeYInWorld;\n            float renderTargetHeight = pixelDensityYPerWorldUnit * overlayWidth;\n\n\n            float renderTargetWidth = 0.0f;\n\n\n\n\n            float screenSizeXInWorld = screenSizeYInWorld * mainCamera.GetComponent<Camera>().aspect;\n            float pixelDensityXPerWorldUnit = singleEyeScreenPhysicalResX / screenSizeXInWorld;\n            renderTargetWidth = pixelDensityXPerWorldUnit * overlayWidth;\n\n\n            float orthographicSize = overlayHeight / 2.0f;\n            float orthoCameraAspect = overlayWidth / overlayHeight;\n            uiCamera.GetComponent<Camera>().orthographicSize = orthographicSize;\n            uiCamera.GetComponent<Camera>().aspect = orthoCameraAspect;\n\n            if (uiCamera.GetComponent<Camera>().targetTexture!= null)\n                uiCamera.GetComponent<Camera>().targetTexture.Release();\n\n            RenderTexture overlayRT = new RenderTexture(\n                (int)renderTargetWidth * 2,\n                (int)renderTargetHeight * 2,\n                0,\n                RenderTextureFormat.ARGB32,\n                RenderTextureReadWrite.sRGB);\n            Debug.Log(\"Created RT of resolution w: \" + renderTargetWidth + \" and h: \" + renderTargetHeight);\n\n            overlayRT.hideFlags = HideFlags.DontSave;\n            overlayRT.useMipMap = true;\n            overlayRT.filterMode = FilterMode.Trilinear;\n            overlayRT.anisoLevel = 4;\n#if UNITY_5_5_OR_NEWER\n            overlayRT.autoGenerateMips = true;\n#else\n            overlayRT.generateMips = true;\n#endif\n            uiCamera.GetComponent<Camera>().targetTexture = overlayRT;\n\n            cameraRenderOverlay.textures[0] = overlayRT;\n        }\n\n        void SimulateLevelLoad()\n        {\n            int numToPrint = 0;\n            for (int p = 0; p < numLoopsTrigger; p++)\n            {\n                numToPrint++;\n            }\n\n            Debug.Log(\"Finished \" + numToPrint + \" Loops\");\n            Vector3 playerPos = mainCamera.transform.position;\n            playerPos.y = 0.5f;\n\n            for (int j = 0; j < numLevels; j++)\n            {\n                for (var i = 0; i < numObjectsPerLevel; i++)\n                {\n                    var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\n                    float stagger = (i % 2 == 0)? 1.5f : 1.0f;\n                    var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\n                    pos.y = j * heightBetweenItems;\n                    var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\n                    var newObjTransform = newInst.transform;\n                    newObjTransform.LookAt(playerPos);\n                    Vector3 newAngle = newObjTransform.rotation.eulerAngles;\n                    newAngle.x = 0.0f;\n                    newObjTransform.rotation = Quaternion.Euler(newAngle);\n                    spawnedCubes.Add(newInst);\n                }\n            }\n        }\n\n        void ClearObjects()\n        {\n            foreach (var cube in",
    "code_repairing_4": "1. Aprender los conceptos b\u00e1sicos de programaci\u00f3n orientada a objetos en C++, como cl"
}