{
    "code_repairing_0": "// \t\t\t\t\t\t\tGameObject objectToAttach = ObjectPool.Instance.GetPooledObject( itemPrefab.name );\n// \t\t\t\t\t\t\tobjectToAttach.SetActive( true );\n// \t\t\t\t\t\t\thand.AttachObject( objectToAttach );\n// \t\t\t\t\t\t\thand.controller.TriggerHapticPulse( 800 );\n// \t\t\t\t\t\t\tObjectPool.Instance.ReturnPooledObjectToPool( objectToAttach );\n\n// \t\t\t\t\t\t\tYou need to add a Object Pool script to your project. Then you can replace the second code block with the following lines.\n\n// \t\t\t\t\t\t\tObjectPool objectPool = ObjectPool.Instance;\n// \t\t\t\t\t\t\tGameObject objectToAttach = objectPool.GetPooledObject( itemPrefab.name );\n// \t\t\t\t\t\t\tobjectToAttach.SetActive( true );\n// \t\t\t\t\t\t\thand.AttachObject( objectToAttach );\n// \t\t\t\t\t\t\thand.controller.TriggerHapticPulse( 800 );\n// \t\t\t\t\t\t\tobjectPool.ReturnPooledObjectToPool( objectToAttach );",
    "code_repairing_1": "using UnityEngine;\nusing System.Collections;\n\nnamespace Valve.VR.InteractionSystem\n{\n\t\n\tpublic class SpawnAndAttachAfterControllerIsTracking : MonoBehaviour\n\t{\n\t\tprivate Hand hand;\n\t\tpublic GameObject itemPrefab;\n\t\tprivate static ObjectPool objectPool;\n\n\t\t\n\t\tvoid Start()\n\t\t{\n\t\t\thand = GetComponentInParent<Hand>();\n\n\t\t\t// create an ObjectPool with the prefab that we want to instantiate\n\t\t\t// we set the maximum capacity to 1 to prevent the pool from growing\n\t\t\tobjectPool = new ObjectPool(itemPrefab, 1);\n\t\t}\n\n\n\t\t\nvoid Update()\n{\n\tif (itemPrefab!= null)\n\t{\n\t\tif (hand.controller!= null)\n\t\t{\n\t\t\tif (hand.controller.hasTracking)\n\t\t\t{\n\t\t\t\t// get an object from the pool\n\t\t\t\tGameObject objectToAttach = objectPool.GetObject();\n\n\t\t\t\t// activate the object so it appears in the scene\n\t\t\t\tobjectToAttach.SetActive(true);\n\n\t\t\t\t// attach the object to the hand",
    "code_repairing_2": "using UnityEngine;\nusing System.Collections;\n\nnamespace Valve.VR.InteractionSystem\n{\n\tpublic class SpawnAndAttachAfterControllerIsTracking : MonoBehaviour\n\t{\n\t\tprivate Hand hand;\n\t\tpublic GameObject itemPrefab;\n\n\t\tprivate static ObjectPool<GameObject> itemPool; // create an object pool to reduce the frequency of Instantiate() method\n\n\t\tvoid Awake()\n\t\t{\n\t\t\t// create an object pool for itemPrefab with initial capacity of 5\n\t\t\titemPool = new ObjectPool<GameObject>(itemPrefab, 5);\n\n\t\t\thand = GetComponentInParent<Hand>();\n\t\t}\n\n\t\tvoid Start()\n\t\t{\n\t\t\tif (itemPrefab!= null)\n\t\t\t{\n\t\t\t\thand.OnInteract += AttachObject;\n\t\t\t}\n\t\t}\n\n\t\tvoid OnDisable()\n\t\t{\n\t\t\tif (itemPrefab!= null)\n\t\t\t{\n\t\t\t\thand.OnInteract -= AttachObject;\n\t\t\t}\n\n\t\t\t// disable the object pool to avoid creating too many objects when the game object is inactive\n\t\t\titemPool.Disable();",
    "code_repairing_3": "```\n\n// Copyright (c) 2016 Valve Corporation\n// Copyright (c) 2016 <NAME>\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nusing UnityEngine;\nusing System.Collections;\n\nnamespace Valve.VR.InteractionSystem\n{\n\t\n\tpublic class SpawnAndAttachAfterControllerIsTracking : MonoBehaviour\n\t{\n\t\tprivate Hand hand;\n\t\tpublic GameObject itemPrefab;\n\n\t\n\t\tvoid Start()\n\t\t{\n\t\t\thand =",
    "code_repairing_4": "using UnityEngine;\nusing System.Collections;\n\nnamespace Valve.VR.InteractionSystem\n{\n\n\tpublic class SpawnAndAttachAfterControllerIsTracking : MonoBehaviour\n\t{\n\t\tprivate Hand hand;\n\t\tpublic GameObject itemPrefab;\n\n\t\tvoid Start()\n\t\t{\n\t\t\thand = GetComponentInParent<Hand>();\n\t\t}\n\n\n\t\tvoid Update()\n\t\t{\n\t\t\tif (itemPrefab!= null && hand.controller!= null)\n\t\t\t{\n\t\t\t\tif (hand.controller.GetTrackingState() == ETrackingState.Tracking &&\n\t\t\t\t    hand.controller.GetPose().position.y >= 0.1f)\n\t\t\t\t{\n\t\t\t\t\t// Instantiate the object only when the controller is tracked and above the y=0.1 plane\n\t\t\t\t\tvar objectToAttach = Instantiate(itemPrefab);\n\t\t\t\t\tobjectToAttach.transform.position = hand.controller.transform.position;\n\t\t\t\t\tobjectToAttach.transform.rotation = hand.controller.transform.rotation;\n\t\t\t\t\thand.AttachObject(objectToAttach);\n\t\t\t\t\thand.controller.TriggerHapticPulse"
}