"{\"id\":\"chatcmpl-BpyZNt65VfNbk9dR3KGDDeq6ykN69\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// FIXED CODE:\\n\\nvoid Update()\\n{\\n    // Refactored to separate the condition check and the spawn logic\\n    if (!m_AttemptSpawn)\\n    {\\n        HandleSpawnPreparation();\\n        return;\\n    }\\n\\n    // Reset attempt spawn flag\\n    m_AttemptSpawn = false;\\n\\n    // Attempt to spawn\\n    var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n    if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n    {\\n        if (!(arRaycastHit.trackable is ARPlane arPlane))\\n            return;\\n\\n        if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n            return;\\n\\n        m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n    }\\n}\\n\\nvoid HandleSpawnPreparation()\\n{\\n    var selectState = m_ARInteractor.logicalSelectState;\\n\\n    if (m_BlockSpawnWhenInteractorHasSelection)\\n    {\\n        if (selectState.wasPerformedThisFrame)\\n            m_EverHadSelection = m_ARInteractor.hasSelection;\\n        else if (selectState.active)\\n            m_EverHadSelection |= m_ARInteractor.hasSelection;\\n    }\\n\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (selectState.wasCompletedThisFrame)\\n                m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        public enum SpawnTriggerType\\n        {\\n            SelectAttempt,\\n            InputAction,\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n        XRRayInteractor m_ARInteractor;\\n\\n        public XRRayInteractor arInteractor\\n        {\\n            get => m_ARInteractor;\\n            set => m_ARInteractor = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n        ObjectSpawner m_ObjectSpawner;\\n\\n        public ObjectSpawner objectSpawner\\n        {\\n            get => m_ObjectSpawner;\\n            set => m_ObjectSpawner = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n        bool m_RequireHorizontalUpSurface;\\n\\n        public bool requireHorizontalUpSurface\\n        {\\n            get => m_RequireHorizontalUpSurface;\\n            set => m_RequireHorizontalUpSurface = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \\\" +\\n                 \\\"when a button input is performed.\\\")]\\n        SpawnTriggerType m_SpawnTriggerType;\\n\\n        public SpawnTriggerType spawnTriggerType\\n        {\\n            get => m_SpawnTriggerType;\\n            set => m_SpawnTriggerType = value;\\n        }\\n\\n        [SerializeField]\\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n\\n        public XRInputButtonReader spawnObjectInput\\n        {\\n            get => m_SpawnObjectInput;\\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\\n\\n        public bool blockSpawnWhenInteractorHasSelection\\n        {\\n            get => m_BlockSpawnWhenInteractorHasSelection;\\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\\n        }\\n\\n        bool m_AttemptSpawn;\\n        bool m_EverHadSelection;\\n\\n        void OnEnable()\\n        {\\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\\n            m_ARInteractor.selectEntered.AddListener(OnSelectEntered);\\n            m_ARInteractor.selectExited.AddListener(OnSelectExited);\\n        }\\n\\n        void OnDisable()\\n        {\\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\\n            m_ARInteractor.selectEntered.RemoveListener(OnSelectEntered);\\n            m_ARInteractor.selectExited.RemoveListener(OnSelectExited);\\n        }\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        TrySpawnObject(!m_ARInteractor.hasSelection && !m_EverHadSelection);\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        TrySpawnObject(!m_ARInteractor.hasSelection && !m_EverHadSelection);\\n                    break;\\n            }\\n        }\\n\\n        void TrySpawnObject(bool condition)\\n        {\\n            if (condition)\\n            {\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n            }\\n        }\\n\\n        void OnSelectEntered(SelectEnterEventArgs args)\\n        {\\n            m_EverHadSelection = true;\\n        }\\n\\n        void OnSelectExited(SelectExitEventArgs args)\\n        {\\n            m_EverHadSelection = false;\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\nusing System.Collections.Generic;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        public enum SpawnTriggerType\\n        {\\n            SelectAttempt,\\n            InputAction,\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n        XRRayInteractor m_ARInteractor;\\n\\n        public XRRayInteractor arInteractor\\n        {\\n            get => m_ARInteractor;\\n            set => m_ARInteractor = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n        ObjectSpawner m_ObjectSpawner;\\n\\n        public ObjectSpawner objectSpawner\\n        {\\n            get => m_ObjectSpawner;\\n            set => m_ObjectSpawner = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n        bool m_RequireHorizontalUpSurface;\\n\\n        public bool requireHorizontalUpSurface\\n        {\\n            get => m_RequireHorizontalUpSurface;\\n            set => m_RequireHorizontalUpSurface = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \\\" +\\n            \\\"when a button input is performed.\\\")]\\n        SpawnTriggerType m_SpawnTriggerType;\\n\\n        public SpawnTriggerType spawnTriggerType\\n        {\\n            get => m_SpawnTriggerType;\\n            set => m_SpawnTriggerType = value;\\n        }\\n\\n        [SerializeField]\\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n\\n        public XRInputButtonReader spawnObjectInput\\n        {\\n            get => m_SpawnObjectInput;\\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\\n\\n        public bool blockSpawnWhenInteractorHasSelection\\n        {\\n            get => m_BlockSpawnWhenInteractorHasSelection;\\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\\n        }\\n\\n        bool m_AttemptSpawn;\\n        bool m_EverHadSelection;\\n\\n        void OnEnable()\\n        {\\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\\n        }\\n\\n        void OnDisable()\\n        {\\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\\n        }\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        // Pre-building a pool of objects to avoid instantiating objects during Update.\\n        List<GameObject> objectPool = new List<GameObject>();\\n        const int maxPoolSize = 10;\\n\\n        void Awake()\\n        {\\n            for (int i = 0; i < maxPoolSize; i++)\\n            {\\n                GameObject obj = Instantiate(m_ObjectSpawner.objectPrefabs[0]);\\n                obj.SetActive(false);\\n                objectPool.Add(obj);\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    // Use object from pool\\n                    GameObject obj = GetPooledObject();\\n                    if (obj != null)\\n                    {\\n                        obj.transform.position = arRaycastHit.pose.position;\\n                        obj.transform.up = arPlane.normal;\\n                        obj.SetActive(true);\\n                        m_ObjectSpawner.objectSpawned?.Invoke(obj);\\n                    }\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n\\n        GameObject GetPooledObject()\\n        {\\n            foreach (var obj in objectPool)\\n            {\\n                if (!obj.activeInHierarchy)\\n                {\\n                    return obj;\\n                }\\n            }\\n            return null;\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        private Queue<GameObject> objectPool = new Queue<GameObject>();\\n        private const int poolSize = 10;\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n            else\\n            {\\n                InitializeObjectPool();\\n            }\\n        }\\n\\n        private void InitializeObjectPool()\\n        {\\n            if (m_ObjectSpawner.objectPrefabs.Count > 0)\\n            {\\n                for (int i = 0; i < poolSize; i++)\\n                {\\n                    var prefab = m_ObjectSpawner.objectPrefabs[0]; // or choose a random prefab depending on the requirements\\n                    var pooledObject = Instantiate(prefab);\\n                    pooledObject.SetActive(false);\\n                    objectPool.Enqueue(pooledObject);\\n                }\\n            }\\n        }\\n\\n        private GameObject GetPooledObject()\\n        {\\n            if (objectPool.Count > 0)\\n            {\\n                var pooledObject = objectPool.Dequeue();\\n                pooledObject.SetActive(true);\\n                return pooledObject;\\n            }\\n            return null;\\n        }\\n\\n        private void ReturnToPool(GameObject obj)\\n        {\\n            obj.SetActive(false);\\n            objectPool.Enqueue(obj);\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    var pooledObject = GetPooledObject();\\n                    if (pooledObject != null)\\n                    {\\n                        pooledObject.transform.position = arRaycastHit.pose.position;\\n                        pooledObject.transform.rotation = Quaternion.LookRotation(arPlane.normal, Vector3.up);\\n                        // Set other properties for pooledObject if necessary\\n                    }\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        public enum SpawnTriggerType\\n        {\\n            SelectAttempt,\\n            InputAction,\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n        XRRayInteractor m_ARInteractor;\\n\\n        public XRRayInteractor arInteractor\\n        {\\n            get => m_ARInteractor;\\n            set => m_ARInteractor = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n        ObjectSpawner m_ObjectSpawner;\\n\\n        public ObjectSpawner objectSpawner\\n        {\\n            get => m_ObjectSpawner;\\n            set => m_ObjectSpawner = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n        bool m_RequireHorizontalUpSurface;\\n\\n        public bool requireHorizontalUpSurface\\n        {\\n            get => m_RequireHorizontalUpSurface;\\n            set => m_RequireHorizontalUpSurface = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \\\" +\\n            \\\"when a button input is performed.\\\")]\\n        SpawnTriggerType m_SpawnTriggerType;\\n\\n        public SpawnTriggerType spawnTriggerType\\n        {\\n            get => m_SpawnTriggerType;\\n            set => m_SpawnTriggerType = value;\\n        }\\n\\n        [SerializeField]\\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n\\n        public XRInputButtonReader spawnObjectInput\\n        {\\n            get => m_SpawnObjectInput;\\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\\n\\n        public bool blockSpawnWhenInteractorHasSelection\\n        {\\n            get => m_BlockSpawnWhenInteractorHasSelection;\\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\\n        }\\n\\n        bool m_AttemptSpawn;\\n        bool m_EverHadSelection;\\n\\n        void OnEnable()\\n        {\\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\\n        }\\n\\n        void OnDisable()\\n        {\\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\\n        }\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void TryAttemptSpawn()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n            }\\n        }\\n\\n        void FixedUpdate()\\n        {\\n            TryAttemptSpawn();\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751727257,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":4364,\"prompt_tokens\":2463,\"total_tokens\":6827,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"