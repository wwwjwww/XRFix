"{\"id\":\"chatcmpl-BrnlNIwZJ1jRkxJG9XwJG2hZWGmqs\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Move the instantiation of the object to the GetPooledObject() method\\nvoid Update()\\n{\\n    if (Input.GetButtonDown(\\\"Fire1\\\"))\\n    {\\n        GameObject gobj = GetPooledObject();\\n    }\\n    else if(Input.GetButtonUp(\\\"Release\\\"))\\n    {\\n        ReturnToPool(gobj);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    if (m_ObjectSpawner == null)\\n    {\\n        m_ObjectSpawner = GetComponent<ObjectSpawner>();\\n    }\\n\\n    if (m_ARInteractor == null)\\n    {\\n        Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n        enabled = false;\\n    }\\n}\\n\\nvoid Update()\\n{\\n    if (m_AttemptSpawn)\\n    {\\n        m_AttemptSpawn = false;\\n\\n        var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n        if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n        {\\n            if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                return;\\n\\n            if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                return;\\n\\n            m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n        }\\n\\n        return;\\n    }\\n\\n    var selectState = m_ARInteractor.selectInteractionState;\\n\\n    if (m_BlockSpawnWhenInteractorHasSelection)\\n    {\\n        if (selectState.activationAction.actionWasJustPressed)\\n            m_EverHadSelection = m_ARInteractor.isSelected;\\n        else if (selectState.active)\\n            m_EverHadSelection |= m_ARInteractor.isSelected;\\n    }\\n\\n    m_AttemptSpawn = false;\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (selectState.selectionCompletionAction.actionWasJustPerformed)\\n                m_AttemptSpawn = !m_ARInteractor.isSelected && !m_EverHadSelection;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.inputAction.actionWasJustPerformed)\\n                m_AttemptSpawn = !m_ARInteractor.isSelected && !m_EverHadSelection;\\n            break;\\n    }\\n}\\n\\npublic void TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\\n{\\n    if (transform.childCount > 0)\\n    {\\n        return;\\n    }\\n    \\n    if (m_OnlySpawnInView)\\n    {\\n        var inViewMin = m_ViewportPeriphery;\\n        var inViewMax = 1f - m_ViewportPeriphery;\\n        var pointInViewportSpace = cameraToFace.WorldToViewportPoint(spawnPoint);\\n        if (pointInViewportSpace.z < 0f || pointInViewportSpace.x > inViewMax || pointInViewportSpace.x < inViewMin ||\\n            pointInViewportSpace.y > inViewMax || pointInViewportSpace.y < inViewMin)\\n        {\\n            return;\\n        }\\n    }\\n\\n    var objectIndex = isSpawnOptionRandomized ? Random.Range(0, m_ObjectPrefabs.Count) : m_SpawnOptionIndex;\\n    var newObject = Instantiate(m_ObjectPrefabs[objectIndex]);\\n    if (m_SpawnAsChildren)\\n        newObject.transform.parent = transform;\\n\\n    newObject.transform.position = spawnPoint;\\n    EnsureFacingCamera();\\n\\n    var facePosition = cameraToFace.transform.position;\\n    var forward = facePosition - spawnPoint;\\n    BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);\\n    newObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);\\n\\n    if (m_ApplyRandomAngleAtSpawn)\\n    {\\n        var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);\\n        newObject.transform.Rotate(Vector3.up, randomRotation);\\n    }\\n\\n    if (m_SpawnVisualizationPrefab != null)\\n    {\\n        var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;\\n        visualizationTrans.position = spawnPoint;\\n        visualizationTrans.rotation = newObject.transform.rotation;\\n    }\\n\\n    objectSpawned?.Invoke(newObject);\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    if (m_ObjectSpawner == null)\\n    {\\n#if UNITY_2023_1_OR_NEWER\\n        m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n        m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n    }\\n\\n    if (m_ARInteractor == null)\\n    {\\n        Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n        enabled = false;\\n    }\\n}\\n\\nvoid Update()\\n{\\n    if (m_AttemptSpawn)\\n    {\\n        m_AttemptSpawn = false;\\n\\n        var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n        if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n        {\\n            if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                return;\\n\\n            if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                return;\\n\\n            m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n        }\\n    }\\n\\n    var selectState = m_ARInteractor.logicalSelectState;\\n\\n    if (m_BlockSpawnWhenInteractorHasSelection)\\n    {\\n        if (selectState.wasPerformedThisFrame)\\n            m_EverHadSelection = m_ARInteractor.hasSelection;\\n        else if (selectState.active)\\n            m_EverHadSelection |= m_ARInteractor.hasSelection;\\n    }\\n\\n    m_AttemptSpawn = false;\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (selectState.wasCompletedThisFrame)\\n                m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Update()\\n{\\n    if (m_AttemptSpawn)\\n    {\\n        m_AttemptSpawn = false;\\n\\n        var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n        if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n        {\\n            if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                return;\\n\\n            if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                return;\\n\\n            GameObject obj = m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n            ReturnToPool(obj);\\n        }\\n\\n        return;\\n    }\\n\\n    var selectState = m_ARInteractor.selectInteractionState;\\n\\n    if (m_BlockSpawnWhenInteractorHasSelection)\\n    {\\n        if (selectState.active && m_ARInteractor.selectTarget)\\n            return;\\n    }\\n\\n    m_AttemptSpawn = false;\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (selectState.selectedObject == null)\\n                m_AttemptSpawn = true;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.ReadValue())\\n                m_AttemptSpawn = true;\\n            break;\\n    }\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    if (m_ObjectSpawner == null)\\n    {\\n#if UNITY_2023_1_OR_NEWER\\n        m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n        m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n    }\\n\\n    if (m_ARInteractor == null)\\n    {\\n        Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n        enabled = false;\\n    }\\n}\\n\\nvoid Awake()\\n{\\n    m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n    m_SpawnObjectInput.InitInput();\\n}\\n\\nvoid Update()\\n{\\n    if (m_AttemptSpawn)\\n    {\\n        m_AttemptSpawn = false;\\n\\n        var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n        if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n        {\\n            if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                return;\\n\\n            if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                return;\\n\\n            m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n        }\\n\\n        return;\\n    }\\n\\n    var selectState = m_ARInteractor.selectInteractionState;\\n\\n    if (m_BlockSpawnWhenInteractorHasSelection)\\n    {\\n        if (selectState.wasActivatedThisFrame)\\n            m_EverHadSelection = m_ARInteractor.isSelectActive;\\n        else if (selectState.isActive)\\n            m_EverHadSelection |= m_ARInteractor.isSelectActive;\\n    }\\n\\n    bool shouldAttemptSpawn = false;\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (selectState.wasDeactivatedThisFrame)\\n                shouldAttemptSpawn = !m_ARInteractor.isSelectActive && !m_EverHadSelection;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.WasActivatedThisFrame())\\n                shouldAttemptSpawn = !m_ARInteractor.isSelectActive && !m_EverHadSelection;\\n            break;\\n    }\\n\\n    if (shouldAttemptSpawn)\\n    {\\n        m_AttemptSpawn = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752162373,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":2014,\"prompt_tokens\":2859,\"total_tokens\":4873,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"