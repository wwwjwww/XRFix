"{\"id\":\"chatcmpl-B3IbD5Uiqjs6U4pZobd4sTAu9HJLa\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.selectInteractionState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.selectTargetValid;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.selectTargetValid;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.justPressed)\\n                        m_AttemptSpawn = !m_ARInteractor.selectTargetValid && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadValue())\\n                        m_AttemptSpawn = !m_ARInteractor.selectTargetValid && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n\\n        public class ObjectSpawner : MonoBehaviour\\n        {\\n            public bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\\n            {\\n                if (transform.childCount > 0)\\n                {\\n                    return false;\\n                }\\n\\n                if (m_OnlySpawnInView)\\n                {\\n                    var inViewMin = m_ViewportPeriphery;\\n                    var inViewMax = 1f - m_ViewportPeriphery;\\n                    var pointInViewportSpace = cameraToFace.WorldToViewportPoint(spawnPoint);\\n                    if (pointInViewportSpace.z < 0f || pointInViewportSpace.x > inViewMax || pointInViewportSpace.x < inViewMin ||\\n                        pointInViewportSpace.y > inViewMax || pointInViewportSpace.y < inViewMin)\\n                    {\\n                        return false;\\n                    }\\n                }\\n\\n                var objectIndex = isSpawnOptionRandomized ? UnityEngine.Random.Range(0, m_ObjectPrefabs.Count) : m_SpawnOptionIndex;\\n                var newObject = Instantiate(m_ObjectPrefabs[objectIndex]);\\n                if (m_SpawnAsChildren)\\n                    newObject.transform.parent = transform;\\n\\n                newObject.transform.position = spawnPoint;\\n\\n                var facePosition = m_CameraToFace.transform.position;\\n                var forward = facePosition - spawnPoint;\\n                var projectedForward = Vector3.ProjectOnPlane(forward, spawnNormal);\\n                newObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);\\n\\n                if (m_ApplyRandomAngleAtSpawn)\\n                {\\n                    var randomRotation = UnityEngine.Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);\\n                    newObject.transform.Rotate(Vector3.up, randomRotation);\\n                }\\n\\n                if (m_SpawnVisualizationPrefab != null)\\n                {\\n                    var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;\\n                    visualizationTrans.position = spawnPoint;\\n                    visualizationTrans.rotation = newObject.transform.rotation;\\n                }\\n\\n                objectSpawned?.Invoke(newObject);\\n                return true;\\n            }\\n        }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"public class ARInteractorSpawnTrigger : MonoBehaviour\\n{\\n\\n    // Existing code here\\n\\n    private void Update()\\n    {\\n        if (m_AttemptSpawn)\\n        {\\n            m_AttemptSpawn = false;\\n\\n            var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n            if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n            {\\n                if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                    return;\\n\\n                if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                    return;\\n\\n                m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n            }\\n\\n            return;\\n        }\\n\\n        var selectState = m_ARInteractor.selectInteractionState;\\n\\n        if (m_BlockSpawnWhenInteractorHasSelection)\\n        {\\n            if (selectState.wasJustPressed)\\n                m_EverHadSelection = m_ARInteractor.selectTarget != null;\\n            else if (selectState.active)\\n                m_EverHadSelection |= m_ARInteractor.selectTarget != null;\\n        }\\n\\n        m_AttemptSpawn = false;\\n        switch (m_SpawnTriggerType)\\n        {\\n            case SpawnTriggerType.SelectAttempt:\\n                if (selectState.wasJustReleased)\\n                    m_AttemptSpawn = m_ARInteractor.selectTarget == null && !m_EverHadSelection;\\n                break;\\n\\n            case SpawnTriggerType.InputAction:\\n                if (m_SpawnObjectInput.wasJustActivated)\\n                    m_AttemptSpawn = m_ARInteractor.selectTarget == null && !m_EverHadSelection;\\n                break;\\n        }\\n    }\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"public bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\\n{\\n    if (transform.childCount > 0)\\n    {\\n        return false;\\n    }\\n    \\n    if (m_OnlySpawnInView)\\n    {\\n        var inViewMin = m_ViewportPeriphery;\\n        var inViewMax = 1f - m_ViewportPeriphery;\\n        var pointInViewportSpace = cameraToFace.WorldToViewportPoint(spawnPoint);\\n        if (pointInViewportSpace.z < 0f || pointInViewportSpace.x > inViewMax || pointInViewportSpace.x < inViewMin ||\\n            pointInViewportSpace.y > inViewMax || pointInViewportSpace.y < inViewMin)\\n        {\\n            return false;\\n        }\\n    }\\n\\n    var objectIndex = isSpawnOptionRandomized ? Random.Range(0, m_ObjectPrefabs.Count) : m_SpawnOptionIndex;\\n    var newObject = Instantiate(m_ObjectPrefabs[objectIndex]);\\n    if (m_SpawnAsChildren)\\n        newObject.transform.parent = transform;\\n\\n    newObject.transform.position = spawnPoint;\\n    EnsureFacingCamera();\\n\\n    var facePosition = m_CameraToFace.transform.position;\\n    var forward = facePosition - spawnPoint;\\n    BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);\\n    newObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);\\n\\n    if (m_ApplyRandomAngleAtSpawn)\\n    {\\n        var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);\\n        newObject.transform.Rotate(Vector3.up, randomRotation);\\n    }\\n\\n    if (m_SpawnVisualizationPrefab != null)\\n    {\\n        var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;\\n        visualizationTrans.position = spawnPoint;\\n        visualizationTrans.rotation = newObject.transform.rotation;\\n    }\\n\\n    objectSpawned?.Invoke(newObject);\\n    return true;\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"public bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\\n{\\n    if (transform.childCount > 0)\\n    {\\n        return false;\\n    }\\n\\n    if (m_OnlySpawnInView)\\n    {\\n        var inViewMin = m_ViewportPeriphery;\\n        var inViewMax = 1f - m_ViewportPeriphery;\\n        var pointInViewportSpace = cameraToFace.WorldToViewportPoint(spawnPoint);\\n        if (pointInViewportSpace.z < 0f || pointInViewportSpace.x > inViewMax || pointInViewportSpace.x < inViewMin ||\\n            pointInViewportSpace.y > inViewMax || pointInViewportSpace.y < inViewMin)\\n        {\\n            return false;\\n        }\\n    }\\n\\n    var objectIndex = isSpawnOptionRandomized ? Random.Range(0, m_ObjectPrefabs.Count) : m_SpawnOptionIndex;\\n    var newObject = Instantiate(m_ObjectPrefabs[objectIndex]);\\n    if (m_SpawnAsChildren)\\n        newObject.transform.parent = transform;\\n\\n    newObject.transform.position = spawnPoint;\\n    EnsureFacingCamera();\\n\\n    var facePosition = m_CameraToFace.transform.position;\\n    var forward = facePosition - spawnPoint;\\n    BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);\\n    newObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);\\n\\n    if (m_ApplyRandomAngleAtSpawn)\\n    {\\n        var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);\\n        newObject.transform.Rotate(Vector3.up, randomRotation);\\n    }\\n\\n    if (m_SpawnVisualizationPrefab != null)\\n    {\\n        var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;\\n        visualizationTrans.position = spawnPoint;\\n        visualizationTrans.rotation = newObject.transform.rotation;\\n    }\\n\\n    objectSpawned?.Invoke(newObject);\\n    return true;\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n\\n\\n\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.selectInteractionState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasJustPressed)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.isSelected)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasJustReleased)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.isActivated)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740126179,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":2195,\"prompt_tokens\":2497,\"total_tokens\":4692,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"