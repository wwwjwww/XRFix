"{\"id\":\"chatcmpl-B1stNmdMZDKPYeUZsf9s7hX9eNRct\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"        private void Start()\\n        {\\n            // Initialize object pool\\n            InitializeObjectPool();\\n        }\\n\\n        void InitializeObjectPool()\\n        {\\n            for (int i = 0; i < 10; i++)\\n            {\\n                GameObject obj = Instantiate(lineSegmentPrefab, Vector3.zero, Quaternion.identity);\\n                obj.SetActive(false);\\n                objectPool.Add(obj);\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n            if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n            {\\n                return;\\n            }\\n\\n            Vector3 tipPosition = transform.position;\\n            switch (brushStatus)\\n            {\\n                case BrushState.Idle:\\n                    if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                    {\\n                        UndoInkLine();\\n                    }\\n\\n                    if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                    {\\n                        StartLine(tipPosition);\\n                        brushStatus = BrushState.Inking;\\n                    }\\n\\n                    break;\\n                case BrushState.Inking:\\n\\n                    UpdateLine(tipPosition);\\n                    if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                    {\\n                        brushStatus = BrushState.Idle;\\n                    }\\n\\n                    break;\\n            }\\n        }\\n\\n        void StartLine(Vector3 inkPos)\\n        {\\n            GameObject newLine = GetPooledObject();\\n            currentLineSegment = newLine.GetComponent<LineRenderer>();\\n            currentLineSegment.positionCount = 1;\\n            currentLineSegment.SetPosition(0, inkPos);\\n            strokeWidth = currentLineSegment.startWidth;\\n            strokeLength = 0.0f;\\n            inkPositions.Clear();\\n            inkPositions.Add(inkPos);\\n            newLine.transform.parent = lineContainer.transform;\\n        }\\n\\n        GameObject GetPooledObject()\\n        {\\n            for (int i = 0; i < objectPool.Count; i++)\\n            {\\n                if (!objectPool[i].activeInHierarchy)\\n                {\\n                    objectPool[i].SetActive(true);\\n                    return objectPool[i];\\n                }\\n            }\\n\\n            GameObject obj = Instantiate(lineSegmentPrefab, Vector3.zero, Quaternion.identity);\\n            obj.SetActive(true);\\n            objectPool.Add(obj);\\n            return obj;\\n        }\\n    }\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = Instantiate(lineSegmentPrefab, inkPos, Quaternion.identity);\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprivate void Start()\\n{\\n    // Build an object pool for line segments\\n    BuildObjectPool();\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"private List<GameObject> lineSegmentPool = new List<GameObject>();\\nprivate int poolSize = 10;\\n\\nprivate void Start()\\n{\\n    // Populate line segment pool\\n    for (int i = 0; i < poolSize; i++)\\n    {\\n        GameObject newLine = Instantiate(lineSegmentPrefab);\\n        newLine.SetActive(false);\\n        lineSegmentPool.Add(newLine);\\n    }\\n}\\n\\nvoid Update()\\n{\\n    transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n    if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n    {\\n        return;\\n    }\\n\\n    Vector3 tipPosition = transform.position;\\n    switch (brushStatus)\\n    {\\n        case BrushState.Idle:\\n            if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n            {\\n                UndoInkLine();\\n            }\\n\\n            if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n            {\\n                StartLine(tipPosition);\\n                brushStatus = BrushState.Inking;\\n            }\\n\\n            break;\\n        case BrushState.Inking:\\n\\n            UpdateLine(tipPosition);\\n            if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n            {\\n                brushStatus = BrushState.Idle;\\n            }\\n\\n            break;\\n    }\\n}\\n\\nvoid StartLine(Vector3 inkPos)\\n{\\n    GameObject newLine = GetPooledLineSegment();\\n    newLine.transform.position = inkPos;\\n    newLine.SetActive(true);\\n    \\n    currentLineSegment = newLine.GetComponent<LineRenderer>();\\n    currentLineSegment.positionCount = 1;\\n    currentLineSegment.SetPosition(0, inkPos);\\n    \\n    strokeWidth = currentLineSegment.startWidth;\\n    strokeLength = 0.0f;\\n    inkPositions.Clear();\\n    inkPositions.Add(inkPos);\\n}\\n\\nGameObject GetPooledLineSegment()\\n{\\n    foreach (GameObject lineSegment in lineSegmentPool)\\n    {\\n        if (!lineSegment.activeInHierarchy)\\n        {\\n            return lineSegment;\\n        }\\n    }\\n\\n    return Instantiate(lineSegmentPrefab);\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"void StartLine(Vector3 inkPos)\\n{\\n    GameObject newLine = Instantiate(lineSegmentPrefab, inkPos, Quaternion.identity, lineContainer.transform);\\n    currentLineSegment = newLine.GetComponent<LineRenderer>();\\n    currentLineSegment.positionCount = 1;\\n    currentLineSegment.SetPosition(0, inkPos);\\n    strokeWidth = currentLineSegment.startWidth;\\n    strokeLength = 0.0f;\\n    inkPositions.Clear();\\n    inkPositions.Add(inkPos);\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739789033,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_0165350fbb\",\"usage\":{\"completion_tokens\":1117,\"prompt_tokens\":683,\"total_tokens\":1800,\"completion_tokens_details\":null,\"prompt_tokens_details\":null}}"