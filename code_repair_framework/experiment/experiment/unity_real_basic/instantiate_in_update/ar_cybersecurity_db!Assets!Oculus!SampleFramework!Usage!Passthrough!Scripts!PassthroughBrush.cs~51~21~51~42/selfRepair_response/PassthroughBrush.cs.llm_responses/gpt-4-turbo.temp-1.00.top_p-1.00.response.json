"{\"id\":\"chatcmpl-BpuvX1z5d83UYbmlBFszLmbNuryum\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private Queue<GameObject> linePool = new Queue<GameObject>();\\n    private int poolSize = 10; // Example pool size\\n\\n    private void Awake()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject lineObj = Instantiate(lineSegmentPrefab);\\n            lineObj.SetActive(false);\\n            linePool.Enqueue(lineObj);\\n        }\\n    }\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = linePool.Count > 0 ? linePool.Dequeue() : Instantiate(lineSegmentPrefab, inkPos, Quaternion.identity);\\n        newLine.SetActive(true);\\n        newLine.transform.position = inkPos;\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n\\n    void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            currentLineSegment.gameObject.SetActive(false);\\n            linePool.Enqueue(currentLineSegment.gameObject);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private List<GameObject> linePool = new List<GameObject>();\\n    private int poolSize = 10;\\n    private int currentLineIndex = 0;\\n\\n    private void Start()\\n    {\\n        InitializeLinePool();\\n    }\\n\\n    private void InitializeLinePool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject line = Instantiate(lineSegmentPrefab, Vector3.zero, Quaternion.identity);\\n            line.transform.parent = lineContainer.transform;\\n            line.SetActive(false);\\n            linePool.Add(line);\\n        }\\n    }\\n\\n    private GameObject GetPooledLine()\\n    {\\n        GameObject line = linePool[currentLineIndex];\\n        currentLineIndex = (currentLineIndex + 1) % poolSize;\\n        line.SetActive(true);\\n        return line;\\n    }\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetPooledLine();\\n        newLine.transform.position = inkPos;\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    private Queue<GameObject> linePool = new Queue<GameObject>();\\n    private int poolSize = 10;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void Awake()\\n    {\\n        BuildObjectPool();\\n    }\\n\\n    private void BuildObjectPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject line = Instantiate(lineSegmentPrefab);\\n            line.SetActive(false);\\n            line.transform.parent = lineContainer.transform;\\n            linePool.Enqueue(line);\\n        }\\n    }\\n\\n    private GameObject GetLineFromPool()\\n    {\\n        if (linePool.Count > 0)\\n        {\\n            GameObject line = linePool.Dequeue();\\n            line.SetActive(true);\\n            return line;\\n        }\\n        else\\n        {\\n            GameObject line = Instantiate(lineSegmentPrefab);\\n            line.transform.parent = lineContainer.transform;\\n            return line;\\n        }\\n    }\\n\\n    private void ReturnLineToPool(GameObject line)\\n    {\\n        line.SetActive(false);\\n        linePool.Enqueue(line);\\n    }\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetLineFromPool();\\n        newLine.transform.position = inkPos;\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n    }\\n\\n    // Placeholder for the UndoInkLine method, assuming it returns the last activated line to the pool.\\n    private void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            ReturnLineToPool(currentLineSegment.gameObject);\\n            currentLineSegment = null;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    private Queue<GameObject> lineSegmentPool = new Queue<GameObject>();\\n    private int poolSize = 10;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    private void Start()\\n    {\\n        InitializeLineSegmentPool();\\n    }\\n\\n    private void InitializeLineSegmentPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject newLine = Instantiate(lineSegmentPrefab);\\n            newLine.SetActive(false);\\n            lineSegmentPool.Enqueue(newLine);\\n        }\\n    }\\n\\n    private GameObject GetPooledLineSegment()\\n    {\\n        if (lineSegmentPool.Count > 0)\\n        {\\n            GameObject pooledLine = lineSegmentPool.Dequeue();\\n            pooledLine.SetActive(true);\\n            return pooledLine;\\n        }\\n        else\\n        {\\n            GameObject newLine = Instantiate(lineSegmentPrefab);\\n            return newLine;\\n        }\\n    }\\n\\n    private void ReturnLineSegmentToPool(GameObject lineSegment)\\n    {\\n        lineSegment.SetActive(false);\\n        lineSegmentPool.Enqueue(lineSegment);\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                    ReturnLineSegmentToPool(currentLineSegment.gameObject);\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetPooledLineSegment();\\n        newLine.transform.position = inkPos;\\n        newLine.transform.rotation = Quaternion.identity;\\n        newLine.transform.parent = lineContainer.transform;\\n\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n    }\\n\\n    // Add your existing `UndoInkLine()` and `UpdateLine()` methods below this point, if they exist.\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private Stack<GameObject> lineSegmentPool = new Stack<GameObject>();\\n\\n    private void Awake()\\n    {\\n        // Prepopulate the pool with line segments\\n        for (int i = 0; i < 10; i++)\\n        {\\n            GameObject obj = Instantiate(lineSegmentPrefab);\\n            obj.SetActive(false);\\n            lineSegmentPool.Push(obj);\\n        }\\n    }\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    private void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    private void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetPooledLineSegment();\\n        newLine.transform.position = inkPos;\\n        newLine.transform.rotation = Quaternion.identity;\\n        newLine.SetActive(true);\\n\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n\\n    private GameObject GetPooledLineSegment()\\n    {\\n        if (lineSegmentPool.Count > 0)\\n        {\\n            return lineSegmentPool.Pop();\\n        }\\n        else\\n        {\\n            // If the pool is empty, instantiate a new line segment\\n            GameObject obj = Instantiate(lineSegmentPrefab);\\n            return obj;\\n        }\\n    }\\n\\n    private void ReturnLineSegmentToPool(GameObject lineSegment)\\n    {\\n        lineSegment.SetActive(false);\\n        lineSegmentPool.Push(lineSegment);\\n    }\\n\\n    private void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            ReturnLineSegmentToPool(currentLineSegment.gameObject);\\n        }\\n    }\\n\\n    private void UpdateLine(Vector3 tipPosition)\\n    {\\n        if (currentLineSegment == null)\\n        {\\n            return;\\n        }\\n\\n        if (inkPositions.Count > 0)\\n        {\\n            Vector3 lastPosition = inkPositions[inkPositions.Count - 1];\\n            if (Vector3.Distance(tipPosition, lastPosition) > minInkDist)\\n            {\\n                currentLineSegment.positionCount++;\\n                currentLineSegment.SetPosition(currentLineSegment.positionCount - 1, tipPosition);\\n                inkPositions.Add(tipPosition);\\n                strokeLength += Vector3.Distance(tipPosition, lastPosition);\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751713255,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":3589,\"prompt_tokens\":644,\"total_tokens\":4233,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"