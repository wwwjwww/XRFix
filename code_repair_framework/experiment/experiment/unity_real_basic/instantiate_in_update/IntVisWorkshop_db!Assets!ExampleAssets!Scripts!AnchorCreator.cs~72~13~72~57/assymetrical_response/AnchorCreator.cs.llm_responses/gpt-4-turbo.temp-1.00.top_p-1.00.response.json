"{\"id\":\"chatcmpl-B4flshED8qmeBa3GQvtsQEXPgKHSy\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\n\\n[RequireComponent(typeof(ARAnchorManager))]\\n[RequireComponent(typeof(ARRaycastManager))]\\n[RequireComponent(typeof(ARPlaneManager))]\\npublic class AnchorCreator : MonoBehaviour\\n{\\n    [SerializeField]\\n    GameObject m_AnchorPrefab;\\n\\n    public GameObject AnchorPrefab\\n    {\\n        get => m_AnchorPrefab;\\n        set => m_AnchorPrefab = value;\\n    }\\n\\n    List<ARAnchor> m_AnchorPoints;\\n    ARRaycastManager m_RaycastManager;\\n    ARAnchorManager m_AnchorManager;\\n    ARPlaneManager m_PlaneManager;\\n\\n    static List<ARRaycastHit> s_Hits = new List<ARRaycastHit>();\\n\\n    public void RemoveAllAnchors()\\n    {\\n        foreach (var anchor in m_AnchorPoints)\\n        {\\n            Destroy(anchor);\\n        }\\n        m_AnchorPoints.Clear();\\n    }\\n\\n    void Awake()\\n    {\\n        m_RaycastManager = GetComponent<ARRaycastManager>();\\n        m_AnchorManager = GetComponent<ARAnchorManager>();\\n        m_PlaneManager = GetComponent<ARPlaneManager>();\\n        m_AnchorPoints = new List<ARAnchor>();\\n    }\\n\\n    void Update()\\n    {\\n        if (Input.touchCount == 0)\\n            return;\\n\\n        var touch = Input.GetTouch(0);\\n        if (touch.phase != TouchPhase.Began)\\n            return;\\n\\n        if (m_RaycastManager.Raycast(touch.position, s_Hits, TrackableType.PlaneWithinPolygon))\\n        {\\n            var hitPose = s_Hits[0].pose;\\n            var hitTrackableId = s_Hits[0].trackableId;\\n            var hitPlane = m_PlaneManager.GetPlane(hitTrackableId);\\n\\n            var anchor = m_AnchorManager.AttachAnchor(hitPlane, hitPose);\\n            if (anchor == null)\\n            {\\n                Debug.Log(\\\"Error creating anchor.\\\");\\n            }\\n            else\\n            {\\n                var instantiatedObject = Instantiate(m_AnchorPrefab, anchor.transform.position, anchor.transform.rotation);\\n                instantiatedObject.transform.parent = anchor.transform;\\n                m_AnchorPoints.Add(anchor);\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\n\\n[RequireComponent(typeof(ARAnchorManager))]\\n[RequireComponent(typeof(ARRaycastManager))]\\n[RequireComponent(typeof(ARPlaneManager))]\\npublic class AnchorCreator : MonoBehaviour\\n{\\n    [SerializeField]\\n    GameObject m_AnchorPrefab;\\n\\n    public GameObject AnchorPrefab\\n    {\\n        get => m_AnchorPrefab;\\n        set => m_AnchorPrefab = value;\\n    }\\n\\n    private List<GameObject> m_AnchorObjectsPool = new List<GameObject>();\\n\\n    public void RemoveAllAnchors()\\n    {\\n        foreach (var anchor in m_AnchorPoints)\\n        {\\n            Destroy(anchor);\\n        }\\n        m_AnchorPoints.Clear();\\n\\n        foreach (var anchorObject in m_AnchorObjectsPool)\\n        {\\n            anchorObject.SetActive(false);\\n        }\\n    }\\n\\n    void Awake()\\n    {\\n        m_RaycastManager = GetComponent<ARRaycastManager>();\\n        m_AnchorManager = GetComponent<ARAnchorManager>();\\n        m_PlaneManager = GetComponent<ARPlaneManager>();\\n        m_AnchorPoints = new List<ARAnchor>();\\n    }\\n\\n    void Start()\\n    {\\n        // Pre-build anchor objects in a pool\\n        for (int i = 0; i < 10; i++) // Adjust the pool size as necessary\\n        {\\n            GameObject anchorObject = Instantiate(m_AnchorPrefab);\\n            anchorObject.SetActive(false);\\n            m_AnchorObjectsPool.Add(anchorObject);\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        if (Input.touchCount == 0)\\n            return;\\n\\n        var touch = Input.GetTouch(0);\\n        if (touch.phase != TouchPhase.Began)\\n            return;\\n\\n        if (m_RaycastManager.Raycast(touch.position, s_Hits, TrackableType.PlaneWithinPolygon))\\n        {\\n            var hitPose = s_Hits[0].pose;\\n            var hitTrackableId = s_Hits[0].trackableId;\\n            var hitPlane = m_PlaneManager.GetPlane(hitTrackableId);\\n\\n            var anchor = m_AnchorManager.AttachAnchor(hitPlane, hitPose);\\n\\n            if (anchor == null)\\n            {\\n                Debug.Log(\\\"Error creating anchor.\\\");\\n            }\\n            else\\n            {\\n                GameObject anchorObject = GetPooledObject();\\n                if (anchorObject != null)\\n                {\\n                    anchorObject.transform.position = anchor.transform.position;\\n                    anchorObject.transform.rotation = anchor.transform.rotation;\\n                    anchorObject.SetActive(true);\\n                }\\n                else\\n                {\\n                    Debug.LogError(\\\"No available anchor objects in the pool.\\\");\\n                }\\n                m_AnchorPoints.Add(anchor);\\n            }\\n        }\\n    }\\n\\n    private GameObject GetPooledObject()\\n    {\\n        foreach (var anchorObject in m_AnchorObjectsPool)\\n        {\\n            if (!anchorObject.activeInHierarchy)\\n            {\\n                return anchorObject;\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\n\\n[RequireComponent(typeof(ARAnchorManager))]\\n[RequireComponent(typeof(ARRaycastManager))]\\n[RequireComponent(typeof(ARPlaneManager))]\\npublic class AnchorCreator : MonoBehaviour\\n{\\n    [SerializeField]\\n    GameObject m_AnchorPrefab;\\n\\n    public GameObject AnchorPrefab\\n    {\\n        get => m_AnchorPrefab;\\n        set => m_AnchorPrefab = value;\\n    }\\n\\n    private List<GameObject> m_AnchorObjectPool = new List<GameObject>();\\n    private ARRaycastManager m_RaycastManager;\\n    private ARAnchorManager m_AnchorManager;\\n    private ARPlaneManager m_PlaneManager;\\n    static List<ARRaycastHit> s_Hits = new List<ARRaycastHit>();\\n    private List<ARAnchor> m_AnchorPoints;\\n\\n    public void RemoveAllAnchors()\\n    {\\n        foreach (var anchor in m_AnchorPoints)\\n        {\\n            Destroy(anchor);\\n        }\\n        m_AnchorPoints.Clear();\\n        \\n        foreach (var anchorObject in m_AnchorObjectPool)\\n        {\\n            anchorObject.SetActive(false);\\n        }\\n    }\\n\\n    void Awake()\\n    {\\n        m_RaycastManager = GetComponent<ARRaycastManager>();\\n        m_AnchorManager = GetComponent<ARAnchorManager>();\\n        m_PlaneManager = GetComponent<ARPlaneManager>();\\n        m_AnchorPoints = new List<ARAnchor>();\\n    }\\n\\n    void Start()\\n    {\\n        // Pre-instantiate a pool of anchor objects\\n        for (int i = 0; i < 10; i++)\\n        {\\n            var anchorObject = Instantiate(m_AnchorPrefab);\\n            anchorObject.SetActive(false);\\n            m_AnchorObjectPool.Add(anchorObject);\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        if (Input.touchCount == 0)\\n            return;\\n\\n        var touch = Input.GetTouch(0);\\n        if (touch.phase != TouchPhase.Began)\\n            return;\\n\\n        if (m_RaycastManager.Raycast(touch.position, s_Hits, TrackableType.PlaneWithinPolygon))\\n        {\\n            var hitPose = s_Hits[0].pose;\\n            var hitTrackableId = s_Hits[0].trackableId;\\n            var hitPlane = m_PlaneManager.GetPlane(hitTrackableId);\\n\\n            var anchor = m_AnchorManager.AttachAnchor(hitPlane, hitPose);\\n\\n            if (anchor == null)\\n            {\\n                Debug.Log(\\\"Error creating anchor.\\\");\\n            }\\n            else\\n            {\\n                // Check the object pool for an inactive object\\n                GameObject anchorObject = m_AnchorObjectPool.Find(obj => !obj.activeSelf);\\n                if (anchorObject != null)\\n                {\\n                    anchorObject.transform.position = anchor.transform.position;\\n                    anchorObject.transform.rotation = anchor.transform.rotation;\\n                    anchorObject.SetActive(true);\\n                }\\n                else\\n                {\\n                    // If no inactive objects are available, instantiate a new one and add to the pool\\n                    anchorObject = Instantiate(m_AnchorPrefab, anchor.transform.position, anchor.transform.rotation);\\n                    m_AnchorObjectPool.Add(anchorObject);\\n                }\\n\\n                m_AnchorPoints.Add(anchor);\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\n\\n[RequireComponent(typeof(ARAnchorManager))]\\n[RequireComponent(typeof(ARRaycastManager))]\\n[RequireComponent(typeof(ARPlaneManager))]\\npublic class AnchorCreator : MonoBehaviour\\n{\\n    [SerializeField]\\n    GameObject m_AnchorPrefab;\\n\\n    public GameObject AnchorPrefab\\n    {\\n        get => m_AnchorPrefab;\\n        set => m_AnchorPrefab = value;\\n    }\\n\\n    List<ARAnchor> m_AnchorPoints;\\n    ARRaycastManager m_RaycastManager;\\n    ARAnchorManager m_AnchorManager;\\n    ARPlaneManager m_PlaneManager;\\n    static List<ARRaycastHit> s_Hits = new List<ARRaycastHit>();\\n\\n    void Awake()\\n    {\\n        m_RaycastManager = GetComponent<ARRaycastManager>();\\n        m_AnchorManager = GetComponent<ARAnchorManager>();\\n        m_PlaneManager = GetComponent<ARPlaneManager>();\\n        m_AnchorPoints = new List<ARAnchor>();\\n    }\\n\\n    public void RemoveAllAnchors()\\n    {\\n        foreach (var anchor in m_AnchorPoints)\\n        {\\n            Destroy(anchor.gameObject);\\n        }\\n        m_AnchorPoints.Clear();\\n    }\\n\\n    void Update()\\n    {\\n        if (Input.touchCount == 0)\\n            return;\\n\\n        var touch = Input.GetTouch(0);\\n        if (touch.phase != TouchPhase.Began)\\n            return;\\n\\n        if (m_RaycastManager.Raycast(touch.position, s_Hits, TrackableType.PlaneWithinPolygon))\\n        {\\n            var hitPose = s_Hits[0].pose;\\n            var hitTrackableId = s_Hits[0].trackableId;\\n            var hitPlane = m_PlaneManager.GetPlane(hitTrackableId);\\n\\n            var anchor = m_AnchorManager.AttachAnchor(hitPlane, hitPose);\\n\\n            if (anchor == null)\\n            {\\n                Debug.Log(\\\"Error creating anchor.\\\");\\n            }\\n            else\\n            {\\n                var instantiatedObject = Instantiate(m_AnchorPrefab, anchor.transform);\\n                m_AnchorPoints.Add(anchor);\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\n\\n[RequireComponent(typeof(ARAnchorManager))]\\n[RequireComponent(typeof(ARRaycastManager))]\\n[RequireComponent(typeof(ARPlaneManager))]\\npublic class AnchorCreator : MonoBehaviour\\n{\\n\\n    [SerializeField]\\n    GameObject m_AnchorPrefab;\\n\\n    public GameObject AnchorPrefab\\n    {\\n        get => m_AnchorPrefab;\\n        set => m_AnchorPrefab = value;\\n    }\\n\\n    List<GameObject> m_AnchorPool;\\n\\n    public void RemoveAllAnchors()\\n    {\\n        foreach (var anchor in m_AnchorPoints)\\n        {\\n            Destroy(anchor.gameObject);\\n        }\\n        m_AnchorPoints.Clear();\\n\\n        foreach (var anchorObject in m_AnchorPool)\\n        {\\n            anchorObject.SetActive(false);\\n        }\\n    }\\n\\n    void Awake()\\n    {\\n        m_RaycastManager = GetComponent<ARRaycastManager>();\\n        m_AnchorManager = GetComponent<ARAnchorManager>();\\n        m_PlaneManager = GetComponent<ARPlaneManager>();\\n        m_AnchorPoints = new List<ARAnchor>();\\n        m_AnchorPool = new List<GameObject>();\\n\\n        for (int i = 0; i < 10; i++)  // Adjust the pool size based on expected usage\\n        {\\n            var anchorObj = Instantiate(m_AnchorPrefab);\\n            anchorObj.SetActive(false);\\n            m_AnchorPool.Add(anchorObj);\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        if (Input.touchCount == 0)\\n            return;\\n\\n        var touch = Input.GetTouch(0);\\n        if (touch.phase != TouchPhase.Began)\\n            return;\\n\\n        if (m_RaycastManager.Raycast(touch.position, s_Hits, TrackableType.PlaneWithinPolygon))\\n        {\\n            var hitPose = s_Hits[0].pose;\\n            var hitTrackableId = s_Hits[0].trackableId;\\n            var hitPlane = m_PlaneManager.GetPlane(hitTrackableId);\\n            var anchor = m_AnchorManager.AttachAnchor(hitPlane, hitPose);\\n\\n            if (anchor == null)\\n            {\\n                Debug.Log(\\\"Error creating anchor.\\\");\\n            }\\n            else\\n            {\\n                m_AnchorPoints.Add(anchor);\\n\\n                foreach (var anchorObj in m_AnchorPool)\\n                {\\n                    if (!anchorObj.activeInHierarchy)\\n                    {  \\n                        // Reuse an inactive object from the pool\\n                        anchorObj.transform.position = anchor.transform.position;\\n                        anchorObj.transform.rotation = anchor.transform.rotation;\\n                        anchorObj.SetActive(true);\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    static List<ARRaycastHit> s_Hits = new List<ARRaycastHit>();\\n    List<ARAnchor> m_AnchorPoints;\\n    ARRaycastManager m_RaycastManager;\\n    ARAnchorManager m_AnchorManager;\\n    ARPlaneManager m_PlaneManager;\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740453580,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":2801,\"prompt_tokens\":560,\"total_tokens\":3361,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"