"{\"id\":\"chatcmpl-BrnlhiTXB1if3UCCtYAoevB1KAp8i\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"public class Targets : MonoBehaviour\\n{\\n    public GameObject target;\\n    public String level; // Integer representing the difficulty level\\n    public float spawnInterval = 3f; // Seconds between spawns\\n    public int maxTargets = 10; // Max targets allowed in scene\\n\\n    private float spawnTimer = 0f;\\n    private float spawnRange = 5f; // Range for spawning\\n\\n    void Start()\\n    {\\n        level = PlayerPrefs.GetString(\\\"level\\\"); // Default to level 1 (\\\"easy\\\")\\n        InvokeRepeating(\\\"SpawnTarget\\\", spawnInterval, spawnInterval);\\n    }\\n\\n    void SpawnTarget()\\n    {\\n        if (GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets)\\n        {\\n            Vector3 spawnPosition = new Vector3(\\n                UnityEngine.Random.Range(-spawnRange, spawnRange),  // Random x position\\n                UnityEngine.Random.Range(1f, 5f),       // Random y position between 1 and 5\\n                0);                                     // z axis is 0 for 2D\\n\\n            GameObject newTarget = Instantiate(target, spawnPosition, Quaternion.identity);\\n\\n            newTarget.tag = \\\"Target\\\";\\n\\n            newTarget.GetComponent<Targets_movements>().level = level;\\n        }\\n    }\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"void Update()\\n    {\\n        spawnTimer += Time.deltaTime;\\n\\n        if (spawnTimer >= spawnInterval && GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets)\\n        {\\n            StartCoroutine(SpawnTarget()); // Use StartCoroutine for spawning\\n            spawnTimer = 0f; // Reset the timer\\n        }\\n    }\\n\\n    IEnumerator SpawnTarget()\\n    {\\n        yield return new WaitForSeconds(0.1f); // Delay spawning for 0.1 seconds\\n\\n        Vector3 spawnPosition = new Vector3(\\n            UnityEngine.Random.Range(-spawnRange, spawnRange),  // Random x position\\n            UnityEngine.Random.Range(1f, 5f),       // Random y position between 1 and 5\\n            0);                                     // z axis is 0 for 2D\\n\\n        GameObject newTarget = Instantiate(target, spawnPosition, Quaternion.identity);\\n\\n        newTarget.tag = \\\"Target\\\";\\n\\n        newTarget.GetComponent<Targets_movements>().level = level;\\n    }\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"void Update()\\n{\\n    spawnTimer += Time.deltaTime;\\n\\n    if (spawnTimer >= spawnInterval && GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets)\\n    {\\n        // SpawnTarget();\\n        spawnTimer = 0f; // Reset the timer\\n    }\\n}\\n\\nvoid SpawnTarget()\\n{\\n    Vector3 spawnPosition = new Vector3(\\n        UnityEngine.Random.Range(-spawnRange, spawnRange),  // Random x position\\n        UnityEngine.Random.Range(1f, 5f),       // Random y position between 1 and 5\\n        0);                                     // z axis is 0 for 2D\\n\\n    // GameObject newTarget = Instantiate(target, spawnPosition, Quaternion.identity);\\n    GameObject newTarget = ObjectPooler.Instance.SpawnFromPool(\\\"Target\\\", spawnPosition, Quaternion.identity);\\n\\n    newTarget.tag = \\\"Target\\\";\\n\\n    newTarget.GetComponent<Targets_movements>().level = level;\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"// FIXED CODE:\\n\\nvoid Update()\\n{\\n    spawnTimer += Time.deltaTime;\\n\\n    if (spawnTimer >= spawnInterval && GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets)\\n    {\\n        SpawnTarget();\\n        spawnTimer = 0f; // Reset the timer\\n    }\\n}\\n\\nvoid SpawnTarget()\\n{\\n    Vector3 spawnPosition = new Vector3(\\n        UnityEngine.Random.Range(-spawnRange, spawnRange),  // Random x position\\n        UnityEngine.Random.Range(1f, 5f),       // Random y position between 1 and 5\\n        0);                                     // z axis is 0 for 2D\\n\\n    GameObject newTarget = Instantiate(target, spawnPosition, Quaternion.identity);\\n\\n    newTarget.tag = \\\"Target\\\";\\n\\n    newTarget.GetComponent<Targets_movements>().level = level;\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"void Update()\\n{\\n    spawnTimer += Time.deltaTime;\\n\\n    if (spawnTimer >= spawnInterval && GameObject.FindGameObjectsWithTag(\\\"Target\\\").Length < maxTargets)\\n    {\\n        SpawnTarget();\\n        spawnTimer = 0f; // Reset the timer\\n    }\\n}\\n\\nvoid SpawnTarget()\\n{\\n    Vector3 spawnPosition = new Vector3(\\n        UnityEngine.Random.Range(-spawnRange, spawnRange),  // Random x position\\n        UnityEngine.Random.Range(1f, 5f),       // Random y position between 1 and 5\\n        0);                                     // z axis is 0 for 2D\\n\\n    GameObject newTarget = ObjectPooler.Instance.GetPooledObject(); // Using object pooling instead of Instantiate\\n\\n    if (newTarget != null)\\n    {\\n        newTarget.transform.position = spawnPosition;\\n        newTarget.SetActive(true);\\n        newTarget.tag = \\\"Target\\\";\\n        newTarget.GetComponent<Targets_movements>().level = level;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752162393,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":1007,\"prompt_tokens\":784,\"total_tokens\":1791,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"