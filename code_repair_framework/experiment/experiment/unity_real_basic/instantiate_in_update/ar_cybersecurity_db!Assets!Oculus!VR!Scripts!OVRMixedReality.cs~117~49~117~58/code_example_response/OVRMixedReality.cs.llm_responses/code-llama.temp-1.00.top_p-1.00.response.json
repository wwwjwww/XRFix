{
    "code_repairing_0": "The code looks like it is intended to refresh camera objects in the background and foreground for a mixed reality capture. However, it makes some inefficient use of the Update() method by instantiating a new camera object in the Update() method.\n\nThe updated code below uses the Instantiate() function in Start() instead of Update() to create the background and foreground camera objects, which eliminates the problem described in the issue summary.\n \nvoid Start() \n{\n    backgroundCamera = GameObject.Instantiate(mainCamera.gameObject).GetComponent<Camera>(); \n    backgroundCamera.name = \"OculusMRC_BackgroundCamera\"; \n    backgroundCamera.transform.SetParent(transform); \n    backgroundCamera.enabled = true; \n    backgroundCamera.cullingMask = ~(1 << LayerMask.NameToLayer(\"UI\") & ~~LayerMask.NameToLayer(\"FadeZone\"));\n    backgroundCamera.clearFlags = CameraClearFlags.Color;\n    Camera.main.GetComponent<Camera>().depth = backgroundCamera.depth - 0.1f;\n    UpdateCameraRig();\n\n    foregroundCamera = GameObject.Instantiate(mainCamera.gameObject).GetComponent<Camera>(); \n    foregroundCamera.name = \"OculusMRC_BackgroundCamera\"; \n    foregroundCamera.transform.SetParent(transform); \n    foregroundCamera.enabled = true; \n    foregroundCamera.cullingMask = ~(1 << LayerMask.NameToLayer(\"UI\") & ~~LayerMask.NameToLayer(\"FadeZone\"));\n    foregroundCamera.clearFlags = CameraClearFlags.Color;\n    foregroundCamera.depth = backgroundCamera.depth + 0.1f;\n    UpdateCameraRig();\n}\n\nNote: The code above is just a suggestion to fix the issue. It may not fix every instance of the bug, and it may introduce new issues. The suggested code is meant to be a simple fix to address the issue.",
    "code_repairing_1": "Here is the modified code:\n\n//Here're the buggy code lines from /Assets/Oculus/VR/Scripts/OVRMixedReality.cs:\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Text.RegularExpressions;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n// FIXED CODE:\n// BUG: Instantiate in Update() method\n// MESSAGE: Update() method is called each frame. It's inefficient to use Instantiate() in Update() method.\npublic static void Update(GameObject parentObject, Camera mainCamera,\n    OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin  trackingOrigin)\n{\n    if (!OVRPlugin.initialized)\n    {\n        Debug.LogError(\"OVRPlugin not initialized\");\n        return;\n    }\n\n    if (!OVRPlugin.IsMixedRealityInitialized())\n    {\n        OVRPlugin.InitializeMixedReality();\n        if (OVRPlugin.IsMixedRealityInitialized())\n        {\n            Debug.Log(\"OVRPlugin_MixedReality initialized\");\n        }\n        else\n        {\n            Debug.LogError(\"Unable to initialize OVRPlugin_MixedReality\");\n            return;\n        }\n    }\n\n    if (!OVRPlugin.IsMixedRealityInitialized())\n    {\n        return;\n    }\n\n    OVRPlugin.UpdateExternalCamera();\n#if !OVR_ANDROID_MRC\n    OVRPlugin.UpdateCameraDevices();\n#endif\n\n#if OVR_ANDROID_MRC\n    useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\n#endif\n\n    if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\n    {\n        currentComposition.Cleanup();\n        currentComposition = null;\n    }\n\n    if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\n    {\n        if (currentComposition == null)\n        {\n            currentComposition = new OVRExternalComposition(parentObject, mainCamera, configuration);\n        }\n    }\n    else\n    {\n        Debug.LogError(\"Unknown/Unsupported CompositionMethod : \" + configuration.compositionMethod);\n        return;\n    }\n\n    currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\n}\n\n//Here's the definition of function call in another component.\n//Related code from /Assets/Oculus/VR/Scripts/Composition/OVRExternalComposition.cs:\nusing System;\nusing UnityEngine;\nusing System.Collections.Generic;\nusing System.Threading;\nusing UnityEngine.Rendering;\nusing Object = UnityEngine.Object;\nusing UnityEngine.Rendering.Universal;\n\n// FIXED CODE:\n// BUG: RefreshCameraObjects() function is call in Update() and destroy object in a loop\n// MESSAGE: Update() method is called each frame. It's inefficient to use Instantiate() in Update() method.\nprivate void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\n    OVRMixedRealityCaptureConfiguration configuration)\n{\n    if (mainCamera.gameObject != previousMainCameraObject)\n    {\n        Debug.LogFormat(\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\",\n             mainCamera.gameObject.name);\n\n        OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\n        backgroundCamera = null;\n        OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\n        foregroundCamera = null;\n\n        RefreshCameraRig(parentObject, mainCamera);\n\n        Debug.Assert(backgroundCameraGameObject == null);\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\n        {\n            backgroundCameraGameObject =\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\n                OVRManager.MrcCameraType.Background);\n        }\n        else\n        {\n            backgroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\n        }\n\n        backgroundCameraGameObject.name = \"OculusMRC_BackgroundCamera\";\n        backgroundCameraGameObject.transform.parent =\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\n        if (backgroundCameraGameObject.GetComponent<AudioListener>())\n        {\n            Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\n        }\n\n        if (backgroundCameraGameObject.GetComponent<OVRManager>())\n        {\n            Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\n        }\n\n        backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\n        backgroundCamera.tag = \"Untagged\";\n#if USING_MRC_COMPATIBLE_URP_VERSION\n        var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\n        if (backgroundCamData != null)\n        {\n            backgroundCamData.allowXRRendering = false;\n        }\n#elif USING_URP\n        Debug.LogError(\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\");\n#else\n        backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\n#endif\n        backgroundCamera.depth = 99990.0f;\n        backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\n        backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\n                                       configuration.extraVisibleLayers;\n#if OVR_ANDROID_MRC\n        backgroundCamera.targetTexture = mrcRenderTextureArray[0];\n        if (!renderCombinedFrame)\n        {\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\n        }\n#endif\n\n        Debug.Assert(foregroundCameraGameObject == null);\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\n        {\n            foregroundCameraGameObject =\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\n                OVRManager.MrcCameraType.Foreground);\n        }\n        else\n        {\n            foregroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\n        }\n\n        foregroundCameraGameObject.name = \"OculusMRC_ForgroundCamera\";\n        foregroundCameraGameObject.transform.parent =\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\n        if (foregroundCameraGameObject.GetComponent<AudioListener>())\n        {\n            Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\n        }\n\n        if (foregroundCameraGameObject.GetComponent<OVRManager>())\n        {\n            Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\n        }\n\n        foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\n        foregroundCamera.tag = \"Untagged\";\n#if USING_MRC_COMPATIBLE_URP_VERSION\n        var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\n        if (foregroundCamData != null)\n        {\n            foregroundCamData.allowXRRendering = false;\n        }\n#elif USING_URP\n        Debug.LogError(\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\");\n#else\n        foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\n#endif\n        foregroundCamera.depth =\n            backgroundCamera.depth + 1.0f; // enforce the forground be rendered after the background\n        foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\n        foregroundCamera.clearFlags = CameraClearFlags.Color;\n#if OVR_ANDROID_MRC\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\n#else\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\n#endif\n        foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\n                                   configuration.extraVisibleLayers;\n\n#if OVR_ANDROID_MRC\n        if (renderCombinedFrame)\n         {\n            foregroundCamera.targetTexture = mrcRenderTextureArray[0];\n        }\n        else\n        {\n            foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\n            foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\n        }\n#endif\n\n\n\n        previousMainCameraObject = mainCamera.gameObject;\n    }\n}'''",
    "code_repairing_2": "// Here are the fixed code snippets for the 'OVRMixedReality.cs' file:\n\n// 1. \n    /*\n        Use this method instead of the \"Update()\" method to perform any updates when using the \"FixedUpdate\" method.\n        This is a more efficient way to use Instantiate() in this Update() method.\n    *//*\n\npublic void FixedUpdate()\n{\n    //Check if the game object is currently active in the scene and has a reference to an instantiated game object.\n    if (isActiveAndEnabled && prefab)\n    {\n        //Call the Instantiate() method on the prefab game object to get a reference to a new instantiated game object.\n        GameObject gobj = Instantiate<GameObject>(prefab);\n\n        //Make sure the newly instantiated game object is part of the game object pool.\n        if(pool.Contains(gobj))\n        {\n            //Make sure the instantiated game object is not already being used.\n            if(!gobj.activeInHierarchy)\n            {\n                //Set the instantiated game object to active and return it.\n                gobj.SetActive(true);\n                return gobj;\n            }\n        }\n    }\n\n    //If none of the above conditions are met, return null.\n    return null;\n}\n\n// 2. \n/**\n* Replace the contents of the \"Update()\" method with:\n* Make sure the game object is currently active in the scene and has a reference to an instantiated game object.\n* If the input button is not being pressed, return.\n* If the input button is being pressed, deactivate the object and add it to the list of instantiated game objects.\n* If the input button is being released, destroy the game object.\n**/\npublic void Update()\n{\n    if (isActiveAndEnabled && prefab)\n    {\n        // Check if the input button is being pressed (left mouse button)\n        if(Input.GetButton(\"Fire1\"))\n        {\n            // Deactivate the game object so it's not visible\n            gameObject.SetActive(false);\n\n            // Add the game object to the instantiated game objects list\n            instantiatedObjects.Add(gameObject);\n        }\n        else if(Input.GetButtonUp(\"Fire1\"))\n        {\n            // Destroy the game object\n            Destroy(gameObject);\n        }\n    }\n}\n\n// Here's a corrected version of the first code snippet:\nvoid Update()\n{\n    if (isActiveAndEnabled  && prefab)\n    {\n        if (Input.GetButtonDown(\"Fire1\"))\n        {\n            //Create a new game object and add it to the instantiated game objects list\n            GameObject gobj = Instantiate(prefab);\n            instantiatedObjects.Add(gobj);\n        }\n        else if (Input.GetButtonUp(\"Release\"))\n        {\n            // Remove the last instantiated game object from the instantiated game objects list\n            instantiatedObjects.RemoveLast();\n\n            //Destroy the last instantiated game object\n            Destroy(instantiatedObjects.Last());\n            //Destroy(instantiatedObjects.Last());\n        }\n    }\n}",
    "code_repairing_3": "//Here's the definition of function call in another component.\n//Related code from /Assets/Oculus/VR/Scripts/Composition/OVRExternalComposition.cs:\nusing System;\nusing UnityEngine;\nusing System.Collections.Generic;\nusing System.Threading;\nusing UnityEngine.Rendering;\nusing Object = UnityEngine.Object;\nusing UnityEngine.Rendering.Universal;\n\n//    private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\n//        OVRMixedRealityCaptureConfiguration configuration)\n//    {\n//        if (mainCamera.gameObject != previousMainCameraObject)\n//        {\n//            Debug.LogFormat(\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\",\n//                mainCamera.gameObject.name);\n//\n//            OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\n//            backgroundCamera = null;\n//            OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\n//            foregroundCamera = null;\n//\n//            RefreshCameraRig(parentObject, mainCamera);\n//\n//            Debug.Assert(backgroundCameraGameObject == null);\n//            if (configuration.instantiateMixedRealityCameraGameObject != null)\n//            {\n//                backgroundCameraGameObject =\n//                    configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\n//                        OVRManager.MrcCameraType.Background);\n//            }\n//            else\n//            {\n//                backgroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\n//            }\n//\n//            backgroundCameraGameObject.name = \"OculusMRC_BackgroundCamera\";\n//            backgroundCameraGameObject.transform.parent =\n//                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\n//            if (backgroundCameraGameObject.GetComponent<AudioListener>())\n//            {\n//                Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\n//            }\n//\n//            if (backgroundCameraGameObject.GetComponent<OVRManager>())\n//            {\n//                Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\n//            }\n//\n//            backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\n//            backgroundCamera.tag = \"Untagged\";\n//#if USING_MRC_COMPATIBLE_URP_VERSION\n//            var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\n//            if (backgroundCamData != null)\n//            {\n//                backgroundCamData.allowXRRendering = false;\n//            }\n//#elif USING_URP\n//            Debug.LogError(\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\");\n//#else\n//            backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\n//#endif\n//            backgroundCamera.depth = 99990.0f;\n//            backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\n//            backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\n//                                           configuration.extraVisibleLayers;\n#if OVR_ANDROID_MRC\n backgroundCamera.targetTexture = mrcRenderTextureArray[0];\n            if (!renderCombinedFrame)\n            {\n                backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\n            }\n#endif\n//            Debug.Assert(foregroundCameraGameObject == null);\n//            if (configuration.instantiateMixedRealityCameraGameObject != null)\n//            {\n//                foregroundCameraGameObject =\n//                    configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\n//                        OVRManager.MrcCameraType.Foreground);\n//            }\n//            else\n//            {\n//                foregroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\n//            }\n//\n//            foregroundCameraGameObject.name = \"OculusMRC_ForgroundCamera\";\n//            foregroundCameraGameObject.transform.parent =\n//                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\n//            if (foregroundCameraGameObject.GetComponent<AudioListener>())\n//            {\n//                Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\n//            }\n//\n//            if (foregroundCameraGameObject.GetComponent<OVRManager>())\n//            {\n//                Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\n//            }\n//\n//            foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\n//            foregroundCamera.tag = \"Untagged\";\n#if USING_MRC_COMPATIBLE_URP_VERSION\n//                var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\n//                if (foregroundCamData != null)\n//                {\n//                    foregroundCamData.allowXRRendering = false;\n//                }\n#elif USING_URP\n                Debug.LogError(\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\");\n#else\n//                foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\n#endif\n//                foregroundCamera.depth =\n//                    backgroundCamera.depth + 1.0f; // enforce the forground be rendered after the background\n//                foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\n//                foregroundCamera.clearFlags = CameraClearFlags.Color;\n//#if OVR_ANDROID_MRC\n//                foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\n//#else\n//                foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\n//#endif\n//                foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\n//                                               configuration.extraVisibleLayers;\n//\n//#if OVR_ANDROID_MRC\nbackgroundCamera.targetTexture = mrcRenderTextureArray[0];\n            if (!renderCombinedFrame)\n            {\n                backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\n            }\n//#endif\n//                previousMainCameraObject = mainCamera.gameObject;\n//            }\n//        }",
    "code_repairing_4": "```\n\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Text.RegularExpressions;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n// BUG: Instantiate in Update() method\n// MESSAGE: Update() method is called each frame. It's inefficient to use Instantiate() in Update() method.\n//    public static void Update(GameObject parentObject, Camera mainCamera,\n//        OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\n//    {\n//        if (!OVRPlugin.initialized)\n//        {\n//            Debug.LogError(\"OVRPlugin not initialized\");\n//            return;\n//        }\n//\n//        if (!OVRPlugin.IsMixedRealityInitialized())\n//        {\n//            OVRPlugin.InitializeMixedReality();\n//            if (OVRPlugin.IsMixedRealityInitialized())\n//            {\n//                Debug.Log(\"OVRPlugin_MixedReality initialized\");\n//            }\n//            else\n//            {\n//                Debug.LogError(\"Unable to initialize OVRPlugin_MixedReality\");\n//                return;\n//            }\n//        }\n//\n//        if (!OVRPlugin.IsMixedRealityInitialized())\n//        {\n//            return;\n//        }\n//\n//        OVRPlugin.UpdateExternalCamera();\n//#if !OVR_ANDROID_MRC\n//        OVRPlugin.UpdateCameraDevices();\n//#endif\n//\n//#if OVR_ANDROID_MRC\n//        useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\n//#endif\n//\n//        if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\n//        {\n//            currentComposition.Cleanup();\n//            currentComposition = null;\n//        }\n//\n//        if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\n//        {\n//            if (currentComposition == null)\n//            {\n//                currentComposition = new OVRExternalComposition(parentObject, mainCamera, configuration);\n//            }\n//        }\n//        else\n//        {\n//            Debug.LogError(\"Unknown/Unsupported CompositionMethod : \" + configuration.compositionMethod);\n//            return;\n//        }\n//\n//        currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\n//    }\n//Here's the definition of function call in another component.\n//Related code from /Assets/Oculus/VR/Scripts/Composition/OVRExternalComposition.cs:\nusing System;\nusing UnityEngine;\nusing System.Collections.Generic;\nusing System.Threading;\nusing UnityEngine.Rendering;\nusing Object = UnityEngine.Object;\nusing UnityEngine.Rendering.Universal;\n\n//    private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\n//        OVRMixedRealityCaptureConfiguration configuration)\n//    {\n//        if (mainCamera.gameObject != previousMainCameraObject)\n//        {\n//            Debug.LogFormat(\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\",\n//                mainCamera.gameObject.name);\n//\n//            OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\n//            backgroundCamera = null;\n//            OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\n//            foregroundCamera = null;\n//\n//            RefreshCameraRig(parentObject, mainCamera);\n//\n//            Debug.Assert(backgroundCameraGameObject == null);\n//            if (configuration.instantiateMixedRealityCameraGameObject != null)\n//            {\n//                backgroundCameraGameObject =\n//                    configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\n//                        OVRManager.MrcCameraType.Background);\n//            }\n//            else\n//            {\n//                backgroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\n//            }\n//\n//            backgroundCameraGameObject.name = \"OculusMRC_BackgroundCamera\";\n//            backgroundCameraGameObject.transform.parent =\n//                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\n//            if (backgroundCameraGameObject.GetComponent<AudioListener>())\n//            {\n//                Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\n//            }\n//\n//            if (backgroundCameraGameObject.GetComponent<OVRManager>())\n//            {\n//                Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\n//            }\n//\n//            backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\n//            backgroundCamera.tag = \"Untagged\";\n//#if USING_MRC_COMPATIBLE_URP_VERSION\n//            var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\n//            if (backgroundCamData != null)\n//            {\n//                backgroundCamData.allowXRRendering = false;\n//            }\n//#elif USING_URP\n//            Debug.LogError(\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\");\n//#else\n//            backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\n//#endif\n//            backgroundCamera.depth = 99990.0f;\n//            backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\n//            backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\n//                                           configuration.extraVisibleLayers;\n//#if OVR_ANDROID_MRC\n//            backgroundCamera.targetTexture = mrcRenderTextureArray[0];\n//            if (!renderCombinedFrame)\n//            {\n//                backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\n//            }\n//#endif\n//\n//            Debug.Assert(foregroundCameraGameObject == null);\n//            if (configuration.instantiateMixedRealityCameraGameObject != null)\n//            {\n//                foregroundCameraGameObject =\n//                    configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\n//                        OVRManager.MrcCameraType.Foreground);\n//            }\n//            else\n//            {\n//                foregroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\n//            }\n//\n//            foregroundCameraGameObject.name = \"OculusMRC_ForgroundCamera\";\n//            foregroundCameraGameObject.transform.parent =\n//                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\n//            if (foregroundCameraGameObject.GetComponent<AudioListener>())\n//            {\n//                Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\n//            }\n//\n//            if (foregroundCameraGameObject.GetComponent<OVRManager>())\n//            {\n//                Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\n//            }\n//\n//            foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\n//            foregroundCamera.tag = \"Untagged\";\n#if USING_MRC_COMPATIBLE_URP_VERSION\n//            var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\n//            if (foregroundCamData != null)\n//            {\n//                foregroundCamData.allowXRRendering = false;\n//            }\n#elif USING_URP\n//            Debug.LogError(\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\");\n#else\n//            foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\n#endif\n//            foregroundCamera.depth =\n//                backgroundCamera.depth + 1.0f; // enforce the forground be rendered after the background\n//            foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\n//            foregroundCamera.clearFlags = CameraClearFlags.Color;\n#if OVR_ANDROID_MRC\n//            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\n#else\n//            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\n#endif\n//            foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\n//                                           configuration.extraVisibleLayers;\n//\n#if OVR_ANDROID_MRC\n//            if (renderCombinedFrame)\n//            {\n//                foregroundCamera.targetTexture = mrcRenderTextureArray[0];\n//            }\n//            else\n//            {\n//                foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\n//                foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\n//            }\n#endif\n//\n//\n//\n//\n//\n//\n//            previousMainCameraObject = mainCamera.gameObject;\n//        }\n//    }\n```"
}