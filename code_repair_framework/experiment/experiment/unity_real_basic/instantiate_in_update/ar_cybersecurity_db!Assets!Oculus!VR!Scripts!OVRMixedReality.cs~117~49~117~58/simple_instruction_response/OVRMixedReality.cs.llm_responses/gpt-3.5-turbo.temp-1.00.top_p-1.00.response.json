"{\"id\":\"chatcmpl-B3IaUKv9rGP86W2CP9jJspcHCGVBt\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\npublic static void Update(GameObject parentObject, Camera mainCamera,\\n      OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n{\\n    if (!OVRPlugin.initialized)\\n    {\\n        Debug.LogError(\\\"OVRPlugin not initialized\\\");\\n        return;\\n    }\\n\\n    if (!OVRPlugin.IsMixedRealityInitialized())\\n    {\\n        OVRPlugin.InitializeMixedReality();\\n        if (OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            Debug.Log(\\\"OVRPlugin_MixedReality initialized\\\");\\n        }\\n        else\\n        {\\n            Debug.LogError(\\\"Unable to initialize OVRPlugin_MixedReality\\\");\\n            return;\\n        }\\n    }\\n\\n    if (!OVRPlugin.IsMixedRealityInitialized())\\n    {\\n        return;\\n    }\\n\\n    OVRPlugin.UpdateExternalCamera();\\n#if !OVR_ANDROID_MRC\\n    OVRPlugin.UpdateCameraDevices();\\n#endif\\n\\n#if OVR_ANDROID_MRC\\n    useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\\n#endif\\n\\n    if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\\n    {\\n        currentComposition.Cleanup();\\n        currentComposition = null;\\n    }\\n\\n    if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\\n    {\\n        if (currentComposition == null)\\n        {\\n            currentComposition = new OVRExternalComposition(parentObject, mainCamera, configuration);\\n        }\\n    }\\n    else\\n    {\\n        Debug.LogError(\\\"Unknown/Unsupported CompositionMethod : \\\" + configuration.compositionMethod);\\n        return;\\n    }\\n\\n    currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (mainCamera.gameObject != previousMainCameraObject)\\n        {\\n            Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n                mainCamera.gameObject.name);\\n\\n            SetBackgroundCamera(parentObject, mainCamera, configuration);\\n            SetForegroundCamera(parentObject, mainCamera, configuration);\\n\\n            previousMainCameraObject = mainCamera.gameObject;\\n        }\\n    }\\n\\n    private void SetBackgroundCamera(GameObject parentObject, Camera mainCamera, OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\\n        backgroundCamera = null;\\n\\n        RefreshCameraRig(parentObject, mainCamera);\\n\\n        SetCameraObject(mainCamera, OVRManager.MrcCameraType.Background, configuration, ref backgroundCamera, ref backgroundCameraGameObject);\\n    }\\n\\n    private void SetForegroundCamera(GameObject parentObject, Camera mainCamera, OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\\n        foregroundCamera = null;\\n\\n        SetCameraObject(mainCamera, OVRManager.MrcCameraType.Foreground, configuration, ref foregroundCamera, ref foregroundCameraGameObject);\\n    }\\n\\n    private void SetCameraObject(Camera mainCamera, OVRManager.MrcCameraType cameraType, OVRMixedRealityCaptureConfiguration configuration, ref Camera camera, ref GameObject cameraObject)\\n    {\\n        cameraObject = configuration.instantiateMixedRealityCameraGameObject != null ?\\n            configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject, cameraType) : Object.Instantiate(mainCamera.gameObject);\\n\\n        cameraObject.name = cameraType == OVRManager.MrcCameraType.Background ? \\\"OculusMRC_BackgroundCamera\\\" : \\\"OculusMRC_ForgroundCamera\\\";\\n        cameraObject.transform.parent = cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n\\n        if (cameraObject.TryGetComponent(out AudioListener audioListenerComponent))\\n        {\\n            Object.Destroy(audioListenerComponent);\\n        }\\n\\n        if (cameraObject.TryGetComponent(out OVRManager ovrManagerComponent))\\n        {\\n            Object.Destroy(ovrManagerComponent);\\n        }\\n\\n        camera = cameraObject.GetComponent<Camera>();\\n        camera.tag = \\\"Untagged\\\";\\n\\n        SetCameraConfiguration(camera, cameraType, configuration);\\n\\n        SetCameraTexture(camera, cameraType, configuration);\\n    }\\n\\n    private void SetCameraConfiguration(Camera camera, OVRManager.MrcCameraType cameraType, OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        camera.depth = cameraType == OVRManager.MrcCameraType.Background ? 99990.0f : backgroundCamera.depth + 1.0f;\\n\\n        if (cameraType == OVRManager.MrcCameraType.Foreground)\\n        {\\n            camera.clearFlags = CameraClearFlags.Color;\\n            camera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n        }\\n        else\\n        {\\n            camera.rect = new Rect(cameraType == OVRManager.MrcCameraType.Background ? 0.0f : 0.5f, 0.0f, 0.5f, 1.0f);\\n            camera.cullingMask = (camera.cullingMask & ~configuration.extraHiddenLayers) | configuration.extraVisibleLayers;\\n        }\\n    }\\n\\n    private void SetCameraTexture(Camera camera, OVRManager.MrcCameraType cameraType, OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (cameraType == OVRManager.MrcCameraType.Background)\\n        {\\n            camera.targetTexture = mrcRenderTextureArray[0];\\n        }\\n        else\\n        {\\n            if (renderCombinedFrame)\\n            {\\n                camera.targetTexture = mrcRenderTextureArray[0];\\n            }\\n            else\\n            {\\n                camera.targetTexture = mrcForegroundRenderTextureArray[0];\\n                camera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n        }\\n    }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n    OVRMixedRealityCaptureConfiguration configuration)\\n{\\n    if (mainCamera.gameObject != previousMainCameraObject)\\n    {\\n        Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n            mainCamera.gameObject.name);\\n\\n        OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\\n        backgroundCamera = null;\\n        OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\\n        foregroundCamera = null;\\n\\n        RefreshCameraRig(parentObject, mainCamera);\\n\\n        Debug.Assert(backgroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            backgroundCameraGameObject =\\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                    OVRManager.MrcCameraType.Background);\\n        }\\n        else\\n        {\\n            backgroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\\n        }\\n\\n        backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n        backgroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n        backgroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n        if (backgroundCamData != null)\\n        {\\n            backgroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        backgroundCamera.depth = 99990.0f;\\n        backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n        backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                       configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n        backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        if (!renderCombinedFrame)\\n        {\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        Debug.Assert(foregroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            foregroundCameraGameObject =\\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                    OVRManager.MrcCameraType.Foreground);\\n        }\\n        else\\n        {\\n            foregroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\\n        }\\n\\n        foregroundCameraGameObject.name = \\\"OculusMRC_ForegroundCamera\\\";\\n        foregroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n        foregroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n        if (foregroundCamData != null)\\n        {\\n            foregroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        foregroundCamera.depth =\\n            backgroundCamera.depth + 1.0f; // enforce the foreground be rendered after the background\\n        foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n        foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n        foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                       configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n        if (renderCombinedFrame)\\n        {\\n            foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        }\\n        else\\n        {\\n            foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n            foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        previousMainCameraObject = mainCamera.gameObject;\\n    }\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    public static void Update(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n    {\\n        if (!OVRPlugin.initialized)\\n        {\\n            Debug.LogError(\\\"OVRPlugin not initialized\\\");\\n            return;\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            OVRPlugin.InitializeMixedReality();\\n            if (OVRPlugin.IsMixedRealityInitialized())\\n            {\\n                Debug.Log(\\\"OVRPlugin_MixedReality initialized\\\");\\n            }\\n            else\\n            {\\n                Debug.LogError(\\\"Unable to initialize OVRPlugin_MixedReality\\\");\\n                return;\\n            }\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            return;\\n        }\\n\\n        OVRPlugin.UpdateExternalCamera();\\n#if !OVR_ANDROID_MRC\\n        OVRPlugin.UpdateCameraDevices();\\n#endif\\n\\n#if OVR_ANDROID_MRC\\n        useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\\n#endif\\n\\n        if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\\n        {\\n            currentComposition.Cleanup();\\n            currentComposition = null;\\n        }\\n\\n        if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\\n        {\\n            if (currentComposition == null)\\n            {\\n                currentComposition = new OVRExternalComposition(parentObject, mainCamera, configuration);\\n            }\\n        }\\n        else\\n        {\\n            Debug.LogError(\\\"Unknown/Unsupported CompositionMethod : \\\" + configuration.compositionMethod);\\n            return;\\n        }\\n\\n        currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"private static class OVRCompositionUtil\\n{\\n    public static void SafeDestroy(ref GameObject obj)\\n    {\\n        if (obj != null)\\n        {\\n            Object.Destroy(obj);\\n            obj = null;\\n        }\\n    }\\n}\\n\\ninternal static class OVRMixedReality\\n{\\n    public static bool useFakeExternalCamera = false;\\n\\n    public static Vector3 fakeCameraFloorLevelPosition = new Vector3(0.0f, 2.0f, -0.5f);\\n    public static Vector3 fakeCameraEyeLevelPosition = fakeCameraFloorLevelPosition - new Vector3(0.0f, 1.8f, 0.0f);\\n\\n    public static Quaternion fakeCameraRotation = Quaternion.LookRotation((new Vector3(0.0f, fakeCameraFloorLevelPosition.y, 0.0f) - fakeCameraFloorLevelPosition).normalized, Vector3.up);\\n\\n    public static float fakeCameraFov = 60.0f;\\n    public static float fakeCameraAspect = 16.0f / 9.0f;\\n\\n    public static OVRComposition currentComposition = null;\\n\\n    public static void Update(GameObject parentObject, Camera mainCamera, OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n    {\\n        if (!OVRPlugin.initialized)\\n        {\\n            Debug.LogError(\\\"OVRPlugin not initialized\\\");\\n            return;\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            OVRPlugin.InitializeMixedReality();\\n            if (OVRPlugin.IsMixedRealityInitialized())\\n            {\\n                Debug.Log(\\\"OVRPlugin_MixedReality initialized\\\");\\n            }\\n            else\\n            {\\n                Debug.LogError(\\\"Unable to initialize OVRPlugin_MixedReality\\\");\\n                return;\\n            }\\n        }\\n\\n        if (!OVRPlugin.IsMixedRealityInitialized())\\n        {\\n            return;\\n        }\\n\\n        OVRPlugin.UpdateExternalCamera();\\n#if !OVR_ANDROID_MRC\\n        OVRPlugin.UpdateCameraDevices();\\n#endif\\n\\n#if OVR_ANDROID_MRC\\n        useFakeExternalCamera = OVRPlugin.Media.UseMrcDebugCamera();\\n#endif\\n\\n        if (currentComposition != null && (currentComposition.CompositionMethod() != configuration.compositionMethod))\\n        {\\n            currentComposition.Cleanup();\\n            currentComposition = null;\\n        }\\n\\n        if (configuration.compositionMethod == OVRManager.CompositionMethod.External)\\n        {\\n            if (currentComposition == null)\\n            {\\n                currentComposition = new OVRExternalComposition(parentObject, mainCamera, configuration);\\n            }\\n        }\\n        else\\n        {\\n            Debug.LogError(\\\"Unknown/Unsupported CompositionMethod : \\\" + configuration.compositionMethod);\\n            return;\\n        }\\n\\n        currentComposition.Update(parentObject, mainCamera, configuration, trackingOrigin);\\n    }\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740126134,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":3120,\"prompt_tokens\":2953,\"total_tokens\":6073,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"