"{\"id\":\"chatcmpl-B1sQuV56OgSGs7NBdPUZDpLhl4g0v\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ball;\\n\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n\\n    private void Start()\\n    {\\n        // Instantiate ball and set it inactive initially.\\n        currentBall = Instantiate(ball);\\n        currentBall.SetActive(false);\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            // Activate and position the ball when the action button is pressed.\\n            currentBall.transform.position = rightControllerPivot.transform.position;\\n            currentBall.transform.rotation = Quaternion.identity;\\n            currentBall.transform.parent = rightControllerPivot.transform;\\n            currentBall.SetActive(true);\\n            ballGrabbed = true;\\n        }\\n        \\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            // Release the ball when the action button is released.\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            ballGrabbed = false;\\n\\n            // Deactivate the ball after release if desired\\n            currentBall.SetActive(false);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ballPrefab;\\n\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n    private ObjectPool<GameObject> ballPool;\\n\\n    private void Awake()\\n    {\\n        ballPool = new ObjectPool<GameObject>(() => Instantiate(ballPrefab), ball => ball.SetActive(true), ball => ball.SetActive(false));\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            currentBall = ballPool.Get();\\n            currentBall.transform.position = rightControllerPivot.transform.position;\\n            currentBall.transform.rotation = Quaternion.identity;\\n            currentBall.transform.parent = rightControllerPivot.transform;\\n            ballGrabbed = true;\\n        } \\n\\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            ballPool.Release(currentBall);\\n            ballGrabbed = false;\\n        }\\n    }\\n\\n    private class ObjectPool<T>\\n    {\\n        private readonly System.Func<T> createFunc;\\n        private readonly System.Action<T> onGet;\\n        private readonly System.Action<T> onRelease;\\n        private readonly Stack<T> pool;\\n\\n        public ObjectPool(System.Func<T> createFunc, System.Action<T> onGet = null, System.Action<T> onRelease = null)\\n        {\\n            this.createFunc = createFunc;\\n            this.onGet = onGet ?? (item => { });\\n            this.onRelease = onRelease ?? (item => { });\\n            pool = new Stack<T>();\\n        }\\n\\n        public T Get()\\n        {\\n            T item;\\n            if (pool.Count == 0)\\n            {\\n                item = createFunc();\\n            }\\n            else\\n            {\\n                item = pool.Pop();\\n            }\\n            onGet(item);\\n            return item;\\n        }\\n\\n        public void Release(T item)\\n        {\\n            onRelease(item);\\n            pool.Push(item);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ball;\\n\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n    private Queue<GameObject> ballPool = new Queue<GameObject>();\\n    private const int poolSize = 10;\\n\\n    private void Start()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject pooledBall = Instantiate(ball);\\n            pooledBall.SetActive(false);\\n            ballPool.Enqueue(pooledBall);\\n        }\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            if (ballPool.Count > 0)\\n            {\\n                currentBall = ballPool.Dequeue();\\n                currentBall.transform.position = rightControllerPivot.transform.position;\\n                currentBall.transform.rotation = Quaternion.identity;\\n                currentBall.SetActive(true);\\n                currentBall.transform.parent = rightControllerPivot.transform;\\n            }\\n            else\\n            {\\n                currentBall = Instantiate(ball, rightControllerPivot.transform.position, Quaternion.identity);\\n                currentBall.transform.parent = rightControllerPivot.transform;\\n            }\\n            ballGrabbed = true;\\n        }\\n        \\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            ballGrabbed = false;\\n            \\n            currentBall.SetActive(false);\\n            ballPool.Enqueue(currentBall);\\n            currentBall = null;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ball;\\n\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n    private GameObject[] ballPool;\\n    private int poolSize = 5;\\n    private int currentPoolIndex = 0;\\n\\n    private void Start()\\n    {\\n        InitializeBallPool();\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            currentBall = GetPooledBall();\\n            if (currentBall != null)\\n            {\\n                currentBall.transform.position = rightControllerPivot.transform.position;\\n                currentBall.transform.rotation = Quaternion.identity;\\n                currentBall.transform.parent = rightControllerPivot.transform;\\n                currentBall.SetActive(true);\\n                ballGrabbed = true;\\n            }\\n        }\\n\\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            ballGrabbed = false;\\n        }\\n    }\\n\\n    private void InitializeBallPool()\\n    {\\n        ballPool = new GameObject[poolSize];\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            ballPool[i] = Instantiate(ball);\\n            ballPool[i].SetActive(false);\\n        }\\n    }\\n\\n    private GameObject GetPooledBall()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            currentPoolIndex = (currentPoolIndex + 1) % poolSize;\\n            if (!ballPool[currentPoolIndex].activeInHierarchy)\\n            {\\n                return ballPool[currentPoolIndex];\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ball;\\n\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n    private GameObject[] ballPool;\\n    private int poolSize = 10;\\n    private int currentIndex = 0;\\n\\n    private void Start()\\n    {\\n        // Initialize the ball pool\\n        ballPool = new GameObject[poolSize];\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            ballPool[i] = Instantiate(ball, Vector3.zero, Quaternion.identity);\\n            ballPool[i].SetActive(false);\\n        }\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            // Activate a ball from the pool instead of instantiating a new one\\n            currentBall = ballPool[currentIndex];\\n            currentBall.transform.position = rightControllerPivot.transform.position;\\n            currentBall.transform.rotation = Quaternion.identity;\\n            currentBall.transform.parent = rightControllerPivot.transform;\\n            currentBall.SetActive(true);\\n            ballGrabbed = true;\\n\\n            // Update the pool index for the next use\\n            currentIndex = (currentIndex + 1) % poolSize;\\n        }\\n\\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            currentBall = null;\\n            ballGrabbed = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787268,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_f3927aa00d\",\"usage\":{\"completion_tokens\":2177,\"prompt_tokens\":397,\"total_tokens\":2574,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"