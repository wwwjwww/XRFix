"{\"id\":\"chatcmpl-B4fhdJpZA5ViHPbBsoZuu5r00qYRH\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ballPrefab;\\n\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n    private Queue<GameObject> ballPool = new Queue<GameObject>();\\n\\n    private void Start()\\n    {\\n        for (int i = 0; i < 10; i++)\\n        {\\n            GameObject ball = Instantiate(ballPrefab);\\n            ball.SetActive(false);\\n            ballPool.Enqueue(ball);\\n        }\\n    }\\n\\n    private GameObject GetBallFromPool()\\n    {\\n        if (ballPool.Count > 0)\\n        {\\n            GameObject ball = ballPool.Dequeue();\\n            ball.SetActive(true);\\n            return ball;\\n        }\\n        else\\n        {\\n            GameObject newBall = Instantiate(ballPrefab);\\n            return newBall;\\n        }\\n    }\\n\\n    private void ReturnBallToPool(GameObject ball)\\n    {\\n        ball.SetActive(false);\\n        ballPool.Enqueue(ball);\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            currentBall = GetBallFromPool();\\n            currentBall.transform.position = rightControllerPivot.transform.position;\\n            currentBall.transform.rotation = Quaternion.identity;\\n            currentBall.transform.parent = rightControllerPivot.transform;\\n            ballGrabbed = true;\\n        }\\n\\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            ballGrabbed = false;\\n            ReturnBallToPool(currentBall);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ball;\\n    [SerializeField] private int poolSize = 10;\\n\\n    private GameObject[] ballPool;\\n    private int currentIndex = 0;\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n\\n    private void Start()\\n    {\\n        InitializeBallPool();\\n    }\\n\\n    private void InitializeBallPool()\\n    {\\n        ballPool = new GameObject[poolSize];\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            ballPool[i] = Instantiate(ball, rightControllerPivot.transform.position, Quaternion.identity);\\n            ballPool[i].SetActive(false);\\n        }\\n    }\\n\\n    private GameObject GetPooledBall()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            int index = (currentIndex + i) % poolSize;\\n            if (!ballPool[index].activeInHierarchy)\\n            {\\n                currentIndex = index;\\n                return ballPool[index];\\n            }\\n        }\\n        return null;\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            currentBall = GetPooledBall();\\n            if (currentBall != null)\\n            {\\n                currentBall.transform.position = rightControllerPivot.transform.position;\\n                currentBall.transform.rotation = Quaternion.identity;\\n                currentBall.SetActive(true);\\n                currentBall.transform.parent = rightControllerPivot.transform;\\n                ballGrabbed = true;\\n            }\\n        }\\n\\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            currentBall.SetActive(false);\\n            ballGrabbed = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ball;\\n    \\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n    private GameObject[] ballPool;\\n    private int poolSize = 10;\\n    private int poolIndex = 0;\\n\\n    private void Awake()\\n    {\\n        // Initialize the object pool\\n        ballPool = new GameObject[poolSize];\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            ballPool[i] = Instantiate(ball);\\n            ballPool[i].SetActive(false);\\n        }\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            currentBall = GetPooledBall();\\n            if (currentBall != null)\\n            {\\n                currentBall.transform.position = rightControllerPivot.transform.position;\\n                currentBall.transform.rotation = Quaternion.identity;\\n                currentBall.transform.parent = rightControllerPivot.transform;\\n                currentBall.SetActive(true);\\n                ballGrabbed = true;\\n            }\\n        }\\n\\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            ballGrabbed = false;\\n        }\\n    }\\n\\n    private GameObject GetPooledBall()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            poolIndex = (poolIndex + 1) % poolSize;\\n            if (!ballPool[poolIndex].activeInHierarchy)\\n            {\\n                return ballPool[poolIndex];\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ball;\\n\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n    private ObjectPool<GameObject> ballPool;\\n\\n    private void Start()\\n    {\\n        ballPool = new ObjectPool<GameObject>(() => Instantiate(ball), 10);\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            currentBall = ballPool.GetObject();\\n            currentBall.transform.position = rightControllerPivot.transform.position;\\n            currentBall.transform.rotation = Quaternion.identity;\\n            currentBall.transform.parent = rightControllerPivot.transform;\\n            ballGrabbed = true;\\n        }\\n\\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            ballGrabbed = false;\\n\\n            ballPool.ReturnObject(currentBall);\\n            currentBall = null;\\n        }\\n    }\\n\\n    private class ObjectPool<T>\\n    {\\n        private readonly Queue<T> objects = new Queue<T>();\\n        private readonly Func<T> createFunc;\\n        private readonly int initialCount;\\n\\n        public ObjectPool(Func<T> createFunc, int initialCount)\\n        {\\n            this.createFunc = createFunc;\\n            this.initialCount = initialCount;\\n\\n            for (int i = 0; i < initialCount; i++)\\n            {\\n                objects.Enqueue(createFunc());\\n            }\\n        }\\n\\n        public T GetObject()\\n        {\\n            return objects.Count > 0 ? objects.Dequeue() : createFunc();\\n        }\\n\\n        public void ReturnObject(T obj)\\n        {\\n            objects.Enqueue(obj);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\npublic class BouncingBallMgr : MonoBehaviour\\n{\\n    [SerializeField] private Transform trackingspace;\\n    [SerializeField] private GameObject rightControllerPivot;\\n    [SerializeField] private OVRInput.RawButton actionBtn;\\n    [SerializeField] private GameObject ball;\\n    [SerializeField] private int poolSize = 10;\\n\\n    private GameObject[] ballPool;\\n    private int ballPoolIndex = 0;\\n    private GameObject currentBall;\\n    private bool ballGrabbed = false;\\n\\n    private void Start()\\n    {\\n        ballPool = new GameObject[poolSize];\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            ballPool[i] = Instantiate(ball, Vector3.zero, Quaternion.identity);\\n            ballPool[i].SetActive(false);\\n        }\\n    }\\n\\n    private void Update()\\n    {\\n        if (!ballGrabbed && OVRInput.GetDown(actionBtn))\\n        {\\n            currentBall = GetPooledBall();\\n            if (currentBall != null)\\n            {\\n                currentBall.transform.position = rightControllerPivot.transform.position;\\n                currentBall.transform.rotation = Quaternion.identity;\\n                currentBall.transform.parent = rightControllerPivot.transform;\\n                currentBall.SetActive(true);\\n                ballGrabbed = true;\\n            }\\n        }\\n\\n        if (ballGrabbed && OVRInput.GetUp(actionBtn))\\n        {\\n            currentBall.transform.parent = null;\\n            var ballPos = currentBall.transform.position;\\n            var vel = trackingspace.rotation * OVRInput.GetLocalControllerVelocity(OVRInput.Controller.RTouch);\\n            var angVel = OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller.RTouch);\\n            currentBall.GetComponent<BouncingBallLogic>().Release(ballPos, vel, angVel);\\n            ballGrabbed = false;\\n        }\\n    }\\n\\n    private GameObject GetPooledBall()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            int index = (ballPoolIndex + i) % poolSize;\\n            if (!ballPool[index].activeInHierarchy)\\n            {\\n                ballPoolIndex = index;\\n                return ballPool[index];\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740453317,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":2306,\"prompt_tokens\":403,\"total_tokens\":2709,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"