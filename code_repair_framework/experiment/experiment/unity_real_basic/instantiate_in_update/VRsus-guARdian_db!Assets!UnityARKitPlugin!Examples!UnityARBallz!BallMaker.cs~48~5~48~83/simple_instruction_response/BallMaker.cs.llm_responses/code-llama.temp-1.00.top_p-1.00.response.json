{
    "code_repairing_0": "Here are the fixed code snippets from the 'BallMaker.cs' script:\n\n```\n//Using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.iOS;\n\npublic class BallMaker : MonoBehaviour {\n\n\tpublic GameObject ballPrefab;\n\tpublic float createHeight;\n\tpublic float maxRayDistance = 30.0f;\n\tpublic LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\n\tprivate MaterialPropertyBlock props;\n\n\n\tvoid Start () {\n\t\tprops = new MaterialPropertyBlock ();\n\n\t}\n\n\tvoid CreateBall(Vector3 atPosition)\n\t{\n\t\tGameObject ballGO = Instantiate (ballPrefab, atPosition, Quaternion.identity);\n\t\t\t\n\t\t\n\t\tfloat r = Random.Range(0.0f, 1.0f);\n\t\tfloat g = Random.Range(0.0f, 1.0f);\n\t\tfloat b = Random.Range(0.0f, 1.0f);\n\n\t\tprops.SetColor(\"_InstanceColor\", new Color(r, g, b));\n\n\t\tMeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\n\t\trenderer.SetPropertyBlock(props);\n\n\t}\n\n}\n\n// Here is the fixed Update() method:\nvoid Update () {\n\t#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device\n\tif (Input.GetMouseButtonDown (0)) \n\t{\n\t\tRay ray = Camera.main.ScreenPointToRay (Input.mousePosition);\n\t\tRaycastHit hit;\n\n\n\n\t\tif (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \n\t\t{\n\t\t\tCreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\n\n\n\t\t\tDebug.Log (string.Format (\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\", hit.point.x, hit.point.y, hit.point.z));\n\t\t}\n\t}\n\t#else\n\tif (Input.touchCount > 0 )\n\t{\n\t\tvar touch = Input.GetTouch(0);\n\t\tif (touch.phase == TouchPhase.Began)\n\t\t{\n\t\t\tvar screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\n\t\t\tARPoint point = new ARPoint {\n\t\t\t\tx = screenPosition.x,\n\t\t\t\ty = screenPosition.y\n\t\t\t};\n\t\t\t\t\t\n\t\t\tList<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \n\t\t\t\tARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\n\t\t\tif (hitResults.Count > 0) {\n\t\t\t\tforeach (var hitResult in hitResults) {\n\t\t\t\t\tVector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\n\t\t\t\t\tCreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\t#endif\n\n}\n```",
    "code_repairing_1": "```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.iOS;\n\npublic class BallMaker : MonoBehaviour {\n\n\tpublic GameObject ballPrefab;\n\tpublic float createHeight;\n\tpublic float maxRayDistance = 30.0f;\n\tpublic LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\n\tprivate MaterialPropertyBlock props;\n\n\tvoid Start() {\n\t\tprops = new MaterialPropertyBlock();\n\t}\n\n\tvoid CreateBall(Vector3 atPosition) {\n\t\tGameObject ballGO = Instantiate(ballPrefab, atPosition, Quaternion.identity);\n\n\t\tfloat r = Random.Range(0.0f, 1.0f);\n\t\tfloat g = Random.Range(0.0f, 1.0f);\n\t\tfloat b = Random.Range(0.0f, 1.0f);\n\n\t\tprops.SetColor(\"_InstanceColor\", new Color(r, g, b));\n\n\t\tMeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\n\t\trenderer.SetPropertyBlock(props);\n\t}\n\n\tvoid Update() {\n\t\t#if UNITY_EDITOR //we will only use this script on the editor side, though there is nothing that would prevent it from working on device\n\t\tif (Input.GetMouseButtonDown(0)) {\n\t\t\tRay ray = Camera.main.ScreenPointToRay(Input.mousePosition);\n\t\t\tRaycastHit hit;\n\n\t\t\tif (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer)) {\n\t\t\t\tCreateBall(new Vector3(hit.point.x, hit.point.y + createHeight, hit.point.z));\n\n\t\t\t\tDebug.Log(string.Format(\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\", hit.point.x, hit.point.y, hit.point.z));\n\t\t\t}\n\t\t}\n\t\t#else\n\t\tif (Input.touchCount > 0) {\n\t\t\tvar touch = Input.GetTouch(0);\n\t\t\tif (touch.phase == TouchPhase.Began) {\n\t\t\t\tvar screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\n\t\t\t\tARPoint point = new ARPoint {\n\t\t\t\t\tx = screenPosition.x,\n\t\t\t\t\ty = screenPosition.y\n\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\tList<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, \n\t\t\t\t\tARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\n\t\t\t\tif (hitResults.Count > 0) {\n\t\t\t\t\tforeach (var hitResult in hitResults) {\n\t\t\t\t\t\tVector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\n\t\t\t\t\t\tCreateBall(new Vector3(position.x, position.y + createHeight, position.z));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t#endif\n\t}\n}\n```",
    "code_repairing_2": "Fixed Code:\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BallMaker : MonoBehaviour\n{\n    public GameObject ballPrefab;\n    public float createHeight;\n    public float maxRayDistance = 30.0f;\n    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\n    private MaterialPropertyBlock props;\n\n\n    void Start()\n    {\n        props = new MaterialPropertyBlock();\n    }\n\n    void CreateBall()\n    {\n        GameObject ballGO = Instantiate(ballPrefab, new Vector3(1.0f, createHeight, 1.0f), Quaternion.identity);\n\n        float r = Random.Range(0.0f, 1.0f);\n        float g = Random.Range(0.0f, 1.0f);\n        float b = Random.Range(0.0f, 1.0f);\n\n        props.SetColor(\"_InstanceColor\", new Color(r, g, b));\n\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\n        renderer.SetPropertyBlock(props);\n    }\n\n\n//\tvoid CreateBall(Vector3 atPosition)\n//\t{\n//\t\tGameObject ballGO = Instantiate (ballPrefab, atPosition, Quaternion.identity);\n//\t\t\t\n//\t\t\n//\t\tfloat r = Random.Range(0.0f, 1.0f);\n//\t\tfloat g = Random.Range(0.0f, 1.0f);\n//\t\tfloat b = Random.Range(0.0f, 1.0f);\n//\n//\t\tprops.SetColor(\"_InstanceColor\", new Color(r, g, b));\n//\n//\t\tMeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\n//\t\trenderer.SetPropertyBlock(props);\n//\n//\t}\n\n\n//\tvoid Update () {\n//\t\t#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device\n//\t\tif (Input.GetMouseButtonDown (0)) \n//\t\t{\n//\t\t\tRay ray = Camera.main.ScreenPointToRay (Input.mousePosition);\n//\t\t\tRaycastHit hit;\n//\n//\n//\n//\t\t\tif (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \n//\t\t\t{\n//\t\t\t\tCreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\n//\n//\n//\t\t\t\tDebug.Log (string.Format (\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\", hit.point.x, hit.point.y, hit.point.z));\n//\t\t\t}\n//\t\t}\n//\t\t#else\n//\t\tif (Input.touchCount > 0 )\n//\t\t{\n//\t\t\tvar touch = Input.GetTouch(0);\n//\t\t\tif (touch.phase == TouchPhase.Began)\n//\t\t\t{\n//\t\t\t\tvar screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\n//\t\t\t\tARPoint point = new ARPoint {\n//\t\t\t\t\tx = screenPosition.x,\n//\t\t\t\t\ty = screenPosition.y\n//\t\t\t\t};\n//\t\t\t\t\t\t\n//\t\t\t\tList<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \n//\t\t\t\t\tARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\n//\t\t\t\tif (hitResults.Count > 0) {\n//\t\t\t\t\tforeach (var hitResult in hitResults) {\n//\t\t\t\t\t\tVector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\n//\t\t\t\t\t\tCreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\n//\t\t\t\t\t\tbreak;\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\n//\t\t\t}\n//\t\t}\n//\t\t#endif\n//\n//\t}\n}",
    "code_repairing_3": "```\n//Here're the buggy code lines from /Assets/UnityARKitPlugin/Examples/UnityARBallz/BallMaker.cs:\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.iOS;\n\npublic class BallMaker : MonoBehaviour {\n\n\tpublic GameObject ballPrefab;\n\tpublic float createHeight;\n\tpublic float maxRayDistance = 30.0f;\n\tpublic LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\n\tprivate MaterialPropertyBlock props;\n\n\n\tvoid Start () {\n\t\tprops = new MaterialPropertyBlock ();\n\n\t}\n\n\tvoid CreateBall(Vector3 atPosition)\n\t{\n\t\tGameObject ballGO = Instantiate (ballPrefab, atPosition, Quaternion.identity);\n\t\t\t\n\t\t\n\t\tfloat r = Random.Range(0.0f, 1.0f);\n\t\tfloat g = Random.Range(0.0f, 1.0f);\n\t\tfloat b = Random.Range(0.0f, 1.0f);\n\n\t\tprops.SetColor(\"_InstanceColor\", new Color(r, g, b));\n\n\t\tMeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\n\t\trenderer.SetPropertyBlock(props);\n\n\t}\n\n\n//\tvoid CreateBall(Vector3 atPosition)\n//\t{\n//\t\tGameObject ballGO = Instantiate (ballPrefab, atPosition, Quaternion.identity);\n//\t\t\t\n//\t\t\n//\t\tfloat r = Random.Range(0.0f, 1.0f);\n//\t\tfloat g = Random.Range(0.0f, 1.0f);\n//\t\tfloat b = Random.Range(0.0f, 1.0f);\n//\n//\t\tprops.SetColor(\"_InstanceColor\", new Color(r, g, b));\n//\n//\t\tMeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\n//\t\trenderer.SetPropertyBlock(props);\n//\n//\t}\n\n\n//\tvoid Update () {\n//\t\t#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device\n//\t\tif (Input.GetMouseButtonDown (0)) \n//\t\t{\n//\t\t\tRay ray = Camera.main.ScreenPointToRay (Input.mousePosition);\n//\t\t\tRaycastHit hit;\n//\n//\n//\n//\t\t\tif (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \n//\t\t\t{\n//\t\t\t\tCreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\n//\n//\n//\t\t\t\tDebug.Log (string.Format (\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\", hit.point.x, hit.point.y, hit.point.z));\n//\t\t\t}\n//\t\t}\n//\t\t#else\n//\t\tif (Input.touchCount > 0 )\n//\t\t{\n//\t\t\tvar touch = Input.GetTouch(0);\n//\t\t\tif (touch.phase == TouchPhase.Began)\n//\t\t\t{\n//\t\t\t\tvar screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\n//\t\t\t\tARPoint point = new ARPoint {\n//\t\t\t\t\tx = screenPosition.x,\n//\t\t\t\t\ty = screenPosition.y\n//\t\t\t\t};\n//\t\t\t\t\t\t\n//\t\t\t\tList<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \n//\t\t\t\t\tARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\n//\t\t\t\tif (hitResults.Count > 0) {\n//\t\t\t\t\tforeach (var hitResult in hitResults) {\n//\t\t\t\t\t\tVector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\n//\t\t\t\t\t\tCreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\n//\t\t\t\t\t\tbreak;\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\n//\t\t\t}\n//\t\t}\n//\t\t#endif\n//\n//\t}\n\n// FIXED CODE:\n\n \tvoid Update () {\n\n\t//#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device\n\t\tif (Input.GetMouseButtonDown (0)) \n\t\t{\n\t\t\tVector2 mousePos = Input.mousePosition;\n\t\t\tRay ray = new Ray(mousePos, Vector3.forward);\n\t\t\tRaycastHit hit;\n\n\n\n\t\t\tif (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \n\t\t\t{\n\t\t\t\tCreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\n\n\n\t\t\t\tDebug.Log (string.Format (\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\", hit.point.x, hit.point.y, hit.point.z));\n\t\t\t}\n\t\t}\n\t//#else\n\t\tif (Input.touchCount > 0 )\n\t\t{\n\t\t\tvar touch = Input.GetTouch(0);\n\t\t\tif (touch.phase == TouchPhase.Began)\n\t\t\t{\n\t\t\t\tvar screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\n\t\t\t\tARPoint point = new ARPoint {\n\t\t\t\t\tx = screenPosition.x,\n\t\t\t\t\ty = screenPosition.y\n\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\tList<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \n\t\t\t\t\tARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\n\t\t\t\tif (hitResults.Count > 0) {\n\t\t\t\t\tforeach (var hitResult in hitResults) {\n\t\t\t\t\t\tVector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\n\t\t\t\t\t\tCreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t#endif\n\n\t}\n```",
    "code_repairing_4": "//Here are the fixed code snippets from /Assets/UnityARKitPlugin/Examples/UnityARBallz/BallMaker.cs:\n\n`:\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.iOS;\n\npublic class BallMaker : MonoBehaviour {\n\n\tpublic GameObject ballPrefab;\n\tpublic float createHeight;\n\tpublic float maxRayDistance = 30.0f;\n\tpublic LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\n\tprivate MaterialPropertyBlock props;\n\n\n\tvoid Start () {\n\t\tprops = new MaterialPropertyBlock ();\n\n\t}\n\n\tvoid CreateBall(Vector3 atPosition)\n\t{\n\t\tGameObject ballGO = Instantiate (ballPrefab, atPosition, Quaternion.identity);\n\t\t\t\n\t\t\n\t\tfloat r = Random.Range(0.0f, 1.0f);\n\t\tfloat g = Random.Range(0.0f, 1.0f);\n\t\tfloat b = Random.Range(0.0f, 1.0f);\n\n\t\tprops.SetColor(\"_InstanceColor\", new Color(r, g, b));\n\n\t\tMeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\n\t\trenderer.SetPropertyBlock(props);\n\n\t}\n\n\n\tvoid Update () {\n\t\t#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device\n\t\tif (Input.GetMouseButtonDown (0)) \n\t\t{\n\t\t\tRay ray = Camera.main.ScreenPointToRay (Input.mousePosition);\n\t\t\tRaycastHit hit;\n\n\n\n\t\t\tif (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \n\t\t\t{\n\t\t\t\tCreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\n\n\n\t\t\t\tDebug.Log (string.Format (\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\", hit.point.x, hit.point.y, hit.point.z));\n\t\t\t}\n\t\t}\n\t\t#else\n\t\tif (Input.touchCount > 0 )\n\t\t{\n\t\t\tvar touch = Input.GetTouch(0);\n\t\t\tif (touch.phase == TouchPhase.Began)\n\t\t\t{\n\t\t\t\tvar screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\n\t\t\t\tARPoint point = new ARPoint {\n\t\t\t\t\tx = screenPosition.x,\n\t\t\t\t\ty = screenPosition.y\n\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\tList<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \n\t\t\t\t\tARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\n\t\t\t\tif (hitResults.Count > 0) {\n\t\t\t\t\tforeach (var hitResult in hitResults) {\n\t\t\t\t\t\tVector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\n\t\t\t\t\t\tCreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\t#endif\n\n\t}\n\n}:`"
}