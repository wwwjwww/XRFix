"{\"id\":\"chatcmpl-B1saBLd4zWY9e5zYhJdxVIj0BL70X\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  \\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballPool;\\n    private int poolSize = 10;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        ballPool = new Queue<GameObject>();\\n\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject ball = Instantiate(ballPrefab);\\n            ball.SetActive(false);\\n            ballPool.Enqueue(ball);\\n        }\\n    }\\n\\n    void CreateBall(Vector3 atPosition)\\n    {\\n        if (ballPool.Count > 0)\\n        {\\n            GameObject ballGO = ballPool.Dequeue();\\n            ballGO.transform.position = atPosition;\\n            ballGO.SetActive(true);\\n\\n            float r = Random.Range(0.0f, 1.0f);\\n            float g = Random.Range(0.0f, 1.0f);\\n            float b = Random.Range(0.0f, 1.0f);\\n\\n            props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n            MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n            renderer.SetPropertyBlock(props);\\n        }\\n    }\\n\\n    void Update () {\\n        #if UNITY_EDITOR   \\n        if (Input.GetMouseButtonDown (0)) \\n        {\\n            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \\n            {\\n                CreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                Debug.Log (string.Format (\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0 )\\n        {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began)\\n            {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n\\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\\n                        CreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  \\n    private MaterialPropertyBlock props;\\n    private List<GameObject> ballPool;\\n    private int poolSize = 10; // Define how many balls you want to keep in the pool\\n    private int currentBallIndex = 0;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        InitializeBallPool();\\n    }\\n    \\n    void InitializeBallPool() {\\n        ballPool = new List<GameObject>();\\n        for (int i = 0; i < poolSize; i++) {\\n            GameObject ball = Instantiate(ballPrefab, Vector3.zero, Quaternion.identity);\\n            ball.SetActive(false);\\n            ballPool.Add(ball);\\n        }\\n    }\\n\\n    GameObject GetBallFromPool(Vector3 atPosition) {\\n        GameObject ball = ballPool[currentBallIndex];\\n        ball.transform.position = atPosition;\\n        ball.SetActive(true);\\n        currentBallIndex = (currentBallIndex + 1) % poolSize;\\n        return ball;\\n    }\\n\\n    void CreateBall(Vector3 atPosition) {\\n        GameObject ballGO = GetBallFromPool(atPosition);\\n        \\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n    \\n    void Update () {\\n        #if UNITY_EDITOR   \\n        if (Input.GetMouseButtonDown (0)) \\n        {\\n            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n            RaycastHit hit;\\n            \\n            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \\n            {\\n                CreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                \\n                Debug.Log (string.Format (\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0 )\\n        {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began)\\n            {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n                        \\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\\n                        CreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Fixed Code for /Assets/UnityARKitPlugin/Examples/UnityARBallz/BallMaker.cs:\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  \\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballPool = new Queue<GameObject>();\\n    public int poolSize = 10; // Define a pool size\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock();\\n        // Initialize object pool\\n        for (int i = 0; i < poolSize; i++) {\\n            GameObject ballGO = Instantiate(ballPrefab);\\n            ballGO.SetActive(false);\\n            ballPool.Enqueue(ballGO);\\n        }\\n    }\\n\\n    GameObject GetPooledBall() {\\n        if (ballPool.Count > 0) {\\n            GameObject ball = ballPool.Dequeue();\\n            ball.SetActive(true);\\n            return ball;\\n        } else {\\n            // If pool is empty, optionally instantiate a new ball\\n            return Instantiate(ballPrefab);\\n        }\\n    }\\n\\n    void CreateBall(Vector3 atPosition) {\\n        GameObject ballGO = GetPooledBall();\\n        ballGO.transform.position = atPosition;\\n        ballGO.transform.rotation = Quaternion.identity;\\n\\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n\\n    void Update() {\\n        #if UNITY_EDITOR   \\n        if (Input.GetMouseButtonDown(0)) {\\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer)) {\\n                CreateBall(new Vector3(hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                Debug.Log(string.Format(\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0) {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began) {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n                \\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n                        CreateBall(new Vector3(position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Fixed Code:\\n\\nvoid Update()\\n{\\n    #if UNITY_EDITOR\\n    if (Input.GetMouseButtonDown(0)) \\n    {\\n        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\\n        RaycastHit hit;\\n\\n        if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer))\\n        {\\n            Vector3 ballPosition = new Vector3(hit.point.x, hit.point.y + createHeight, hit.point.z);\\n            CreateBall(ballPosition);\\n\\n            Debug.Log(string.Format(\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n        }\\n    }\\n    #else\\n    if (Input.touchCount > 0)\\n    {\\n        var touch = Input.GetTouch(0);\\n        if (touch.phase == TouchPhase.Began)\\n        {\\n            var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n            ARPoint point = new ARPoint\\n            {\\n                x = screenPosition.x,\\n                y = screenPosition.y\\n            };\\n\\n            List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point,\\n                ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n            if (hitResults.Count > 0)\\n            {\\n                foreach (var hitResult in hitResults)\\n                {\\n                    Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n                    Vector3 ballPosition = new Vector3(position.x, position.y + createHeight, position.z);\\n                    CreateBall(ballPosition);\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n    #endif\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  \\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballPool;\\n    private int poolSize = 10; // Define the pool size\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        InitializeBallPool();\\n    }\\n\\n    void InitializeBallPool() {\\n        ballPool = new Queue<GameObject>();\\n        for (int i = 0; i < poolSize; i++) {\\n            GameObject ballGO = Instantiate(ballPrefab);\\n            ballGO.SetActive(false);\\n            ballPool.Enqueue(ballGO);\\n        }\\n    }\\n\\n    GameObject GetBallFromPool(Vector3 position, Quaternion rotation) {\\n        if(ballPool.Count > 0) {\\n            GameObject ballGO = ballPool.Dequeue();\\n            ballGO.transform.position = position;\\n            ballGO.transform.rotation = rotation;\\n            ballGO.SetActive(true);\\n            return ballGO;\\n        } else {\\n            GameObject ballGO = Instantiate(ballPrefab, position, rotation);\\n            return ballGO;\\n        }\\n    }\\n\\n    void HideBall(GameObject ballGO) {\\n        ballGO.SetActive(false);\\n        ballPool.Enqueue(ballGO);\\n    }\\n\\n    void CreateBall(Vector3 atPosition)\\n    {\\n        GameObject ballGO = GetBallFromPool(atPosition, Quaternion.identity);\\n            \\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n\\n    void Update () {\\n        #if UNITY_EDITOR   \\n        if (Input.GetMouseButtonDown (0)) \\n        {\\n            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer)) \\n            {\\n                CreateBall(new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                Debug.Log(string.Format(\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0 )\\n        {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began)\\n            {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint { x = screenPosition.x, y = screenPosition.y };\\n                        \\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest(point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n                        CreateBall(new Vector3(position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787843,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_b045b4af17\",\"usage\":{\"completion_tokens\":3181,\"prompt_tokens\":866,\"total_tokens\":4047,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"