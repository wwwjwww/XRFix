"{\"id\":\"chatcmpl-Brn2JOOk3Wm2v9YJxQ7nnFSUHno86\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballQueue;\\n    public int poolSize = 10;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        ballQueue = new Queue<GameObject>();\\n\\n        for (int i = 0; i < poolSize; i++) {\\n            GameObject ball = Instantiate(ballPrefab);\\n            ball.SetActive(false);\\n            ballQueue.Enqueue(ball);\\n        }\\n    }\\n\\n    GameObject GetPooledBall() {\\n        if (ballQueue.Count > 0) {\\n            GameObject ball = ballQueue.Dequeue();\\n            ball.SetActive(true);\\n            return ball;\\n        } else {\\n            GameObject ball = Instantiate(ballPrefab);\\n            ball.SetActive(false);\\n            return ball;\\n        }\\n    }\\n\\n    void ReturnToPool(GameObject ball) {\\n        ball.SetActive(false);\\n        ballQueue.Enqueue(ball);\\n    }\\n\\n    void CreateBall(Vector3 atPosition) {\\n        GameObject ballGO = GetPooledBall();\\n        ballGO.transform.position = atPosition;\\n        ballGO.transform.rotation = Quaternion.identity;\\n\\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n\\n    void Update () {\\n        #if UNITY_EDITOR\\n        if (Input.GetMouseButtonDown(0)) {\\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\\n            RaycastHit hit;\\n            if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer)) {\\n                CreateBall(new Vector3(hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                Debug.Log(string.Format(\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0) {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began) {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n\\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n                        CreateBall(new Vector3(position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\ufeffusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\\n    private MaterialPropertyBlock props;\\n    private List<GameObject> ballPool;\\n    public int poolSize = 10;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        ballPool = new List<GameObject>();\\n\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(ballPrefab);\\n            obj.SetActive(false);\\n            ballPool.Add(obj);\\n        }\\n    }\\n\\n    GameObject GetPooledBall()\\n    {\\n        for (int i = 0; i < ballPool.Count; i++)\\n        {\\n            if (!ballPool[i].activeInHierarchy)\\n            {\\n                return ballPool[i];\\n            }\\n        }\\n\\n        // Optionally, expand the pool and give a warning\\n        GameObject obj = Instantiate(ballPrefab);\\n        obj.SetActive(false);\\n        ballPool.Add(obj);\\n        Debug.LogWarning(\\\"Expanded ball pool. Consider increasing initial pool size.\\\");\\n        return obj;\\n    }\\n\\n    void CreateBall(Vector3 atPosition)\\n    {\\n        GameObject ballGO = GetPooledBall();\\n        ballGO.transform.position = atPosition;\\n        ballGO.SetActive(true);\\n        \\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n\\n    void Update () {\\n        #if UNITY_EDITOR   \\n        if (Input.GetMouseButtonDown (0)) \\n        {\\n            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \\n            {\\n                CreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\\n\\n                Debug.Log (string.Format (\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0 )\\n        {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began)\\n            {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n\\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\\n                        CreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour\\n{\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballPool;\\n    private int poolSize = 10;\\n\\n    void Start()\\n    {\\n        props = new MaterialPropertyBlock();\\n        InitializeBallPool();\\n    }\\n\\n    private void InitializeBallPool()\\n    {\\n        ballPool = new Queue<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject ball = Instantiate(ballPrefab);\\n            ball.SetActive(false);\\n            ballPool.Enqueue(ball);\\n        }\\n    }\\n\\n    private GameObject GetPooledBall()\\n    {\\n        if (ballPool.Count > 0)\\n        {\\n            GameObject ball = ballPool.Dequeue();\\n            ball.SetActive(true);\\n            return ball;\\n        }\\n        else\\n        {\\n            // Consider expanding the pool size here if necessary.\\n            GameObject ball = Instantiate(ballPrefab);\\n            return ball;\\n        }\\n    }\\n\\n    private void ReturnBallToPool(GameObject ball)\\n    {\\n        ball.SetActive(false);\\n        ballPool.Enqueue(ball);\\n    }\\n\\n    void CreateBall(Vector3 atPosition)\\n    {\\n        GameObject ballGO = GetPooledBall();\\n        ballGO.transform.position = atPosition;\\n        ballGO.transform.rotation = Quaternion.identity;\\n\\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n\\n    void Update()\\n    {\\n#if UNITY_EDITOR\\n        if (Input.GetMouseButtonDown(0))\\n        {\\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer))\\n            {\\n                CreateBall(new Vector3(hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                Debug.Log(string.Format(\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n#else\\n        if (Input.touchCount > 0)\\n        {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began)\\n            {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint\\n                {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n\\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point,\\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0)\\n                {\\n                    foreach (var hitResult in hitResults)\\n                    {\\n                        Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n                        CreateBall(new Vector3(position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n\\n            }\\n        }\\n#endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\ufeffusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\\n    private MaterialPropertyBlock props;\\n\\n    private Queue<GameObject> ballPool;\\n    public int poolSize = 10;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        InitializeBallPool();\\n    }\\n\\n    void InitializeBallPool() {\\n        ballPool = new Queue<GameObject>();\\n        for (int i = 0; i < poolSize; i++) {\\n            GameObject obj = Instantiate(ballPrefab);\\n            obj.SetActive(false);\\n            ballPool.Enqueue(obj);\\n        }\\n    }\\n\\n    GameObject GetPooledBall(Vector3 atPosition) {\\n        if (ballPool.Count > 0) {\\n            GameObject ballGO = ballPool.Dequeue();\\n            ballGO.transform.position = atPosition;\\n            ballGO.SetActive(true);\\n            return ballGO;\\n        } else {\\n            GameObject ballGO = Instantiate(ballPrefab, atPosition, Quaternion.identity);\\n            return ballGO;\\n        }\\n    }\\n\\n    void ReturnBallToPool(GameObject ballGO) {\\n        ballGO.SetActive(false);\\n        ballPool.Enqueue(ballGO);\\n    }\\n\\n#if UNITY_EDITOR\\n    void Update() {\\n        if (Input.GetMouseButtonDown (0)) \\n        {\\n            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \\n            {\\n                GameObject ballGO = GetPooledBall(new Vector3(hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                ApplyRandomColor(ballGO);\\n\\n                Debug.Log (string.Format (\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n    }\\n#else\\n    void Update() {\\n        if (Input.touchCount > 0 ) {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began) {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n\\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n                        GameObject ballGO = GetPooledBall(new Vector3(position.x, position.y + createHeight, position.z));\\n                        ApplyRandomColor(ballGO);\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n#endif\\n\\n    void ApplyRandomColor(GameObject ballGO) {\\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballPool;\\n    public int poolSize = 10;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        \\n        // Initialize ball pool\\n        ballPool = new Queue<GameObject>();\\n        for (int i = 0; i < poolSize; i++) {\\n            GameObject ball = Instantiate(ballPrefab);\\n            ball.SetActive(false);\\n            ballPool.Enqueue(ball);\\n        }\\n    }\\n\\n    GameObject GetPooledBall() {\\n        if (ballPool.Count > 0) {\\n            GameObject ball = ballPool.Dequeue();\\n            ball.SetActive(true);\\n            return ball;\\n        } else {\\n            GameObject ball = Instantiate(ballPrefab);\\n            ball.SetActive(true);\\n            return ball;\\n        }\\n    }\\n\\n    void ReturnBallToPool(GameObject ball) {\\n        ball.SetActive(false);\\n        ballPool.Enqueue(ball);\\n    }\\n\\n    void CreateBall(Vector3 atPosition) {\\n        GameObject ballGO = GetPooledBall();\\n        ballGO.transform.position = atPosition;\\n        \\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n\\n        // Schedule returning the ball to the pool\\n        StartCoroutine(ReturnBallAfterTime(ballGO, 5.0f)); // return after 5 seconds\\n    }\\n\\n    IEnumerator ReturnBallAfterTime(GameObject ball, float time) {\\n        yield return new WaitForSeconds(time);\\n        ReturnBallToPool(ball);\\n    }\\n\\n    void Update () {\\n        #if UNITY_EDITOR\\n        if (Input.GetMouseButtonDown (0)) \\n        {\\n            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \\n            {\\n                CreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                Debug.Log (string.Format (\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0 )\\n        {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began)\\n            {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n                        \\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\\n                        CreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752159579,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":3748,\"prompt_tokens\":1219,\"total_tokens\":4967,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"