using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace Valve.VR.InteractionSystem
{
    public class BalloonSpawner : MonoBehaviour
    {
        public float minSpawnTime = 5f;
        public float maxSpawnTime = 15f;
        private float nextSpawnTime;
        public GameObject balloonPrefab;

        public bool autoSpawn = true;
        public bool spawnAtStartup = true;

        public bool playSounds = true;
        public SoundPlayOneshot inflateSound;
        public SoundPlayOneshot stretchSound;

        public bool sendSpawnMessageToParent = false;

        public float scale = 1f;

        public Transform spawnDirectionTransform;
        public float spawnForce;

        public bool attachBalloon = false;

        public Balloon.BalloonColor color = Balloon.BalloonColor.Random;

        private Queue<GameObject> balloonPool = new Queue<GameObject>();
        public int poolSize = 10; // Set a reasonable pool size

        void Start()
        {
            if (balloonPrefab == null)
            {
                return;
            }

            // Initialize the balloon pool
            for (int i = 0; i < poolSize; i++)
            {
                GameObject balloon = Instantiate(balloonPrefab);
                balloon.SetActive(false);
                balloonPool.Enqueue(balloon);
            }

            if (autoSpawn && spawnAtStartup)
            {
                SpawnBalloon(color);
                nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;
            }

            StartCoroutine(SpawnRoutine());
        }

        private IEnumerator SpawnRoutine()
        {
            while (true)
            {
                if (balloonPrefab == null)
                {
                    yield break;
                }

                if (Time.time > nextSpawnTime && autoSpawn)
                {
                    SpawnBalloon(color);
                    nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;
                }

                yield return null;
            }
        }

        public GameObject SpawnBalloon(Balloon.BalloonColor color = Balloon.BalloonColor.Red)
        {
            if (balloonPrefab == null || balloonPool.Count == 0)
            {
                return null;
            }

            GameObject balloon = balloonPool.Dequeue();
            balloon.transform.position = transform.position;
            balloon.transform.rotation = transform.rotation;
            balloon.transform.localScale = new Vector3(scale, scale, scale);
            balloon.SetActive(true);

            if (attachBalloon)
            {
                balloon.transform.parent = transform;
            }

            if (sendSpawnMessageToParent)
            {
                if (transform.parent != null)
                {
                    transform.parent.SendMessage("OnBalloonSpawned", balloon, SendMessageOptions.DontRequireReceiver);
                }
            }

            if (playSounds)
            {
                if (inflateSound != null)
                {
                    inflateSound.Play();
                }
                if (stretchSound != null)
                {
                    stretchSound.Play();
                }
            }

            balloon.GetComponentInChildren<Balloon>().SetColor(color);
            if (spawnDirectionTransform != null)
            {
                balloon.GetComponentInChildren<Rigidbody>().AddForce(spawnDirectionTransform.forward * spawnForce);
            }

            return balloon;
        }

        private void ReturnBalloonToPool(GameObject balloon)
        {
            balloon.SetActive(false);
            balloon.transform.parent = null; // Detach from parent if attached
            balloonPool.Enqueue(balloon);
        }
    }
}
