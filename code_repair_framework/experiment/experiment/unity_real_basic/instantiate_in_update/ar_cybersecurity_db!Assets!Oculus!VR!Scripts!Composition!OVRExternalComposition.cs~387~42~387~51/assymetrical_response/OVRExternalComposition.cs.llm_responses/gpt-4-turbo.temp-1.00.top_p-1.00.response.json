"{\"id\":\"chatcmpl-B4fiaGXyD4WNgOaUqAAT5apRLOgSv\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprivate Queue<GameObject> backgroundCameraPool = new Queue<GameObject>();\\nprivate Queue<GameObject> foregroundCameraPool = new Queue<GameObject>();\\n\\nprivate GameObject GetPooledCameraObject(Queue<GameObject> pool, GameObject originalCameraObject)\\n{\\n    if (pool.Count > 0)\\n    {\\n        return pool.Dequeue();\\n    }\\n    else\\n    {\\n        return Object.Instantiate(originalCameraObject);\\n    }\\n}\\n\\nprivate void PreloadCameraObjects(GameObject original, int poolSize, Queue<GameObject> pool)\\n{\\n    for (int i = 0; i < poolSize; i++)\\n    {\\n        GameObject cameraObject = Object.Instantiate(original);\\n        cameraObject.SetActive(false);\\n        pool.Enqueue(cameraObject);\\n    }\\n}\\n\\nprivate void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n    OVRMixedRealityCaptureConfiguration configuration)\\n{\\n    if (mainCamera.gameObject != previousMainCameraObject)\\n    {\\n        Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n            mainCamera.gameObject.name);\\n\\n        if (backgroundCameraGameObject != null)\\n        {\\n            backgroundCameraGameObject.SetActive(false);\\n            backgroundCameraPool.Enqueue(backgroundCameraGameObject);\\n            backgroundCameraGameObject = null;\\n        }\\n\\n        if (foregroundCameraGameObject != null)\\n        {\\n            foregroundCameraGameObject.SetActive(false);\\n            foregroundCameraPool.Enqueue(foregroundCameraGameObject);\\n            foregroundCameraGameObject = null;\\n        }\\n\\n        RefreshCameraRig(parentObject, mainCamera);\\n\\n        Debug.Assert(backgroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            backgroundCameraGameObject =\\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                    OVRManager.MrcCameraType.Background);\\n        }\\n        else\\n        {\\n            backgroundCameraGameObject = GetPooledCameraObject(backgroundCameraPool, mainCamera.gameObject);\\n        }\\n\\n        backgroundCameraGameObject.SetActive(true);\\n        backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n        backgroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n        backgroundCamera.tag = \\\"Untagged\\\";\\n\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n        if (backgroundCamData != null)\\n        {\\n            backgroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        backgroundCamera.depth = 99990.0f;\\n        backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n        backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                        configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n        backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        if (!renderCombinedFrame)\\n        {\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        Debug.Assert(foregroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            foregroundCameraGameObject =\\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                    OVRManager.MrcCameraType.Foreground);\\n        }\\n        else\\n        {\\n            foregroundCameraGameObject = GetPooledCameraObject(foregroundCameraPool, mainCamera.gameObject);\\n        }\\n\\n        foregroundCameraGameObject.SetActive(true);\\n        foregroundCameraGameObject.name = \\\"OculusMRC_ForgroundCamera\\\";\\n        foregroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n        foregroundCamera.tag = \\\"Untagged\\\";\\n\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n        if (foregroundCamData != null)\\n        {\\n            foregroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        foregroundCamera.depth =\\n            backgroundCamera.depth + 1.0f;\\n        foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n        foregroundCamera.clearFlags = CameraClearFlags.Color;\\n\\n#if OVR_ANDROID_MRC\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n        foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                        configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n        if (renderCombinedFrame)\\n        {\\n            foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        }\\n        else\\n        {\\n            foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n            foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        previousMainCameraObject = mainCamera.gameObject;\\n    }\\n}\\n\\n// Call PreloadCameraObjects in an initialization or setup method\\nprivate void InitializeCameraPools(GameObject mainCameraGameObject)\\n{\\n    PreloadCameraObjects(mainCameraGameObject, 2, backgroundCameraPool);\\n    PreloadCameraObjects(mainCameraGameObject, 2, foregroundCameraPool);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing UnityEngine;\\nusing System.Collections.Generic;\\nusing UnityEngine.Rendering;\\nusing Object = UnityEngine.Object;\\nusing UnityEngine.Rendering.Universal;\\n\\npublic class OVRExternalComposition : MonoBehaviour\\n{\\n    // Define object pools for background and foreground camera game objects\\n    private Queue<GameObject> backgroundCameraPool = new Queue<GameObject>();\\n    private Queue<GameObject> foregroundCameraPool = new Queue<GameObject>();\\n\\n    private void Awake()\\n    {\\n        // Pre-instantiate a pool of camera game objects\\n        PreInstantiateCameraObjects();\\n    }\\n\\n    private void PreInstantiateCameraObjects()\\n    {\\n        for (int i = 0; i < 5; i++)  // Define pool size, for example, 5\\n        {\\n            GameObject backgroundCamObj = new GameObject(\\\"BackgroundCameraPoolObj\\\");\\n            backgroundCamObj.SetActive(false);\\n            backgroundCameraPool.Enqueue(backgroundCamObj);\\n\\n            GameObject foregroundCamObj = new GameObject(\\\"ForegroundCameraPoolObj\\\");\\n            foregroundCamObj.SetActive(false);\\n            foregroundCameraPool.Enqueue(foregroundCamObj);\\n        }\\n    }\\n\\n    private GameObject GetPooledObject(Queue<GameObject> pool)\\n    {\\n        if (pool.Count > 0)\\n        {\\n            GameObject pooledObj = pool.Dequeue();\\n            pooledObj.SetActive(true);\\n            return pooledObj;\\n        }\\n        return null;\\n    }\\n\\n    private void ReturnObjectToPool(GameObject obj, Queue<GameObject> pool)\\n    {\\n        obj.SetActive(false);\\n        pool.Enqueue(obj);\\n    }\\n\\n    private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (mainCamera.gameObject != previousMainCameraObject)\\n        {\\n            Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed, rebind camera to {0}\\\", mainCamera.gameObject.name);\\n\\n            if (backgroundCameraGameObject != null)\\n            {\\n                backgroundCameraGameObject.SetActive(false);\\n                ReturnObjectToPool(backgroundCameraGameObject, backgroundCameraPool);\\n            }\\n            backgroundCamera = null;\\n\\n            if (foregroundCameraGameObject != null)\\n            {\\n                foregroundCameraGameObject.SetActive(false);\\n                ReturnObjectToPool(foregroundCameraGameObject, foregroundCameraPool);\\n            }\\n            foregroundCamera = null;\\n\\n            RefreshCameraRig(parentObject, mainCamera);\\n\\n            Debug.Assert(backgroundCameraGameObject == null);\\n            backgroundCameraGameObject = GetPooledObject(backgroundCameraPool);\\n            if (backgroundCameraGameObject == null)\\n            {\\n                if (configuration.instantiateMixedRealityCameraGameObject != null)\\n                {\\n                    backgroundCameraGameObject =\\n                        configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                            OVRManager.MrcCameraType.Background);\\n                }\\n                else\\n                {\\n                    backgroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\\n                }\\n            }\\n\\n            backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n            backgroundCameraGameObject.transform.parent =\\n                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n            if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n            {\\n                Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n            }\\n\\n            if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n            {\\n                Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n            }\\n\\n            backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n            backgroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n            var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n            if (backgroundCamData != null)\\n            {\\n                backgroundCamData.allowXRRendering = false;\\n            }\\n#elif USING_URP\\n            Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n            backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n            backgroundCamera.depth = 99990.0f;\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n            backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n            backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n            if (!renderCombinedFrame)\\n            {\\n                backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n#endif\\n\\n            Debug.Assert(foregroundCameraGameObject == null);\\n            foregroundCameraGameObject = GetPooledObject(foregroundCameraPool);\\n            if (foregroundCameraGameObject == null)\\n            {\\n                if (configuration.instantiateMixedRealityCameraGameObject != null)\\n                {\\n                    foregroundCameraGameObject =\\n                        configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                            OVRManager.MrcCameraType.Foreground);\\n                }\\n                else\\n                {\\n                    foregroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\\n                }\\n            }\\n\\n            foregroundCameraGameObject.name = \\\"OculusMRC_ForegroundCamera\\\";\\n            foregroundCameraGameObject.transform.parent =\\n                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n            if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n            {\\n                Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n            }\\n\\n            if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n            {\\n                Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n            }\\n\\n            foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n            foregroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n            var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n            if (foregroundCamData != null)\\n            {\\n                foregroundCamData.allowXRRendering = false;\\n            }\\n#elif USING_URP\\n            Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n            foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n            foregroundCamera.depth = backgroundCamera.depth + 1.0f; // enforce the foreground be rendered after the background\\n            foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n            foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n            foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n            if (renderCombinedFrame)\\n            {\\n                foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n            }\\n            else\\n            {\\n                foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n                foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n#endif\\n\\n            previousMainCameraObject = mainCamera.gameObject;\\n        }\\n    }\\n\\n    // Other methods and logic unchanged...\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Define a pool for the camera GameObjects\\nprivate Queue<GameObject> cameraObjectPool = new Queue<GameObject>();\\n\\nprivate GameObject GetPooledCameraObject(GameObject template)\\n{\\n    if (cameraObjectPool.Count > 0)\\n    {\\n        GameObject cameraObject = cameraObjectPool.Dequeue();\\n        cameraObject.SetActive(true);\\n        return cameraObject;\\n    }\\n    else\\n    {\\n        return Object.Instantiate(template);\\n    }\\n}\\n\\nprivate void ReturnCameraObjectToPool(GameObject cameraObject)\\n{\\n    cameraObject.SetActive(false);\\n    cameraObjectPool.Enqueue(cameraObject);\\n}\\n\\nprivate void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n    OVRMixedRealityCaptureConfiguration configuration)\\n{\\n    if (mainCamera.gameObject != previousMainCameraObject)\\n    {\\n        Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n            mainCamera.gameObject.name);\\n\\n        // Return old camera objects to pool\\n        if (backgroundCameraGameObject != null)\\n        {\\n            ReturnCameraObjectToPool(backgroundCameraGameObject);\\n            backgroundCamera = null;\\n        }\\n        if (foregroundCameraGameObject != null)\\n        {\\n            ReturnCameraObjectToPool(foregroundCameraGameObject);\\n            foregroundCamera = null;\\n        }\\n\\n        RefreshCameraRig(parentObject, mainCamera);\\n\\n        Debug.Assert(backgroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            backgroundCameraGameObject =\\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                    OVRManager.MrcCameraType.Background);\\n        }\\n        else\\n        {\\n            backgroundCameraGameObject = GetPooledCameraObject(mainCamera.gameObject);\\n        }\\n\\n        backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n        backgroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n        backgroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n        if (backgroundCamData != null)\\n        {\\n            backgroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        backgroundCamera.depth = 99990.0f;\\n        backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n        backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                        configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n        backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        if (!renderCombinedFrame)\\n        {\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        Debug.Assert(foregroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            foregroundCameraGameObject =\\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                    OVRManager.MrcCameraType.Foreground);\\n        }\\n        else\\n        {\\n            foregroundCameraGameObject = GetPooledCameraObject(mainCamera.gameObject);\\n        }\\n\\n        foregroundCameraGameObject.name = \\\"OculusMRC_ForgroundCamera\\\";\\n        foregroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n        foregroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n        if (foregroundCamData != null)\\n        {\\n            foregroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        foregroundCamera.depth =\\n            backgroundCamera.depth + 1.0f; // enforce the forground be rendered after the background\\n        foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n        foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n        foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                        configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n        if (renderCombinedFrame)\\n        {\\n            foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        }\\n        else\\n        {\\n            foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n            foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        previousMainCameraObject = mainCamera.gameObject;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing UnityEngine;\\nusing System.Collections.Generic;\\nusing System.Threading;\\nusing UnityEngine.Rendering;\\nusing Object = UnityEngine.Object;\\nusing UnityEngine.Rendering.Universal;\\n\\n// Declare object pools for background and foreground cameras\\nList<GameObject> backgroundCameraPool = new List<GameObject>();\\nList<GameObject> foregroundCameraPool = new List<GameObject>();\\n\\nprivate void InitializeCameraObjectPools(int poolSize, Camera mainCamera)\\n{\\n    for (int i = 0; i < poolSize; i++)\\n    {\\n        GameObject backgroundCam = Object.Instantiate(mainCamera.gameObject);\\n        backgroundCam.name = \\\"OculusMRC_BackgroundCamera\\\" + i;\\n        backgroundCameraPool.Add(backgroundCam);\\n\\n        GameObject foregroundCam = Object.Instantiate(mainCamera.gameObject);\\n        foregroundCam.name = \\\"OculusMRC_ForegroundCamera\\\" + i;\\n        foregroundCameraPool.Add(foregroundCam);\\n    }\\n}\\n\\nprivate GameObject GetCameraFromPool(List<GameObject> pool)\\n{\\n    if (pool.Count > 0)\\n    {\\n        GameObject cameraObj = pool[0];\\n        pool.RemoveAt(0);\\n        return cameraObj;\\n    }\\n    return null;\\n}\\n\\nprivate void ReturnCameraToPool(GameObject cameraObj, List<GameObject> pool)\\n{\\n    if (cameraObj != null)\\n    {\\n        pool.Add(cameraObj);\\n    }\\n}\\n\\nprivate void RefreshCameraObjects(GameObject parentObject, Camera mainCamera, OVRMixedRealityCaptureConfiguration configuration)\\n{\\n    if (mainCamera.gameObject != previousMainCameraObject)\\n    {\\n        Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\", mainCamera.gameObject.name);\\n\\n        // Return previous cameras to pool\\n        ReturnCameraToPool(backgroundCameraGameObject, backgroundCameraPool);\\n        ReturnCameraToPool(foregroundCameraGameObject, foregroundCameraPool);\\n        backgroundCamera = null;\\n        foregroundCamera = null;\\n\\n        RefreshCameraRig(parentObject, mainCamera);\\n\\n        Debug.Assert(backgroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            backgroundCameraGameObject = configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject, OVRManager.MrcCameraType.Background);\\n        }\\n        else\\n        {\\n            backgroundCameraGameObject = GetCameraFromPool(backgroundCameraPool) ?? Object.Instantiate(mainCamera.gameObject);\\n        }\\n\\n        backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n        backgroundCameraGameObject.transform.parent = cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n        backgroundCamera.tag = \\\"Untagged\\\";\\n\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n        if (backgroundCamData != null)\\n        {\\n            backgroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        backgroundCamera.depth = 99990.0f;\\n        backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n        backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) | configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n        backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        if (!renderCombinedFrame)\\n        {\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        Debug.Assert(foregroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            foregroundCameraGameObject = configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject, OVRManager.MrcCameraType.Foreground);\\n        }\\n        else\\n        {\\n            foregroundCameraGameObject = GetCameraFromPool(foregroundCameraPool) ?? Object.Instantiate(mainCamera.gameObject);\\n        }\\n\\n        foregroundCameraGameObject.name = \\\"OculusMRC_ForegroundCamera\\\";\\n        foregroundCameraGameObject.transform.parent = cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n        foregroundCamera.tag = \\\"Untagged\\\";\\n\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n        if (foregroundCamData != null)\\n        {\\n            foregroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        foregroundCamera.depth = backgroundCamera.depth + 1.0f; // enforce the foreground be rendered after the background\\n        foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n        foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n        foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) | configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n        if (renderCombinedFrame)\\n        {\\n            foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        }\\n        else\\n        {\\n            foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n            foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        previousMainCameraObject = mainCamera.gameObject;\\n    }\\n}\\n\\npublic override void Start()\\n{\\n    int poolSize = 3; // Example pool size, modify as needed\\n    GameObject initialGameObject = // Obtain a reference to the initial GameObject\\n    Camera initialMainCamera = // Obtain a reference to the initial Camera\\n\\n    InitializeCameraObjectPools(poolSize, initialMainCamera);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing UnityEngine;\\nusing System.Collections.Generic;\\nusing UnityEngine.Rendering;\\nusing Object = UnityEngine.Object;\\nusing UnityEngine.Rendering.Universal;\\n\\nprivate Queue<GameObject> backgroundCameraPool = new Queue<GameObject>();\\nprivate Queue<GameObject> foregroundCameraPool = new Queue<GameObject>();\\n\\nprivate void Awake()\\n{\\n    // Pre-instantiate GameObjects for pooling, assuming a reasonable maximum pool size\\n    for (int i = 0; i < 5; i++)\\n    {\\n        GameObject bgCamera = new GameObject(\\\"OculusMRC_BackgroundCamera\\\");\\n        bgCamera.SetActive(false);\\n        backgroundCameraPool.Enqueue(bgCamera);\\n\\n        GameObject fgCamera = new GameObject(\\\"OculusMRC_ForgroundCamera\\\");\\n        fgCamera.SetActive(false);\\n        foregroundCameraPool.Enqueue(fgCamera);\\n    }\\n}\\n\\nprivate GameObject GetCameraFromPool(Queue<GameObject> pool, GameObject reference)\\n{\\n    if (pool.Count > 0)\\n    {\\n        var cameraObject = pool.Dequeue();\\n        cameraObject.SetActive(true);\\n        cameraObject.transform.SetPositionAndRotation(reference.transform.position, reference.transform.rotation);\\n        return cameraObject;\\n    }\\n    return Object.Instantiate(reference);\\n}\\n\\nprivate void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n    OVRMixedRealityCaptureConfiguration configuration)\\n{\\n    if (mainCamera.gameObject != previousMainCameraObject)\\n    {\\n        Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n            mainCamera.gameObject.name);\\n\\n        if (backgroundCameraGameObject != null)\\n        {\\n            backgroundCameraGameObject.SetActive(false);\\n            backgroundCameraPool.Enqueue(backgroundCameraGameObject);\\n        }\\n        backgroundCameraGameObject = GetCameraFromPool(backgroundCameraPool, mainCamera.gameObject);\\n\\n        if (foregroundCameraGameObject != null)\\n        {\\n            foregroundCameraGameObject.SetActive(false);\\n            foregroundCameraPool.Enqueue(foregroundCameraGameObject);\\n        }\\n        foregroundCameraGameObject = GetCameraFromPool(foregroundCameraPool, mainCamera.gameObject);\\n\\n        RefreshCameraRig(parentObject, mainCamera);\\n\\n        Debug.Assert(backgroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            backgroundCameraGameObject =\\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                    OVRManager.MrcCameraType.Background);\\n        }\\n\\n        backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n        backgroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n        backgroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n        if (backgroundCamData != null)\\n        {\\n            backgroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        backgroundCamera.depth = 99990.0f;\\n        backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n        backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                        configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n        backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        if (!renderCombinedFrame)\\n        {\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        Debug.Assert(foregroundCameraGameObject == null);\\n        if (configuration.instantiateMixedRealityCameraGameObject != null)\\n        {\\n            foregroundCameraGameObject =\\n                configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                    OVRManager.MrcCameraType.Foreground);\\n        }\\n\\n        foregroundCameraGameObject.name = \\\"OculusMRC_ForgroundCamera\\\";\\n        foregroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n        foregroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n        if (foregroundCamData != null)\\n        {\\n            foregroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        foregroundCamera.depth =\\n            backgroundCamera.depth + 1.0f; // enforce the foreground be rendered after the background\\n        foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n        foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n        foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                        configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n        if (renderCombinedFrame)\\n        {\\n            foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        }\\n        else\\n        {\\n            foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n            foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        previousMainCameraObject = mainCamera.gameObject;\\n    }\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740453376,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":7107,\"prompt_tokens\":2934,\"total_tokens\":10041,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"