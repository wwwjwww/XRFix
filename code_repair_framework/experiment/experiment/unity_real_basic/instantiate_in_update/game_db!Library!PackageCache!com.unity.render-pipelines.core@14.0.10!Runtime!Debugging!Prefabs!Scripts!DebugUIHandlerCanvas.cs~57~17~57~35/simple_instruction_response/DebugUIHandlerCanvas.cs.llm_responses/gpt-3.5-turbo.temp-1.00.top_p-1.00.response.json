"{\"id\":\"chatcmpl-B3Iaqn0GaSVCWloQl2rIrk4Djt1oN\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Update()\\n{\\n    int state = DebugManager.instance.GetState();\\n    if (m_DebugTreeState != state)\\n    {\\n        ResetAllHierarchy();\\n    }\\n\\n    HandleInput();\\n\\n\\n    if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n        m_UIPanels[m_SelectedPanel].UpdateScroll();\\n}\\n```\\n```csharp\\nvoid Rebuild()\\n{\\n\\n    m_PrefabsMap.Clear();\\n    foreach (var bundle in prefabs)\\n    {\\n        var type = Type.GetType(bundle.type);\\n\\n        if (type != null && bundle.prefab != null)\\n            m_PrefabsMap.Add(type, bundle.prefab);\\n    }\\n\\n    m_UIPanels.Clear();\\n\\n    m_DebugTreeState = DebugManager.instance.GetState();\\n    var panels = DebugManager.instance.panels;\\n\\n    DebugUIHandlerWidget selectedWidget = null;\\n    foreach (var panel in panels)\\n    {\\n        if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n            continue;\\n\\n        var go = Instantiate(panelPrefab, transform, false).gameObject;\\n        go.name = panel.displayName;\\n\\n        var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n        uiPanel.SetPanel(panel);\\n        uiPanel.Canvas = this;\\n        m_UIPanels.Add(uiPanel);\\n        var container = go.GetComponent<DebugUIHandlerContainer>();\\n        DebugUIHandlerWidget selected = null;\\n        Traverse(panel, container.contentHolder, null, ref selected);\\n\\n        if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n        {\\n            selectedWidget = selected;\\n        }\\n    }\\n\\n    ActivatePanel(m_SelectedPanel, selectedWidget);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = System.Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = GameObject.Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }        \\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nvoid Update()\\n{\\n    int state = DebugManager.instance.GetState();\\n    if (m_DebugTreeState != state)\\n    {\\n        ResetAllHierarchy();\\n    }\\n\\n    HandleInput();\\n\\n\\n    if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n        m_UIPanels[m_SelectedPanel].UpdateScroll();\\n}\\n\\nvoid Rebuild()\\n{\\n    m_PrefabsMap.Clear();\\n    foreach (var bundle in prefabs)\\n    {\\n        Type type = Type.GetType(bundle.type);\\n\\n        if (type != null && bundle.prefab != null)\\n            m_PrefabsMap.Add(type, bundle.prefab);\\n    }\\n\\n    m_UIPanels.Clear();\\n\\n    m_DebugTreeState = DebugManager.instance.GetState();\\n    List<DebugUI.Widget> panels = DebugManager.instance.panels;\\n\\n    DebugUI.Widget selectedWidget = null;\\n    foreach (var panel in panels)\\n    {\\n        if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n            continue;\\n\\n        GameObject go = Instantiate(panelPrefab, transform, false);\\n        go.name = panel.displayName;\\n\\n        RectTransform rectTransform = go.GetComponent<RectTransform>();\\n\\n        var safeAreaRect = new Rect(Vector2.zero, Vector2.one);\\n        Vector2 margin = new Vector2(5f, 5f);\\n        float scaleRatio = 1f;\\n#if UNITY_ANDROID || UNITY_IPHONE\\n        Rect parentRect = (RectTransform)transform.parent;\\n        var parentWidth = Mathf.Min(parentRect.rect.width, parentRect.rect.height);\\n        scaleRatio = parentWidth / Mathf.Min(Screen.height, Screen.width);\\n\\n        safeAreaRect = Screen.safeArea;\\n        var safeAreaOffsetLeft = safeAreaRect.x * scaleRatio;\\n        var safeAreaOffsetTop = -safeAreaRect.y * scaleRatio;\\n        var safeAreaOffset = new Vector2(safeAreaOffsetLeft, safeAreaOffsetTop) + margin;\\n#endif\\n\\n        rectTransform.anchoredPosition = safeAreaOffset;\\n        rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n\\n        var uiPanel = go.GetComponent<DebugUI.Panel>();\\n        uiPanel.SetPanel(panel);\\n        uiPanel.Canvas = this;\\n        m_UIPanels.Add(uiPanel);\\n        var container = go.GetComponent<DebugUI.Container>();\\n        DebugUI.Widget selected = null;\\n        Traverse(panel, container.contentHolder, null, ref selected);\\n\\n        if (selected != null && selected.GetFieldInfo().queryPath.Contains(panel.queryPath))\\n        {\\n            selectedWidget = selected;\\n        }\\n    }\\n\\n    ActivatePanel(m_SelectedPanel, selectedWidget);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740126156,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":2032,\"prompt_tokens\":1048,\"total_tokens\":3080,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"