"{\"id\":\"chatcmpl-Brn13cbaxbSH7TYvwTDktteztUbCt\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    public int poolSize = 10;\\n    private List<GameObject> arrowPool;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n    }\\n\\n    void Start()\\n    {\\n        arrowPool = new List<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(arrowPrefab);\\n            obj.SetActive(false);\\n            arrowPool.Add(obj);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    GameObject GetPooledArrow()\\n    {\\n        for (int i = 0; i < arrowPool.Count; i++)\\n        {\\n            if (!arrowPool[i].activeInHierarchy)\\n            {\\n                return arrowPool[i];\\n            }\\n        }\\n\\n        GameObject obj = Instantiate(arrowPrefab);\\n        obj.SetActive(false);\\n        arrowPool.Add(obj);\\n        Debug.LogWarning(\\\"Expanded arrow pool. Consider increasing initial pool size.\\\");\\n        return obj;\\n    }\\n\\n    void ReturnArrowToPool(GameObject obj)\\n    {\\n        obj.SetActive(false);\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n\\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = GetPooledArrow();\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            currentArrow.SetActive(true);\\n            hasArrow = true;\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            // Implement the firing logic, presumably setting isAttached to false or similar.\\n            // After firing the arrow, directly deactivate it to reset the arrow's state.\\n            ReturnArrowToPool(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            // Implement the throw logic, similar to fire.\\n            ReturnArrowToPool(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private List<GameObject> arrowPool;\\n    public int poolSize = 5;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n    }\\n\\n    void Start()\\n    {\\n        arrowPool = new List<GameObject>();\\n\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(arrowPrefab);\\n            obj.SetActive(false);\\n            arrowPool.Add(obj);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            } \\n            else if (isAttached) \\n            {\\n                Fire();\\n            }\\n        }\\n        else \\n        {\\n            ThrowArrow();\\n        }\\n    }\\n\\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = GetPooledArrow();\\n            if (currentArrow != null)\\n            {\\n                currentArrow.transform.SetParent(controler.transform, false);\\n                currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n                currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n                hasArrow = true;\\n            }\\n        }\\n    }\\n\\n    private GameObject GetPooledArrow()\\n    {\\n        for (int i = 0; i < arrowPool.Count; i++)\\n        {\\n            if (!arrowPool[i].activeInHierarchy)\\n            {\\n                arrowPool[i].SetActive(true);\\n                return arrowPool[i];\\n            }\\n        }\\n\\n        Debug.LogWarning(\\\"No available arrows in pool. Consider increasing pool size.\\\");\\n        return null;\\n    }\\n\\n    public void ReturnArrowToPool(GameObject arrow)\\n    {\\n        arrow.SetActive(false);\\n        arrow.transform.SetParent(null);\\n    }\\n\\n    public void Fire()\\n    {\\n        // Implementation for firing the arrow\\n        isAttached = false;\\n        hasArrow = false;\\n        // Return arrow to pool after firing\\n        ReturnArrowToPool(currentArrow);\\n        currentArrow = null;\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            // Implementation for throwing arrow\\n            isAttached = false;\\n            hasArrow = false;\\n            // Return arrow to pool after throwing\\n            ReturnArrowToPool(currentArrow);\\n            currentArrow = null;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private List<GameObject> arrowPool;\\n    public int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n\\n        arrowPool = new List<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrowObj = Instantiate(arrowPrefab);\\n            arrowObj.SetActive(false);\\n            arrowPool.Add(arrowObj);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else ThrowArrow();\\n    }\\n\\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = GetPooledArrow();\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n            isAttached = true;\\n        }\\n    }\\n\\n    private GameObject GetPooledArrow()\\n    {\\n        for (int i = 0; i < arrowPool.Count; i++)\\n        {\\n            if (!arrowPool[i].activeInHierarchy)\\n            {\\n                arrowPool[i].SetActive(true);\\n                return arrowPool[i];\\n            }\\n        }\\n        \\n        GameObject arrowObj = Instantiate(arrowPrefab);\\n        arrowObj.SetActive(false);\\n        arrowPool.Add(arrowObj);\\n        Debug.LogWarning(\\\"Expanded arrow pool. Consider increasing initial pool size.\\\");\\n        return arrowObj;\\n    }\\n    \\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            // Implement the logic for throwing an arrow\\n            // For example, you can detach and activate the Rigidbody\\n            isAttached = false;\\n            hasArrow = false;\\n            currentArrow.SetActive(false);\\n            currentArrow = null;\\n        }\\n    }\\n    \\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            // Implement the logic for firing an arrow\\n            // Example: Detach from parent and apply a force\\n            currentArrow.transform.SetParent(null);\\n            Rigidbody rb = currentArrow.GetComponent<Rigidbody>();\\n            rb.isKinematic = false;\\n            rb.AddForce(controler.transform.forward * 500); // Adjust force value as needed\\n            isAttached = false;\\n            hasArrow = false;\\n            currentArrow = null;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    private List<GameObject> arrowPool;\\n    public int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        \\n        InitializeArrowPool();\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void InitializeArrowPool()\\n    {\\n        arrowPool = new List<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Add(arrow);\\n        }\\n    }\\n\\n    GameObject GetPooledArrow()\\n    {\\n        foreach (var arrow in arrowPool)\\n        {\\n            if (!arrow.activeInHierarchy)\\n            {\\n                return arrow;\\n            }\\n        }\\n\\n        GameObject newArrow = Instantiate(arrowPrefab);\\n        newArrow.SetActive(false);\\n        arrowPool.Add(newArrow);\\n        Debug.LogWarning(\\\"Expanded arrow pool. Consider increasing initial pool size.\\\");\\n        return newArrow;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            } \\n            else if (isAttached) \\n            {\\n                Fire();\\n            }\\n        }\\n        else \\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = GetPooledArrow();\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            currentArrow.SetActive(true);\\n            hasArrow = true;\\n        }\\n    }\\n\\n    public void ReturnArrowToPool(GameObject arrow)\\n    {\\n        arrow.SetActive(false);\\n        arrow.transform.SetParent(null);\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.SetParent(null);\\n            // Additional logic for firing the arrow\\n            hasArrow = false;\\n            isAttached = false;\\n            LastArrow = currentArrow;\\n            currentArrow = null;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            ReturnArrowToPool(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    // Added object pool for arrows\\n    private List<GameObject> arrowPool;\\n    public int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n    }\\n\\n    void Start()\\n    {\\n        arrowPool = new List<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Add(arrow);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else ThrowArrow();\\n    }\\n\\n    GameObject GetPooledArrow()\\n    {\\n        foreach (var arrow in arrowPool)\\n        {\\n            if (!arrow.activeInHierarchy)\\n            {\\n                return arrow;\\n            }\\n        }\\n\\n        // Expand pool if needed\\n        GameObject arrow = Instantiate(arrowPrefab);\\n        arrow.SetActive(false);\\n        arrowPool.Add(arrow);\\n        Debug.LogWarning(\\\"Expanded arrow pool. Consider increasing initial pool size.\\\");\\n        return arrow;\\n    }\\n\\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = GetPooledArrow();\\n            currentArrow.transform.parent = controler.transform;\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            currentArrow.SetActive(true);\\n            hasArrow = true;\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.parent = null;\\n            // Add force or any other firing logic here\\n            hasArrow = false;\\n            isAttached = false;\\n            LastArrow = currentArrow;\\n            currentArrow = null;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.SetActive(false);\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752159501,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":3355,\"prompt_tokens\":800,\"total_tokens\":4155,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"