"{\"id\":\"chatcmpl-B1sIkuBH5PwdXJxOvp9Az9mFBl6Oa\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n    private List<GameObject> planeObjectPool = new List<GameObject>();\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        \\n        // Use object pooling for plane objects\\n        while (planeObjectPool.Count < m_AllPlanes.Count)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObjectPool.Add(planeObject);\\n        }\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = planeObjectPool[i];\\n            planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            planeObject.SetActive(true);\\n        }\\n        for (int i = m_AllPlanes.Count; i < planeObjectPool.Count; i++)\\n        {\\n            planeObjectPool[i].SetActive(false);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> planeObjectsPool = new List<GameObject>();\\n    private int poolIndex = 0;\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n        \\n        // Prepopulate object pool with a set number of plane visualizer objects\\n        for (int i = 0; i < 10; i++)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.SetActive(false);\\n            planeObjectsPool.Add(planeObject);\\n        }\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        \\n        // Only activate and reuse objects from pool instead of creating new ones\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = GetPooledObject();\\n            if (planeObject != null)\\n            {\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n                planeObject.SetActive(true);\\n            }\\n        }\\n\\n        HandleTouchInput();\\n    }\\n\\n    private GameObject GetPooledObject()\\n    {\\n        for (int i = 0; i < planeObjectsPool.Count; i++)\\n        {\\n            poolIndex++;\\n            if (poolIndex >= planeObjectsPool.Count)\\n                poolIndex = 0;\\n\\n            if (!planeObjectsPool[poolIndex].activeInHierarchy)\\n            {\\n                return planeObjectsPool[poolIndex];\\n            }\\n        }\\n\\n        return null; // No available object in pool\\n    }\\n\\n    private void HandleTouchInput()\\n    {\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && \\n                (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    public static bool isVR = false;\\n\\n    private List<GameObject> m_PlaneVisualizers = new List<GameObject>();\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        // Reuse or create plane visualizers\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        while (m_PlaneVisualizers.Count < m_AllPlanes.Count)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            m_PlaneVisualizers.Add(planeObject);\\n        }\\n\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            m_PlaneVisualizers[i].GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            m_PlaneVisualizers[i].SetActive(true);\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n\\n                // Hide all plane visualizers\\n                foreach (var visualizer in m_PlaneVisualizers)\\n                {\\n                    visualizer.SetActive(false);\\n                }\\n            }\\n        }\\n    }\\n\\n    private void OnDisable()\\n    {\\n        // Clean up instantiated visualizers\\n        foreach (var visualizer in m_PlaneVisualizers)\\n        {\\n            Destroy(visualizer);\\n        }\\n        m_PlaneVisualizers.Clear();\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> planeObjectsPool = new List<GameObject>();\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n\\n        // Initialize the pool with a predefined number of plane objects\\n        for (int i = 0; i < 10; i++) // Assuming a pool of 10 objects, adjust as needed\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            planeObject.SetActive(false);\\n            planeObjectsPool.Add(planeObject);\\n        }\\n    }\\n\\n    public void Update()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            GameObject planeObject = GetAvailablePlaneObject();\\n            if (planeObject != null)\\n            {\\n                planeObject.SetActive(true);\\n                planeObject.GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            }\\n        }\\n\\n        Touch touch;\\n        if (Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if ((hit.Trackable is DetectedPlane) && (Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) < 0))\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n            else\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n        }\\n    }\\n\\n    private GameObject GetAvailablePlaneObject()\\n    {\\n        foreach (GameObject planeObject in planeObjectsPool)\\n        {\\n            if (!planeObject.activeInHierarchy)\\n            {\\n                return planeObject;\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing GoogleARCore;\\nusing GoogleARCore.Examples.Common;\\nusing UnityEngine;\\nusing UnityEngine.XR;\\n\\npublic class ARAnchoring : MonoBehaviour\\n{\\n    public Camera FirstPersonCamera;\\n    public GameObject Environment;\\n    public GameObject DetectedPlanePrefab;\\n    private List<DetectedPlane> m_AllPlanes = new List<DetectedPlane>();\\n    private List<GameObject> m_PlaneObjects = new List<GameObject>();\\n    public static bool isVR = false;\\n\\n    public void Start()\\n    {\\n        Screen.sleepTimeout = SleepTimeout.NeverSleep;\\n        FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = true;\\n    }\\n\\n    public void FixedUpdate()\\n    {\\n        if (isVR)\\n        {\\n            return;\\n        }\\n\\n        Session.GetTrackables<DetectedPlane>(m_AllPlanes);\\n        while (m_PlaneObjects.Count < m_AllPlanes.Count)\\n        {\\n            GameObject planeObject = Instantiate(DetectedPlanePrefab, Vector3.zero, Quaternion.identity, transform);\\n            m_PlaneObjects.Add(planeObject);\\n        }\\n\\n        for (int i = 0; i < m_AllPlanes.Count; i++)\\n        {\\n            m_PlaneObjects[i].GetComponent<DetectedPlaneVisualizer>().Initialize(m_AllPlanes[i]);\\n            m_PlaneObjects[i].SetActive(m_AllPlanes[i].TrackingState == TrackingState.Tracking);\\n        }\\n\\n        for (int i = m_AllPlanes.Count; i < m_PlaneObjects.Count; i++)\\n        {\\n            m_PlaneObjects[i].SetActive(false);\\n        }\\n    }\\n\\n    public void Update()\\n    {\\n        if (Input.touchCount < 1 || Input.GetTouch(0).phase != TouchPhase.Began || isVR)\\n        {\\n            return;\\n        }\\n\\n        TrackableHit hit;\\n        TrackableHitFlags raycastFilter = TrackableHitFlags.PlaneWithinPolygon | TrackableHitFlags.FeaturePointWithSurfaceNormal;\\n\\n        if (Frame.Raycast(Screen.width * 0.5f, Screen.height * 0.5f, raycastFilter, out hit))\\n        {\\n            if (!(hit.Trackable is DetectedPlane) || Vector3.Dot(FirstPersonCamera.transform.position - hit.Pose.position, hit.Pose.rotation * Vector3.up) >= 0)\\n            {\\n                var andyObject = Instantiate(Environment, hit.Pose.position, hit.Pose.rotation);\\n                var anchor = hit.Trackable.CreateAnchor(hit.Pose);\\n                andyObject.transform.parent = anchor.transform;\\n                FirstPersonCamera.GetComponent<ARCoreBackgroundRenderer>().enabled = false;\\n                isVR = true;\\n            }\\n            else\\n            {\\n                Debug.Log(\\\"Hit at back of the current DetectedPlane\\\");\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739786762,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_f3927aa00d\",\"usage\":{\"completion_tokens\":3063,\"prompt_tokens\":1284,\"total_tokens\":4347,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"