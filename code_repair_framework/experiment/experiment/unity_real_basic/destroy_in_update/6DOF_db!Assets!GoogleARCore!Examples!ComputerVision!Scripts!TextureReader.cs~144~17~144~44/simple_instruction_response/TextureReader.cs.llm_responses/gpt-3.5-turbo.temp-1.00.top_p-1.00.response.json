"{\"id\":\"chatcmpl-B3IYUVQJfN1CJvGpWXTM6webxIeD7\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                {\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    break;\\n                }\\n\\n                case CommandType.Reset:\\n                {\\n                    m_TextureReaderApi.Destroy();\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ProcessNextFrame:\\n                {\\n                    if (m_ImageBufferIndex >= 0)\\n                    {\\n\\n                        int bufferSize = 0;\\n                        IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                        if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                        {\\n                            OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                        }\\n\\n\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    }\\n\\n                    break;\\n                }\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex =\\n                    m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                m_TextureReaderApi.Destroy();\\n                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                m_ImageBufferIndex = -1;\\n                break;\\n            }\\n                    \\n            case CommandType.ReleasePreviousBuffer:\\n            {\\n\\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                m_ImageBufferIndex = -1;\\n                break;\\n            }\\n\\n            case CommandType.ProcessNextFrame:\\n            {\\n                if (m_ImageBufferIndex >= 0)\\n                {\\n\\n                    int bufferSize = 0;\\n                    IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                    if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                    {\\n                        OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                    }\\n\\n\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                }\\n\\n                break;\\n            }\\n\\n            case CommandType.None:\\n            default:\\n                break;\\n            }\\n}\\n\\n\\n\\nif (Frame.CameraImage.Texture != null)\\n{\\n    int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n    m_ImageBufferIndex =\\n        m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n}\\n\\n\\nm_Command = CommandType.ProcessNextFrame;\\n}\\n\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nm_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\nm_TextureReaderApi.Destroy();\\nm_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\nm_ImageBufferIndex = -1;\\nbreak;\\n```\\n```csharp\\ncase CommandType.ProcessNextFrame:\\n{\\n    if (m_ImageBufferIndex >= 0)\\n    {\\n        int bufferSize = 0;\\n        IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n        if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n        {\\n            OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n        }\\n\\n        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n    }\\n\\n    break;\\n}\\n```\\n```csharp\\nif (Frame.CameraImage.Texture != null)\\n{\\n    int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n    m_ImageBufferIndex = m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n}\\nm_Command = CommandType.ProcessNextFrame;\\n```\\n```csharp\\n}\\n}\\n```\\n```csharp\\n}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                {\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    break;\\n                }\\n\\n                case CommandType.Reset:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_TextureReaderApi.Destroy();\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n                }\\n\\n                case CommandType.ProcessNextFrame:\\n                {\\n                    if (m_ImageBufferIndex >= 0)\\n                    {\\n\\n                        int bufferSize = 0;\\n                        IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                        if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                        {\\n                            OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                        }\\n\\n\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    }\\n\\n                    break;\\n                }\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n\\n            if (Frame.CameraImage.Camera != null)\\n            {\\n                int textureId = Frame.CameraImage.CameraTexture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex =\\n                    m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n    }\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n\\n            switch (m_Command)\\n            {\\n            case CommandType.Create:\\n            {\\n                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                break;\\n            }\\n\\n            case CommandType.Reset:\\n            {\\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                m_TextureReaderApi.Destroy();\\n                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                m_ImageBufferIndex = -1;\\n                break;\\n            }\\n\\n            case CommandType.ReleasePreviousBuffer:\\n            {\\n\\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                m_ImageBufferIndex = -1;\\n                break;\\n            }\\n\\n            case CommandType.ProcessNextFrame:\\n            {\\n                if (m_ImageBufferIndex >= 0)\\n                {\\n\\n                    int bufferSize = 0;\\n                    IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                    if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                    {\\n                        OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                    }\\n\\n\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                }\\n\\n                break;\\n            }\\n\\n            case CommandType.None:\\n            default:\\n                break;\\n            }\\n\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex =\\n                    m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740126010,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":1598,\"prompt_tokens\":874,\"total_tokens\":2472,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"