"{\"id\":\"chatcmpl-B2U1OiHgf7YWwYWcoyikU25wGlryY\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    void Update()\\n    {\\n        if (isPlayerOnObject)\\n        {\\n            fireTimer += Time.deltaTime;\\n            if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n            {\\n                fireTimer = 0;\\n                laserLine.SetPosition(0, laserOrigin.position);\\n                Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n                RaycastHit hit;\\n                if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n                {\\n                    if (hit.collider.gameObject == Object)\\n                    {\\n                        audioManager.PlaySFX(audioManager.swordSound);\\n                        laserLine.SetPosition(1, hit.point);\\n                        audioManager.PlaySFX(audioManager.disappearSound);\\n                        StartCoroutine(DestroyObject(hit.transform.gameObject));\\n                        Object = null; // Destroyed object\\n                    }\\n                }\\n                else\\n                {\\n                    laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n                }\\n                StartCoroutine(ShootLaser());\\n\\n                if (Object == null)\\n                {\\n                    GameOver();\\n                }\\n            }\\n        }\\n    }\\n\\n    IEnumerator DestroyObject(GameObject obj)\\n    {\\n        yield return null; // If you require any delay, add `yield return new WaitForSeconds(delayDuration);` here\\n        Destroy(obj);\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    void Update()\\n    {\\n        if (isPlayerOnObject)\\n        {\\n            fireTimer += Time.deltaTime;\\n            if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n            {\\n                fireTimer = 0;\\n                laserLine.SetPosition(0, laserOrigin.position);\\n                Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n                RaycastHit hit;\\n                if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n                {\\n                    if (hit.collider.gameObject == Object)\\n                    {\\n                        audioManager.PlaySFX(audioManager.swordSound);\\n                        laserLine.SetPosition(1, hit.point);\\n                        audioManager.PlaySFX(audioManager.disappearSound);\\n                        StartCoroutine(DestroyAfter(hit.transform.gameObject, laserDuration)); // Delayed destroy\\n                        Object = null; // Destroyed object\\n                    }\\n                }\\n                else\\n                {\\n                    laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n                }\\n                StartCoroutine(ShootLaser());\\n\\n                if (Object == null)\\n                {\\n                    GameOver();\\n                }\\n            }\\n        }\\n    }\\n\\n    IEnumerator DestroyAfter(GameObject obj, float delay)\\n    {\\n        yield return new WaitForSeconds(delay);\\n        Destroy(obj);\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.SceneManagement;\\n\\n[RequireComponent(typeof(LineRenderer))]\\npublic class RaycastGun : MonoBehaviour\\n{\\n    public Camera playerCamera;\\n    public Transform laserOrigin;\\n    public GameObject Object;\\n    private bool isPlayerOnObject = false;\\n    public GameObject player;\\n    public float gunRange = 50f;\\n    public float fireRate = 0.2f;\\n    public float laserDuration = 0.05f;\\n\\n    LineRenderer laserLine;\\n    float fireTimer;\\n\\n    AudioManager audioManager;\\n    public List<GameObject> destroyObject; // List of objects to destroy\\n\\n    void Awake()\\n    {\\n        laserLine = GetComponent<LineRenderer>();\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n    }\\n\\n    void Update()\\n    {\\n        if (isPlayerOnObject)\\n        {\\n            fireTimer += Time.deltaTime;\\n            if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n            {\\n                fireTimer = 0;\\n                laserLine.SetPosition(0, laserOrigin.position);\\n                Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n                RaycastHit hit;\\n                if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n                {\\n                    if (hit.collider.gameObject == Object)\\n                    {\\n                        audioManager.PlaySFX(audioManager.swordSound);\\n                        laserLine.SetPosition(1, hit.point);\\n                        audioManager.PlaySFX(audioManager.disappearSound);\\n\\n                        DestroyObjectAfterAction(hit.transform.gameObject);\\n                    }\\n                }\\n                else\\n                {\\n                    laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n                }\\n                StartCoroutine(ShootLaser());\\n            }\\n        }\\n    }\\n\\n    private void DestroyObjectAfterAction(GameObject obj)\\n    {\\n        destroyObject.Add(obj);\\n    }\\n\\n    private void LateUpdate()\\n    {\\n        if (destroyObject.Count > 0)\\n        {\\n            for (int i = 0; i < destroyObject.Count; i++)\\n            {\\n                Destroy(destroyObject[i]);\\n            }\\n            destroyObject.Clear();\\n            Object = null;\\n\\n            if (Object == null)\\n            {\\n                GameOver();\\n            }\\n        }\\n    }\\n\\n    private IEnumerator ShootLaser()\\n    {\\n        laserLine.enabled = true;\\n        yield return new WaitForSeconds(laserDuration);\\n        laserLine.enabled = false;\\n    }\\n\\n    private void GameOver()\\n    {\\n        // Your game over handling code here\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    void Update()\\n    {\\n        if (isPlayerOnObject)\\n        {\\n            fireTimer += Time.deltaTime;\\n            if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n            {\\n                fireTimer = 0;\\n                laserLine.SetPosition(0, laserOrigin.position);\\n                Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n                RaycastHit hit;\\n                if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n                {\\n                    if (hit.collider.gameObject == Object)\\n                    {\\n                        audioManager.PlaySFX(audioManager.swordSound);\\n                        laserLine.SetPosition(1, hit.point);\\n                        audioManager.PlaySFX(audioManager.disappearSound);\\n                        StartCoroutine(DestroyObjectAfterHit(hit.transform.gameObject));\\n                    }\\n                }\\n                else\\n                {\\n                    laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n                }\\n                StartCoroutine(ShootLaser());\\n            }\\n        }\\n    }\\n\\n    IEnumerator DestroyObjectAfterHit(GameObject targetObject)\\n    {\\n        yield return null; // Can be adjusted if you want a delay before destruction\\n        Destroy(targetObject);\\n        if (Object == targetObject) // Check if the destroyed object was the primary 'Object'\\n        {\\n            Object = null;\\n            GameOver();\\n        }\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.SceneManagement;\\n\\n[RequireComponent(typeof(LineRenderer))]\\npublic class RaycastGun : MonoBehaviour\\n{\\n    public Camera playerCamera;\\n    public Transform laserOrigin;\\n    public GameObject Object;\\n    private bool isPlayerOnObject = false;\\n    public GameObject player;\\n    public float gunRange = 50f;\\n    public float fireRate = 0.2f;\\n    public float laserDuration = 0.05f;\\n\\n    LineRenderer laserLine;\\n    float fireTimer;\\n\\n    AudioManager audioManager;\\n    public List<GameObject> destroyObject; // List of objects to destroy\\n\\n    void Awake()\\n    {\\n        laserLine = GetComponent<LineRenderer>();\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n    }\\n\\n    void Update()\\n    {\\n        if (isPlayerOnObject)\\n        {\\n            fireTimer += Time.deltaTime;\\n            if (Input.GetKeyDown(KeyCode.K) && fireTimer > fireRate)\\n            {\\n                fireTimer = 0;\\n                laserLine.SetPosition(0, laserOrigin.position);\\n                Vector3 rayOrigin = playerCamera.ViewportToWorldPoint(new Vector3(0.5f, 0.5f, 0));\\n                RaycastHit hit;\\n                if (Physics.Raycast(rayOrigin, playerCamera.transform.forward, out hit, gunRange))\\n                {\\n                    if (hit.collider.gameObject == Object)\\n                    {\\n                        audioManager.PlaySFX(audioManager.swordSound);\\n                        laserLine.SetPosition(1, hit.point);\\n                        audioManager.PlaySFX(audioManager.disappearSound);\\n                        destroyObject.Add(hit.transform.gameObject); // Add object to list\\n                        Object = null; // Destroyed object\\n                    }\\n                }\\n                else\\n                {\\n                    laserLine.SetPosition(1, rayOrigin + (playerCamera.transform.forward * gunRange));\\n                }\\n                StartCoroutine(ShootLaser());\\n\\n                if (Object == null)\\n                {\\n                    GameOver();\\n                }\\n            }\\n        }\\n\\n        DestroyQueuedObjects(); // Call method to destroy objects outside of Update\\n    }\\n\\n    private void DestroyQueuedObjects()\\n    {\\n        foreach (GameObject obj in destroyObject)\\n        {\\n            Destroy(obj);\\n        }\\n        destroyObject.Clear();\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739931758,\"model\":\"gpt-4o\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_b045b4af17\",\"usage\":{\"completion_tokens\":1919,\"prompt_tokens\":558,\"total_tokens\":2477,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"