"{\"id\":\"chatcmpl-B3JEZTRxnXQJVCFBUO6K7r5pP9eQv\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        else\\n            Destroy(gameObject);\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            } \\n            else if (isAttached) \\n            {\\n                Fire();\\n            }\\n        }\\n        else \\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = Instantiate(arrowPrefab, arrowStartPoint.transform.position, Quaternion.identity);\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n        }\\n    }\\n\\n    private void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.transform.SetParent(null);\\n            Rigidbody rb = currentArrow.GetComponent<Rigidbody>();\\n            rb.isKinematic = false;\\n            rb.velocity = controler.transform.forward * 20f; // example power of fire\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n\\n    private void ThrowArrow()\\n    {\\n        if (currentArrow != null && !isAttached)\\n        {\\n            Destroy(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else if (hasArrow && !isAttached)\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = Instantiate(arrowPrefab, controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n            isAttached = true; // Ensure the arrow is considered attached after instantiation.\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            isAttached = false;\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.parent = null;\\n            lastArrow = currentArrow;\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            isAttached = false;\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.parent = null;\\n            lastArrow = currentArrow;\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        if (controler != null)\\n        {\\n            debug.text = controler.transform.rotation.x.ToString() +\\n                         \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                         \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        }\\n        \\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else if (hasArrow)\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (arrowPrefab != null && controler != null && currentArrow == null)\\n        {\\n            currentArrow = Instantiate(arrowPrefab, controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n            isAttached = true; // Assuming the arrow is attached immediately after instantiation\\n        }\\n    }\\n\\n    private void Fire()\\n    {\\n        // Implementation required for firing the arrow\\n        if (currentArrow != null)\\n        {\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.parent = null;\\n            // Add additional logic for launching the arrow\\n            hasArrow = false;\\n            isAttached = false;\\n            LastArrow = currentArrow;\\n            currentArrow = null;\\n        }\\n    }\\n    \\n    private void ThrowArrow()\\n    {\\n        // Implementation required for throwing the arrow when trigger is released\\n        if (currentArrow != null)\\n        {\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.parent = null;\\n            // Add additional logic for throwing the arrow\\n            hasArrow = false;\\n            isAttached = false;\\n            LastArrow = currentArrow;\\n            currentArrow = null;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// FIXED CODE:\\n\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow; // It's not clear how this is used, consider removing if unnecessary\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        else\\n            Destroy(gameObject); // Ensure only one instance exists\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.eulerAngles.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.eulerAngles.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.eulerAngles.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = Instantiate(arrowPrefab, arrowStartPoint.transform.position, arrowStartPoint.transform.rotation);\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n        }\\n    }\\n\\n    private void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.transform.SetParent(null);\\n            Rigidbody arrowRigidbody = currentArrow.GetComponent<Rigidbody>();\\n            arrowRigidbody.isKinematic = false;\\n            arrowRigidbody.velocity = controler.transform.forward * 20f; // Example speed, adjust as needed\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n\\n    private void ThrowArrow()\\n    {\\n        if (currentArrow != null && hasArrow && !isAttached)\\n        {\\n            currentArrow.transform.SetParent(null);\\n            Rigidbody arrowRigidbody = currentArrow.GetComponent<Rigidbody>();\\n            arrowRigidbody.isKinematic = false;\\n            arrowRigidbody.velocity = controler.transform.forward * 10f; // Example speed for throwing, adjust as needed\\n            LastArrow = currentArrow;\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        else\\n            Destroy(gameObject); // Destroy duplicate instance\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = Instantiate(arrowPrefab, arrowStartPoint.transform.position, arrowStartPoint.transform.rotation);\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n            isAttached = true; // Set isAttached to true when the arrow is attached\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.transform.SetParent(null);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.GetComponent<Rigidbody>().AddForce(controler.transform.forward * 20f, ForceMode.VelocityChange);\\n            LastArrow = currentArrow;\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null && isAttached)\\n        {\\n            currentArrow.transform.SetParent(null);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            LastArrow = currentArrow;\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740128619,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":2683,\"prompt_tokens\":421,\"total_tokens\":3104,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"