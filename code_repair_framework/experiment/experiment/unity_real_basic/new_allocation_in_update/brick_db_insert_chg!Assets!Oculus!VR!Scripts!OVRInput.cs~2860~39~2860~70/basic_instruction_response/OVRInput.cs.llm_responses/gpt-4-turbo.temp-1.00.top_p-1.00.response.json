{
    "id": "chatcmpl-9z0zcBL4A3IueXGH0E4wX8i21WdbE",
    "object": "chat.completion",
    "created": 1724328852,
    "model": "gpt-4",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```csharp\nOVRPlugin.ControllerState4 state = OVRPlugin.GetControllerState4((uint)controllerType);\n\n\t\t\tstate.ConnectedControllers = (uint)Controller.Gamepad;\n\n\t\t\tstate.Buttons = 0;\n\t\t\tstate.Touches = 0;\n\t\t\tstate.NearTouches = 0;\n\n\t\t\tfloat LT = OVR_GamepadController_GetAxis((int)AxisGPC.LeftTrigger);\n\t\t\tfloat RT = OVR_GamepadController_GetAxis((int)AxisGPC.RightTrigger);\n\n\t\t\tif (LT > AXIS_AS_BUTTON_THRESHOLD)\n\t\t\t\tstate.Buttons |= (uint)RawButton.LIndexTrigger;\n\t\t\tif (RT > AXIS_AS_BUTTON_THRESHOLD)\n\t\t\t\tstate.Buttons |= (uint)RawButton.RIndexTrigger;\n\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.A) ? (uint)RawButton.A : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.B) ? (uint)RawButton.B : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.X) ? (uint)RawButton.X : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.Y) ? (uint)RawButton.Y : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.Up) ? (uint)RawButton.DpadUp : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.Down) ? (uint)RawButton.DpadDown : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.Left) ? (uint)RawButton.DpadLeft : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.Right) ? (uint)RawButton.DpadRight : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.Start) ? (uint)RawButton.Start : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.Back) ? (uint)RawButton.Back : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.LStick) ? (uint)RawButton.LThumbstick : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.RStick) ? (uint)RawButton.RThumbstick : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.LeftShoulder) ? (uint)RawButton.LShoulder : 0);\n\t\t\tstate.Buttons |= (OVR_GamepadController_GetButton((int)ButtonGPC.RightShoulder) ? (uint)RawButton.RShoulder : 0);\n\n\t\t\tstate.LThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.LeftXAxis);\n\t\t\tstate.LThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.LeftYAxis);\n\t\t\tstate.RThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.RightXAxis);\n\t\t\tstate.RThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.RightYAxis);\n\t\t\tstate.LIndexTrigger = LT;\n\t\t\tstate.RIndexTrigger = RT;\n\n\t\t\tpreviousState = currentState;\n\t\t\tcurrentState = state;\n\n\t\t\treturn ((Controller)currentState.ConnectedControllers & controllerType);\n\t\t}\n\n\t\tpublic override void SetControllerVibration(float frequency, float amplitude)\n\t\t{\n\t\t\treturn; // Do nothing; not supported on Mac\n\t\t}\n\n\t\tpublic override void ConfigureButtonMap()\n\t\t{\n\t\t\tbuttonMap.None                     = RawButton.None;\n\t\t\tbuttonMap.One                      = RawButton.A;\n\t\t\tbuttonMap.Two                      = RawButton.B;\n\t\t\tbuttonMap.Three                    = RawButton.X;\n\t\t\tbuttonMap.Four                     = RawButton.Y;\n\t\t\tbuttonMap.Start                    = RawButton.Start;\n\t\t\tbuttonMap.Back                     = RawButton.Back;\n\t\t\tbuttonMap.PrimaryShoulder          = RawButton.LShoulder;\n\t\t\tbuttonMap.PrimaryIndexTrigger      = RawButton.LIndexTrigger;\n\t\t\tbuttonMap.PrimaryHandTrigger       = RawButton.None;\n\t\t\tbuttonMap.PrimaryThumbstick        = RawButton.LThumbstick;\n\t\t\tbuttonMap.PrimaryThumbstickUp      = RawButton.LThumbstickUp;\n\t\t\tbuttonMap.PrimaryThumbstickDown    = RawButton.LThumbstickDown;\n\t\t\tbuttonMap.PrimaryThumbstickLeft    = RawButton.LThumbstickLeft;\n\t\t\tbuttonMap.PrimaryThumbstickRight   = RawButton.LThumbstickRight;\n\t\t\tbuttonMap.PrimaryTouchpad          = RawButton.None;\n\t\t\tbuttonMap.SecondaryShoulder        = RawButton.RShoulder;\n\t\t\tbuttonMap.SecondaryIndexTrigger    = RawButton.RIndexTrigger;\n\t\t\tbuttonMap.SecondaryHandTrigger     = RawButton.None;\n\t\t\tbuttonMap.SecondaryThumbstick      = RawButton.RThumbstick;\n\t\t\tbuttonMap.SecondaryThumbstickUp    = RawButton.RThumbstickUp;\n\t\t\tbuttonMap.SecondaryThumbstickDown  = RawButton.RThumbstickDown;\n\t\t\tbuttonMap.SecondaryThumbstickLeft  = RawButton.RThumbstickLeft;\n\t\t\tbuttonMap.SecondaryThumbstickRight = RawButton.RThumbstickRight;\n\t\t\tbuttonMap.SecondaryTouchpad        = RawButton.None;\n\t\t\tbuttonMap.DpadUp                   = RawButton.DpadUp;\n\t\t\tbuttonMap.DpadDown                 = RawButton.DpadDown;\n\t\t\tbuttonMap.DpadLeft                 = RawButton.DpadLeft;\n\t\t\tbuttonMap.DpadRight                = RawButton.DpadRight;\n\t\t\tbuttonMap.Up                       = RawButton.LThumbstickUp;\n\t\t\tbuttonMap.Down                     = RawButton.LThumbstickDown;\n\t\t\tbuttonMap.Left                     = RawButton.LThumbstickLeft;\n\t\t\tbuttonMap.Right                    = RawButton.LThumbstickRight;\n\t\t}\n\n\t\tpublic override void ConfigureTouchMap()\n\t\t{\n\t\t\ttouchMap.None                      = RawTouch.None;\n\t\t\ttouchMap.One                       = RawTouch.None;\n\t\t\ttouchMap.Two                       = RawTouch.None;\n\t\t\ttouchMap.Three                     = RawTouch.None;\n\t\t\ttouchMap.Four                      = RawTouch.None;\n\t\t\ttouchMap.PrimaryIndexTrigger       = RawTouch.None;\n\t\t\ttouchMap.PrimaryThumbstick         = RawTouch.None;\n\t\t\ttouchMap.PrimaryThumbRest          = RawTouch.None;\n\t\t\ttouchMap.PrimaryTouchpad           = RawTouch.None;\n\t\t\ttouchMap.SecondaryIndexTrigger     = RawTouch.None;\n\t\t\ttouchMap.SecondaryThumbstick       = RawTouch.None;\n\t\t\ttouchMap.SecondaryThumbRest        = RawTouch.None;\n\t\t\ttouchMap.SecondaryTouchpad         = RawTouch.None;\n\t\t}\n\n\t\tpublic override void ConfigureNearTouchMap()\n\t\t{\n\t\t\tnearTouchMap.None                      = RawNearTouch.None;\n\t\t\tnearTouchMap.PrimaryIndexTrigger       = RawNearTouch.None;\n\t\t\tnearTouchMap.PrimaryThumbButtons       = RawNearTouch.None;\n\t\t\tnearTouchMap.SecondaryIndexTrigger     = RawNearTouch.None;\n\t\t\tnearTouchMap.SecondaryThumbButtons     = RawNearTouch.None;\n\t\t}\n\n\t\tpublic override void ConfigureAxis1DMap()\n\t\t{\n\t\t\taxis1DMap.None                      = RawAxis1D.None;\n\t\t\taxis1DMap.PrimaryIndexTrigger       = RawAxis1D.LIndexTrigger;\n\t\t\taxis1DMap.PrimaryHandTrigger        = RawAxis1D.None;\n\t\t\taxis1DMap.SecondaryIndexTrigger     = RawAxis1D.RIndexTrigger;\n\t\t\taxis1DMap.SecondaryHandTrigger      = RawAxis1D.None;\n\t\t}\n\n\t\tpublic override void ConfigureAxis2DMap()\n\t\t{\n\t\t\taxis2DMap.None                      = RawAxis2D.None;\n\t\t\taxis2DMap.PrimaryThumbstick         = RawAxis2D.LThumbstick;\n\t\t\taxis2DMap.PrimaryTouchpad           = RawAxis2D.None;\n\t\t\taxis2DMap.SecondaryThumbstick       = RawAxis2D.RThumbstick;\n\t\t\taxis2DMap.SecondaryTouchpad         = RawAxis2D.None;\n\t\t}"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "```csharp\nOVRPlugin.ControllerState4 state = currentState;\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "```csharp\n\t\t\tOVRPlugin.ControllerState4 state;\n\n\t\t\tstate.ConnectedControllers = (uint)OVRPlugin.GetConnectedControllers();\n\n\t\t\tif ((state.ConnectedControllers & (uint)controllerType) == 0)\n\t\t\t\treturn Controller.None;\n\n\t\t\tstate.Buttons = 0;\n\t\t\tstate.Touches = 0;\n\t\t\tstate.NearTouches = 0;\n\t\t\tstate.LIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.LeftTrigger);\n\t\t\tstate.RIndexTrigger = OVR_GamepadController_GetAxis((int)AxisGPC.RightTrigger);\n\t\t\tstate.LHandTrigger = 0; // not available\n\t\t\tstate.RHandTrigger = 0; // not available\n\t\t\tstate.LThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.LeftXAxis);\n\t\t\tstate.LThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.LeftYAxis);\n\t\t\tstate.RThumbstick.x = OVR_GamepadController_GetAxis((int)AxisGPC.RightXAxis);\n\t\t\tstate.RThumbstick.y = OVR_GamepadController_GetAxis((int)AxisGPC.RightYAxis);\n\t\t\tstate.LTouchpad.x = 0; // not available\n\t\t\tstate.LTouchpad.y = 0; // not available\n\t\t\tstate.RTouchpad.x = 0; // not available\n\t\t\tstate.RTouchpad.y = 0; // not available\n\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.A)) state.Buttons |= (uint)RawButton.A;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.B)) state.Buttons |= (uint)RawButton.B;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.X)) state.Buttons |= (uint)RawButton.X;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.Y)) state.Buttons |= (uint)RawButton.Y;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.Up)) state.Buttons |= (uint)RawButton.DpadUp;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.Down)) state.Buttons |= (uint)RawButton.DpadDown;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.Left)) state.Buttons |= (uint)RawButton.DpadLeft;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.Right)) state.Buttons |= (uint)RawButton.DpadRight;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.Start)) state.Buttons |= (uint)RawButton.Start;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.Back)) state.Buttons |= (uint)RawButton.Back;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.LStick)) state.Buttons |= (uint)RawButton.LThumbstick;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.RStick)) state.Buttons |= (uint)RawButton.RThumbstick;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.LeftShoulder)) state.Buttons |= (uint)RawButton.LShoulder;\n\t\t\tif (OVR_GamepadController_GetButton((int)ButtonGPC.RightShoulder)) state.Buttons |= (uint)RawButton.RShoulder;\n\n\t\t\tif (state.LIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.LIndexTrigger;\n\t\t\tif (state.RIndexTrigger >= AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.RIndexTrigger;\n\n\t\t\tif (state.LThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.LThumbstickUp;\n\t\t\tif (state.LThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.LThumbstickDown;\n\t\t\tif (state.LThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.LThumbstickLeft;\n\t\t\tif (state.LThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.LThumbstickRight;\n\n\t\t\tif (state.RThumbstick.y >= AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.RThumbstickUp;\n\t\t\tif (state.RThumbstick.y <= -AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.RThumbstickDown;\n\t\t\tif (state.RThumbstick.x <= -AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.RThumbstickLeft;\n\t\t\tif (state.RThumbstick.x >= AXIS_AS_BUTTON_THRESHOLD) state.Buttons |= (uint)RawButton.RThumbstickRight;\n\n\t\t\t// no battery level reported for gamepads\n\t\t\tstate.BatteryPercentRemaining = 255;\n\n\t\t\tpreviousState = currentState;\n\t\t\tcurrentState = state;\n\n\t\t\treturn controllerType;\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "```csharp\n\t\t\tOVRPlugin.ControllerState4 state = currentState;\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "```csharp\nOVRPlugin.ControllerState4 state = new OVRPlugin.ControllerState4();\n```\n\nFIXED CODE:\n\n```csharp\nOVRPlugin.ControllerState4 state;\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 23391,
        "completion_tokens": 2777,
        "total_tokens": 26168
    },
    "system_fingerprint": "fp_e49e4201a9"
}