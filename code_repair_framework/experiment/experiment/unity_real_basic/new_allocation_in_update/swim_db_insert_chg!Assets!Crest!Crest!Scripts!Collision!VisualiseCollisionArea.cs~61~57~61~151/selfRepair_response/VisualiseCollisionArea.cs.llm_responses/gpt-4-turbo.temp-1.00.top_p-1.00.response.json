"{\"id\":\"chatcmpl-Bq9tpElLQ1cdE1c4hO2eKJ91BxQgf\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\nnamespace Crest\\n{\\n    public class VisualiseCollisionArea : MonoBehaviour\\n    {\\n        [SerializeField]\\n        float _objectWidth = 0f;\\n\\n        float[] _resultHeights = new float[s_steps * s_steps];\\n        static readonly float s_radius = 5f;\\n        static readonly int s_steps = 10;\\n\\n        protected GameObject gobj8;\\n        protected GameObject a8;\\n\\n        private float timeLimit = 5f;\\n        private float timer = 0f;\\n        private bool instantiate_gobj = false;\\n\\n        Vector3[] _samplePositions;\\n\\n        void Start()\\n        {\\n            _samplePositions = new Vector3[s_steps * s_steps];\\n        }\\n\\n        void Update()\\n        {\\n            timer += Time.deltaTime;\\n\\n            if (!instantiate_gobj && timer >= timeLimit)\\n            {\\n                a8 = Instantiate(gobj8);\\n                timer = 0;\\n                instantiate_gobj = true;\\n            }\\n            if (instantiate_gobj && timer >= timeLimit)\\n            {\\n                var obj8 = a8.AddComponent<VisualiseRayTrace>();\\n                obj8.FreeObject();\\n                timer = 0;\\n                instantiate_gobj = false;\\n            }\\n\\n            if (OceanRenderer.Instance == null || OceanRenderer.Instance.CollisionProvider == null)\\n            {\\n                return;\\n            }\\n\\n            var collProvider = OceanRenderer.Instance.CollisionProvider;\\n\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i] = new Vector3(((i + 0.5f) - s_steps / 2f) * s_radius, 0f, ((j + 0.5f) - s_steps / 2f) * s_radius);\\n                    _samplePositions[j * s_steps + i].x += transform.position.x;\\n                    _samplePositions[j * s_steps + i].z += transform.position.z;\\n                }\\n            }\\n\\n            if (collProvider.RetrieveSucceeded(collProvider.Query(GetHashCode(), _objectWidth, _samplePositions, _resultHeights, null, null)))\\n            {\\n                for (int i = 0; i < s_steps; i++)\\n                {\\n                    for (int j = 0; j < s_steps; j++)\\n                    {\\n                        var result = _samplePositions[j * s_steps + i];\\n                        result.y = _resultHeights[j * s_steps + i];\\n                        DebugDrawCross(result, 1f, Color.green);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Crest Ocean System\\n\\nusing UnityEngine;\\n\\nnamespace Crest\\n{\\n    public class VisualiseCollisionArea : MonoBehaviour\\n    {\\n        [SerializeField]\\n        float _objectWidth = 0f;\\n\\n        float[] _resultHeights = new float[s_steps * s_steps];\\n\\n        static readonly float s_radius = 5f;\\n        static readonly int s_steps = 10;\\n\\n        protected GameObject gobj8;\\n        protected GameObject a8;\\n\\n        private float timeLimit = 5f;\\n        private float timer  = 0f;\\n        private bool instantiate_gobj = false;\\n\\n        Vector3[] _samplePositions = new Vector3[s_steps * s_steps];\\n\\n        void Start()\\n        {\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i] = new Vector3(((i + 0.5f) - s_steps / 2f) * s_radius, 0f, ((j + 0.5f) - s_steps / 2f) * s_radius);\\n                }\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i].x = ((i + 0.5f) - s_steps / 2f) * s_radius + transform.position.x;\\n                    _samplePositions[j * s_steps + i].z = ((j + 0.5f) - s_steps / 2f) * s_radius + transform.position.z;\\n                }\\n            }\\n\\n            timer += Time.deltaTime;\\n\\n            if (!instantiate_gobj && timer >= timeLimit)\\n            {\\n                a8 = Instantiate(gobj8);\\n                timer = 0;\\n                instantiate_gobj = true;\\n            }\\n            if (instantiate_gobj && timer >= timeLimit)\\n            {\\n                var obj8 = a8.AddComponent<VisualiseRayTrace>();\\n                obj8.FreeObject();\\n                timer = 0;\\n                instantiate_gobj = false;\\n            }\\n\\n            if (OceanRenderer.Instance == null || OceanRenderer.Instance.CollisionProvider == null)\\n            {\\n                return;\\n            }\\n\\n            var collProvider = OceanRenderer.Instance.CollisionProvider;\\n\\n            if (collProvider.RetrieveSucceeded(collProvider.Query(GetHashCode(), _objectWidth, _samplePositions, _resultHeights, null, null)))\\n            {\\n                for (int i = 0; i < s_steps; i++)\\n                {\\n                    for (int j = 0; j < s_steps; j++)\\n                    {\\n                        var result = _samplePositions[j * s_steps + i];\\n                        result.y = _resultHeights[j * s_steps + i];\\n\\n                        DebugDrawCross(result, 1f, Color.green);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Crest Ocean System\\n\\nusing UnityEngine;\\n\\nnamespace Crest\\n{\\n    public class VisualiseCollisionArea : MonoBehaviour\\n    {\\n        [SerializeField]\\n        float _objectWidth = 0f;\\n\\n        float[] _resultHeights = new float[s_steps * s_steps];\\n\\n        static readonly float s_radius = 5f;\\n        static readonly int s_steps = 10;\\n\\n        protected GameObject gobj8;\\n        protected GameObject a8;\\n\\n        private float timeLimit = 5f;\\n        private float timer = 0f;\\n        private bool instantiate_gobj = false;\\n\\n        Vector3[] _samplePositions = new Vector3[s_steps * s_steps];\\n\\n        void Start()\\n        {\\n            InitializeSamplePositions();\\n        }\\n\\n        void InitializeSamplePositions()\\n        {\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i] = new Vector3(((i + 0.5f) - s_steps / 2f) * s_radius, 0f, ((j + 0.5f) - s_steps / 2f) * s_radius);\\n                }\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            timer += Time.deltaTime;\\n\\n            if (!instantiate_gobj && timer >= timeLimit)\\n            {\\n                a8 = Instantiate(gobj8);\\n                timer = 0;\\n                instantiate_gobj = true;\\n            }\\n            if (instantiate_gobj && timer >= timeLimit)\\n            {\\n                var obj8 = a8.AddComponent<VisualiseRayTrace>();\\n                obj8.FreeObject();\\n                timer = 0;\\n                instantiate_gobj = false;\\n            }\\n\\n            if (OceanRenderer.Instance == null || OceanRenderer.Instance.CollisionProvider == null)\\n            {\\n                return;\\n            }\\n\\n            var collProvider = OceanRenderer.Instance.CollisionProvider;\\n\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i].x = ((i + 0.5f) - s_steps / 2f) * s_radius + transform.position.x;\\n                    _samplePositions[j * s_steps + i].z = ((j + 0.5f) - s_steps / 2f) * s_radius + transform.position.z;\\n                }\\n            }\\n\\n            if (collProvider.RetrieveSucceeded(collProvider.Query(GetHashCode(), _objectWidth, _samplePositions, _resultHeights, null, null)))\\n            {\\n                for (int i = 0; i < s_steps; i++)\\n                {\\n                    for (int j = 0; j < s_steps; j++)\\n                    {\\n                        var result = _samplePositions[j * s_steps + i];\\n                        result.y = _resultHeights[j * s_steps + i];\\n\\n                        DebugDrawCross(result, 1f, Color.green);\\n                    }\\n                }\\n            }\\n        }\\n\\n        void DebugDrawCross(Vector3 position, float size, Color color)\\n        {\\n            Debug.DrawLine(position - Vector3.up * size, position + Vector3.up * size, color);\\n            Debug.DrawLine(position - Vector3.left * size, position + Vector3.left * size, color);\\n            Debug.DrawLine(position - Vector3.back * size, position + Vector3.back * size, color);\\n        }\\n    }\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\nnamespace Crest\\n{\\n    public class VisualiseCollisionArea : MonoBehaviour\\n    {\\n        [SerializeField]\\n        float _objectWidth = 0f;\\n\\n        float[] _resultHeights = new float[s_steps * s_steps];\\n\\n        static readonly float s_radius = 5f;\\n        static readonly int s_steps = 10;\\n\\n        protected GameObject gobj8;\\n        protected GameObject a8;\\n\\n        private float timeLimit = 5f;\\n        private float timer = 0f;\\n        private bool instantiate_gobj = false;\\n\\n        Vector3[] _samplePositions = new Vector3[s_steps * s_steps];\\n\\n        void Start()\\n        {\\n            // Move the allocation to Start method or any initialization block\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i] = new Vector3(((i + 0.5f) - s_steps / 2f) * s_radius, 0f, ((j + 0.5f) - s_steps / 2f) * s_radius);\\n                }\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            timer += Time.deltaTime;\\n            if (!instantiate_gobj && timer >= timeLimit)\\n            {\\n                a8 = Instantiate(gobj8);\\n                timer = 0;\\n                instantiate_gobj = true;\\n            }\\n            if (instantiate_gobj && timer >= timeLimit)\\n            {\\n                var obj8 = a8.AddComponent<VisualiseRayTrace>();\\n                obj8.FreeObject();\\n                timer = 0;\\n                instantiate_gobj = false;\\n            }\\n\\n            if (OceanRenderer.Instance == null || OceanRenderer.Instance.CollisionProvider == null)\\n            {\\n                return;\\n            }\\n\\n            var collProvider = OceanRenderer.Instance.CollisionProvider;\\n\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i].x = ((i + 0.5f) - s_steps / 2f) * s_radius + transform.position.x;\\n                    _samplePositions[j * s_steps + i].z = ((j + 0.5f) - s_steps / 2f) * s_radius + transform.position.z;\\n                }\\n            }\\n\\n            if (collProvider.RetrieveSucceeded(collProvider.Query(GetHashCode(), _objectWidth, _samplePositions, _resultHeights, null, null)))\\n            {\\n                for (int i = 0; i < s_steps; i++)\\n                {\\n                    for (int j = 0; j < s_steps; j++)\\n                    {\\n                        var result = _samplePositions[j * s_steps + i];\\n                        result.y = _resultHeights[j * s_steps + i];\\n\\n                        DebugDrawCross(result, 1f, Color.green);\\n                    }\\n                }\\n            }\\n        }\\n\\n        private void DebugDrawCross(Vector3 position, float size, Color color)\\n        {\\n            Debug.DrawLine(position - Vector3.up * size, position + Vector3.up * size, color);\\n            Debug.DrawLine(position - Vector3.right * size, position + Vector3.right * size, color);\\n            Debug.DrawLine(position - Vector3.forward * size, position + Vector3.forward * size, color);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n\\nnamespace Crest\\n{\\n    public class VisualiseCollisionArea : MonoBehaviour\\n    {\\n        [SerializeField]\\n        float _objectWidth = 0f;\\n\\n        float[] _resultHeights = new float[s_steps * s_steps];\\n\\n        static readonly float s_radius = 5f;\\n        static readonly int s_steps = 10;\\n\\n        protected GameObject gobj8;\\n        protected GameObject a8;\\n\\n        private float timeLimit = 5f;\\n        private float timer  = 0f;\\n        private bool instantiate_gobj = false;\\n\\n        Vector3[] _samplePositions = new Vector3[s_steps * s_steps];\\n\\n        void Start()\\n        {\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i] = new Vector3(((i + 0.5f) - s_steps / 2f) * s_radius, 0f, ((j + 0.5f) - s_steps / 2f) * s_radius);\\n                }\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            timer += Time.deltaTime;\\n\\n            if (!instantiate_gobj && timer >= timeLimit)\\n            {\\n                a8 = Instantiate(gobj8);\\n                timer = 0;\\n                instantiate_gobj = true;\\n            }\\n            if (instantiate_gobj && timer >= timeLimit)\\n            {\\n                var obj8 = a8.AddComponent<VisualiseRayTrace>();\\n                obj8.FreeObject();\\n                timer = 0;\\n                instantiate_gobj = false;\\n            }\\n\\n            if (OceanRenderer.Instance == null || OceanRenderer.Instance.CollisionProvider == null)\\n            {\\n                return;\\n            }\\n\\n            var collProvider = OceanRenderer.Instance.CollisionProvider;\\n\\n            for (int i = 0; i < s_steps; i++)\\n            {\\n                for (int j = 0; j < s_steps; j++)\\n                {\\n                    _samplePositions[j * s_steps + i].x = ((i + 0.5f) - s_steps / 2f) * s_radius + transform.position.x;\\n                    _samplePositions[j * s_steps + i].z = ((j + 0.5f) - s_steps / 2f) * s_radius + transform.position.z;\\n                }\\n            }\\n\\n            if (collProvider.RetrieveSucceeded(collProvider.Query(GetHashCode(), _objectWidth, _samplePositions, _resultHeights, null, null)))\\n            {\\n                for (int i = 0; i < s_steps; i++)\\n                {\\n                    for (int j = 0; j < s_steps; j++)\\n                    {\\n                        var result = _samplePositions[j * s_steps + i];\\n                        result.y = _resultHeights[j * s_steps + i];\\n\\n                        DebugDrawCross(result, 1f, Color.green);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751770809,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":3255,\"prompt_tokens\":714,\"total_tokens\":3969,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"