"{\"id\":\"chatcmpl-BrJQECkXbxekLwdux2UBfSNuQfbSq\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\nusing System;\\nusing System.IO;\\nusing Oculus.Avatar;\\nusing System.Runtime.InteropServices;\\nusing System.Collections.Generic;\\n\\npublic class RemoteLoopbackManager : MonoBehaviour\\n{\\n    class PacketLatencyPair\\n    {\\n        public byte[] PacketData;\\n        public float FakeLatency;\\n    };\\n\\n    public OvrAvatar LocalAvatar;\\n    public OvrAvatar LoopbackAvatar;\\n\\n    [System.Serializable]\\n    public class SimulatedLatencySettings\\n    {\\n        [Range(0.0f, 0.5f)]\\n        public float FakeLatencyMax = 0.25f; //250 ms max latency\\n\\n        [Range(0.0f, 0.5f)]\\n        public float FakeLatencyMin = 0.002f; //2ms min latency\\n\\n        [Range(0.0f, 1.0f)]\\n        public float LatencyWeight = 0.25f;  // How much the latest sample impacts the current latency\\n\\n        [Range(0,10)]\\n        public int MaxSamples = 4; //How many samples in our window\\n\\n        internal float AverageWindow = 0f;\\n        internal float LatencySum = 0f;\\n        internal LinkedList<float> LatencyValues = new LinkedList<float>();\\n\\n        public float NextValue()\\n        {\\n            AverageWindow = LatencySum / (float)LatencyValues.Count;\\n            float RandomLatency = UnityEngine.Random.Range(FakeLatencyMin, FakeLatencyMax);\\n            float FakeLatency = AverageWindow * (1f - LatencyWeight) + LatencyWeight * RandomLatency;\\n\\n            if (LatencyValues.Count >= MaxSamples)\\n            {\\n                LatencySum -= LatencyValues.First.Value;\\n                LatencyValues.RemoveFirst();\\n            }\\n\\n            LatencySum += FakeLatency;\\n            LatencyValues.AddLast(FakeLatency);\\n\\n            return FakeLatency;\\n        }\\n    };\\n\\n    public SimulatedLatencySettings LatencySettings = new SimulatedLatencySettings();\\n\\n    private int PacketSequence = 0;\\n\\n    LinkedList<PacketLatencyPair> packetQueue = new LinkedList<PacketLatencyPair>();\\n\\n    // Declare deadList once to avoid allocations in Update\\n    List<PacketLatencyPair> deadList = new List<PacketLatencyPair>();\\n\\n    void Start()\\n    {\\n        LocalAvatar.RecordPackets = true;\\n        LocalAvatar.PacketRecorded += OnLocalAvatarPacketRecorded;\\n        float FirstValue = UnityEngine.Random.Range(LatencySettings.FakeLatencyMin, LatencySettings.FakeLatencyMax);\\n        LatencySettings.LatencyValues.AddFirst(FirstValue);\\n        LatencySettings.LatencySum += FirstValue;\\n    }\\n\\n    void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)\\n    {\\n        using (MemoryStream outputStream = new MemoryStream())\\n        {\\n            BinaryWriter writer = new BinaryWriter(outputStream);\\n\\n            if (LocalAvatar.UseSDKPackets)\\n            {\\n                var size = CAPI.ovrAvatarPacket_GetSize(args.Packet.ovrNativePacket);\\n                byte[] data = new byte[size];\\n                CAPI.ovrAvatarPacket_Write(args.Packet.ovrNativePacket, size, data);\\n\\n                writer.Write(PacketSequence++);\\n                writer.Write(size);\\n                writer.Write(data);\\n            }\\n            else\\n            {\\n                writer.Write(PacketSequence++);\\n                args.Packet.Write(outputStream);\\n            }\\n\\n            SendPacketData(outputStream.ToArray());\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        if (packetQueue.Count > 0)\\n        {\\n            deadList.Clear();\\n\\n            foreach (var packet in packetQueue)\\n            {\\n                packet.FakeLatency -= Time.deltaTime;\\n\\n                if (packet.FakeLatency < 0f)\\n                {\\n                    ReceivePacketData(packet.PacketData);\\n                    deadList.Add(packet);\\n                }\\n            }\\n\\n            foreach (var packet in deadList)\\n            {\\n                packetQueue.Remove(packet);\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    private List<PacketLatencyPair> deadList = new List<PacketLatencyPair>();\\n\\n    void Update()\\n    {\\n        if (packetQueue.Count > 0)\\n        {\\n            deadList.Clear();\\n\\n            foreach (var packet in packetQueue)\\n            {\\n                packet.FakeLatency -= Time.deltaTime;\\n\\n                if (packet.FakeLatency < 0f)\\n                {\\n                    ReceivePacketData(packet.PacketData);\\n                    deadList.Add(packet);\\n                }\\n            }\\n\\n            foreach (var packet in deadList)\\n            {\\n                packetQueue.Remove(packet);\\n            }\\n        }\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    List<PacketLatencyPair> deadList = new List<PacketLatencyPair>();\\n\\n    void Update()\\n    {\\n        if (packetQueue.Count > 0)\\n        {\\n            deadList.Clear();\\n            foreach (var packet in packetQueue)\\n            {\\n                packet.FakeLatency -= Time.deltaTime;\\n                \\n                if (packet.FakeLatency < 0f)\\n                {\\n                    ReceivePacketData(packet.PacketData);\\n                    deadList.Add(packet);\\n                }\\n            }\\n\\n            foreach (var packet in deadList)\\n            {\\n                packetQueue.Remove(packet);\\n            }\\n        }\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    List<PacketLatencyPair> deadList = new List<PacketLatencyPair>();\\n\\n    void Update()\\n    {\\n        if (packetQueue.Count > 0)\\n        {\\n            deadList.Clear();\\n\\n            foreach (var packet in packetQueue)\\n            {\\n                packet.FakeLatency -= Time.deltaTime;\\n\\n                if (packet.FakeLatency < 0f)\\n                {\\n                    ReceivePacketData(packet.PacketData);\\n                    deadList.Add(packet);\\n                }\\n            }\\n\\n            foreach (var packet in deadList)\\n            {\\n                packetQueue.Remove(packet);\\n            }\\n        }\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    private List<PacketLatencyPair> deadList = new List<PacketLatencyPair>();\\n\\n    void Update()\\n    {\\n        if (packetQueue.Count > 0)\\n        {\\n            deadList.Clear();\\n            foreach (var packet in packetQueue)\\n            {\\n                packet.FakeLatency -= Time.deltaTime;\\n\\n                if (packet.FakeLatency < 0f)\\n                {\\n                    ReceivePacketData(packet.PacketData);\\n                    deadList.Add(packet);\\n                }\\n            }\\n\\n            foreach (var packet in deadList)\\n            {\\n                packetQueue.Remove(packet);\\n            }\\n        }\\n    }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752045742,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":1288,\"prompt_tokens\":943,\"total_tokens\":2231,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"