{
    "code_repairing_0": "FIXED CODE:\n```\n\n#if USING_XR_MANAGEMENT && (USING_XR_SDK_OCULUS || USING_XR_SDK_OPENXR)\n#define USING_XR_SDK\n#endif\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999; \n#endif\n\n\tpublic int callbackOrder { get { return _callbackOrder; } }\n\tstatic private System.DateTime buildStartTime;\n\tstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\n\tpublic const string prefName = \"OVRAutoIncrementVersionCode_Enabled\";\n\tprivate const string menuItemAutoIncVersion = \"Oculus/Tools/Auto Increment Version Code\";\n\tstatic bool autoIncrementVersion = false;\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS\n    static private bool symmetricWarningShown = false;\n#endif\n\n    static OVRGradleGeneration()\n\t{\n\t\tEditorApplication.delayCall += OnDelayCall;\n\t}\n\n\tstatic void OnDelayCall()\n\t{\n#if UNITY_ANDROID\n\t\tautoIncrementVersion = PlayerPrefs.GetInt(prefName, 0) != 0;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n#endif\n\t}\n\n#if UNITY_ANDROID\n\t[MenuItem(menuItemAutoIncVersion)]\n\tpublic static void ToggleUtilities()\n\t{\n\t\tautoIncrementVersion = !autoIncrementVersion;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n\n\t\tint newValue = (autoIncrementVersion) ? 1 : 0;\n\t\tPlayerPrefs.SetInt(prefName, newValue);\n\t\tPlayerPrefs.Save();\n\n\t\tUnityEngine.Debug.Log(\"Auto Increment Version Code: \" + autoIncrementVersion);\n\t}\n#endif\n\n\tpublic void OnPreprocessBuild(BuildReport report)\n\t{\n\t\tbool useOpenXR = OVRPluginInfo.IsOVRPluginOpenXRActivated();\n\n#if USING_XR_SDK_OPENXR\n\t\tUnityEngine.Debug.LogWarning(\"The installation of Unity OpenXR Plugin is detected, which should NOT be used in production when developing Oculus apps for production. Please uninstall the package, and install the Oculus XR Plugin from the Package Manager.\");\n\n\t\t\n\t\tvar oculusXRFeature = FeatureHelpers.GetFeatureWithIdForBuildTarget(report.summary.platformGroup, Oculus.XR.OculusXRFeature.featureId);\n\t\tif (oculusXRFeature.enabled)\n\t\t{\n\t\t\tif (!useOpenXR)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"OpenXR backend for Oculus Plugin is disabled, which is required to support Unity OpenXR Plugin. Please enable OpenXR backend for Oculus Plugin through the 'Oculus -> Tools -> OpenXR' menu.\");\n\t\t\t}\n\n\t\t\tstring ovrRootPath = OVRPluginInfo.GetUtilitiesRootPath();\n\t\t\tvar importers = PluginImporter.GetAllImporters();\n\t\t\tforeach (var importer in importers)\n\t\t\t{\n\t\t\t\tif (!importer.GetCompatibleWithPlatform(report.summary.platform))\n\t\t\t\t\tcontinue;\n\t\t\t\tstring fullAssetPath = Path.Combine(Directory.GetCurrentDirectory(), importer.assetPath);\n#if UNITY_EDITOR_WIN\n\t\t\t\tfullAssetPath = fullAssetPath.Replace(\"/\", \"\\\\\");\n#endif\n\t\t\t\tif (fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"OVRPlugin\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] Native plugin included in build because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => true);\n\t\t\t\t}\n\t\t\t\tif (!fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"libopenxr_loader.so\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] libopenxr_loader.so from other packages will be disabled because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"OculusXRFeature is not enabled in OpenXR Settings. Oculus Integration scripts will not be functional.\");\n\t\t}\n#endif\n\n#if UNITY_ANDROID && !(USING_XR_SDK && UNITY_2019_3_OR_NEWER)\n\t\t\n\t\tif (!PlayerSettings.GetUseDefaultGraphicsAPIs(BuildTarget.Android))\n\t\t{\n\t\t\tGraphicsDeviceType[] apis = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);\n\t\t\tif (apis.Length >= 1 && apis[0] == GraphicsDeviceType.Vulkan)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"The Vulkan Graphics API does not support XR in your configuration. To use Vulkan, you must use Unity 2019.3 or newer, and the XR Plugin Management.\");\n\t\t\t}\n\t\t}\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS && OCULUS_XR_SYMMETRIC\n        OculusSettings settings;\n        UnityEditor.EditorBuildSettings.TryGetConfigObject<OculusSettings>(\"Unity.XR.Oculus.Settings\", out settings);\n\n        if (settings.SymmetricProjection && !symmetricWarningShown)\n        {\n            symmetricWarningShown = true;\n            UnityEngine.Debug.LogWarning(\"Symmetric Projection is enabled in the Oculus XR Settings. To ensure best GPU performance, make sure at least FFR 1 is being used.\");\n        }\n#endif\n\n#if UNITY_ANDROID\n#if USING_XR_SDK\n        if (useOpenXR)\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"Oculus Utilities Plugin with OpenXR is being used, which is under experimental status\");\n\n\t\t\tif (PlayerSettings.colorSpace != ColorSpace.Linear)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports linear lighting. Please set 'Rendering/Color Space' to 'Linear' in Player Settings\");\n\t\t\t}\n\t\t}\n#else\n\t\tif (useOpenXR)\n\t\t{\n\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports XR Plug-in Managmenent with Oculus XR Plugin.\");\n\t\t}\n#endif",
    "code_repairing_1": "The code under the 'FIXED CODE:' area is part of a C# class that generates a Gradle project file for an Android build in Unity. It appears to be using the Oculus SDK, which is for VR development. The code is using some features that are not supported in the version of Unity that this class is being used in. Here is the updated version of the code with these features removed:\n\n#if USING_XR_MANAGEMENT && (USING_XR_SDK_OCULUS || USING_XR_SDK_OPENXR)\n#define USING_XR_SDK\n#endif\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999;\n#endif\n\n\tpublic int callbackOrder { get { return _callbackOrder; } }\n\tstatic private System.DateTime buildStartTime;\n\tstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\n\tpublic const string prefName = \"OVRAutoIncrementVersionCode_Enabled\";\n\tprivate const string menuItemAutoIncVersion = \"Oculus/Tools/Auto Increment Version Code\";\n\tstatic bool autoIncrementVersion = false;\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS\n    static private bool symmetricWarningShown = false;\n#endif\n\n    static OVRGradleGeneration()\n\t{\n\t\tEditorApplication.delayCall += OnDelayCall;\n\t}\n\n\tstatic void OnDelayCall()\n\t{\n#if UNITY_ANDROID\n\t\tautoIncrementVersion = PlayerPrefs.GetInt(prefName, 0) != 0;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n#endif\n\t}\n\n#if UNITY_ANDROID\n\t[MenuItem(menuItemAutoIncVersion)]\n\tpublic static void ToggleUtilities()\n\t{\n\t\tautoIncrementVersion = !autoIncrementVersion;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n\n\t\tint newValue = (autoIncrementVersion) ? 1 : 0;\n\t\tPlayerPrefs.SetInt(prefName, newValue);\n\t\tPlayerPrefs.Save();\n\n\t\tUnityEngine.Debug.Log(\"Auto Increment Version Code: \" + autoIncrementVersion);\n\t}\n#endif\n\n\tpublic void OnPreprocessBuild(BuildReport report)\n\t{\n\t\tbool useOpenXR = OVRPluginInfo.IsOVRPluginOpenXRActivated();\n\n#if USING_XR_SDK_OPENXR\n\t\tUnityEngine.Debug.LogWarning(\"The installation of Unity OpenXR Plugin is detected, which should NOT be used in production when developing Oculus apps for production. Please uninstall the package, and install the Oculus XR Plugin from the Package Manager.\");\n\n\t\t\n\t\tvar oculusXRFeature = FeatureHelpers.GetFeatureWithIdForBuildTarget(report.summary.platformGroup, Oculus.XR.OculusXRFeature.featureId);\n\t\tif (oculusXRFeature.enabled)\n\t\t{\n\t\t\tif (!useOpenXR)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"OpenXR backend for Oculus Plugin is disabled, which is required to support Unity OpenXR Plugin. Please enable OpenXR backend for Oculus Plugin through the 'Oculus -> Tools -> OpenXR' menu.\");\n\t\t\t}\n\n\t\t\tstring ovrRootPath = OVRPluginInfo.GetUtilitiesRootPath();\n\t\t\tvar importers = PluginImporter.GetAllImporters();\n\t\t\tforeach (var importer in importers)\n\t\t\t{\n\t\t\t\tif (!importer.GetCompatibleWithPlatform(report.summary.platform))\n\t\t\t\t\tcontinue;\n\t\t\t\tstring fullAssetPath = Path.Combine(Directory.GetCurrentDirectory(), importer.assetPath);\n#if UNITY_EDITOR_WIN\n\t\t\t\tfullAssetPath = fullAssetPath.Replace(\"/\", \"\\\\\");\n#endif\n\t\t\t\tif (fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"OVRPlugin\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] Native plugin included in build because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => true);\n\t\t\t\t}\n\t\t\t\tif (!fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"libopenxr_loader.so\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] libopenxr_loader.so from other packages will be disabled because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"OculusXRFeature is not enabled in OpenXR Settings. Oculus Integration scripts will not be functional.\");\n\t\t}\n#endif\n\n#if UNITY_ANDROID && !(USING_XR_SDK && UNITY_2019_3_OR_NEWER)\n\t\t\n\t\tif (!PlayerSettings.GetUseDefaultGraphicsAPIs(BuildTarget.Android))\n\t\t{\n\t\t\tGraphicsDeviceType[] apis = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);\n\t\t\tif (apis.Length >= 1 && apis[0] == GraphicsDeviceType.Vulkan)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"The Vulkan Graphics API does not support XR in your configuration. To use Vulkan, you must use Unity 2019.3 or newer, and the XR Plugin Management.\");\n\t\t\t}\n\t\t}\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS && OCULUS_XR_SYMMETRIC\n        OculusSettings settings;\n        UnityEditor.EditorBuildSettings.TryGetConfigObject<OculusSettings>(\"Unity.XR.Oculus.Settings\", out settings);\n\n        if (settings.SymmetricProjection && !symmetricWarningShown)\n        {\n            symmetricWarningShown = true;\n            UnityEngine.Debug.LogWarning(\"Symmetric Projection is enabled in the Oculus XR Settings. To ensure best GPU performance, make sure at least FFR 1 is being used.\");\n        }\n#endif\n\n#if UNITY_ANDROID\n#if USING_XR_SDK\n        if (useOpenXR)\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"Oculus Utilities Plugin with OpenXR is being used, which is under experimental status\");\n\n\t\t\tif (PlayerSettings.colorSpace != ColorSpace.Linear)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports linear lighting. Please set 'Rendering/Color Space' to 'Linear' in Player Settings\");\n\t\t\t}\n\t\t}",
    "code_repairing_2": "FIXED CODE:\n\n\n\n\n#if USING_XR_MANAGEMENT && (USING_XR_SDK_OCULUS || USING_XR_SDK_OPENXR)\n#define USING_XR_SDK\n#endif\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999;\n#endif\n\n\tpublic int callbackOrder { get { return _callbackOrder; } }\n\tstatic private System.DateTime buildStartTime;\n\tstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\n\tpublic const string prefName = \"OVRAutoIncrementVersionCode_Enabled\";\n\tprivate const string menuItemAutoIncVersion = \"Oculus/Tools/Auto Increment Version Code\";\n\tstatic bool autoIncrementVersion = false;\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS\n    static private bool symmetricWarningShown = false;\n#endif\n\n    static OVRGradleGeneration()\n\t{\n\t\tEditorApplication.delayCall += OnDelayCall;\n\t}\n\n\tstatic void OnDelayCall()\n\t{\n#if UNITY_ANDROID\n\t\tautoIncrementVersion = PlayerPrefs.GetInt(prefName, 0) != 0;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n#endif\n\t}\n\n#if UNITY_ANDROID\n\t[MenuItem(menuItemAutoIncVersion)]\n\tpublic static void ToggleUtilities()\n\t{\n\t\tautoIncrementVersion = !autoIncrementVersion;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n\n\t\tint newValue = (autoIncrementVersion) ? 1 : 0;\n\t\tPlayerPrefs.SetInt(prefName, newValue);\n\t\tPlayerPrefs.Save();\n\n\t\tUnityEngine.Debug.Log(\"Auto Increment Version Code: \" + autoIncrementVersion);\n\t}\n#endif\n\n\tpublic void OnPreprocessBuild(BuildReport report)\n\t{\n\t\tbool useOpenXR = OVRPluginInfo.IsOVRPluginOpenXRActivated();\n\n#if USING_XR_SDK_OPENXR\n\t\tUnityEngine.Debug.LogWarning(\"The installation of Unity OpenXR Plugin is detected, which should NOT be used in production when developing Oculus apps for production. Please uninstall the package, and install the Oculus XR Plugin from the Package Manager.\");\n\n\t\t\n\t\tvar oculusXRFeature = FeatureHelpers.GetFeatureWithIdForBuildTarget(report.summary.platformGroup, Oculus.XR.OculusXRFeature.featureId);\n\t\tif (oculusXRFeature.enabled)\n\t\t{\n\t\t\tif (!useOpenXR)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"OpenXR backend for Oculus Plugin is disabled, which is required to support Unity OpenXR Plugin. Please enable OpenXR backend for Oculus Plugin through the 'Oculus -> Tools -> OpenXR' menu.\");\n\t\t\t}\n\n\t\t\tstring ovrRootPath = OVRPluginInfo.GetUtilitiesRootPath();\n\t\t\tvar importers = PluginImporter.GetAllImporters();\n\t\t\tforeach (var importer in importers)\n\t\t\t{\n\t\t\t\tif (!importer.GetCompatibleWithPlatform(report.summary.platform))\n\t\t\t\t\tcontinue;\n\t\t\t\tstring fullAssetPath = Path.Combine(Directory.GetCurrentDirectory(), importer.assetPath);\n#if UNITY_EDITOR_WIN\n\t\t\t\tfullAssetPath = fullAssetPath.Replace(\"/\", \"\\\\\");\n#endif\n\t\t\t\tif (fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"OVRPlugin\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] Native plugin included in build because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => true);\n\t\t\t\t}\n\t\t\t\tif (!fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"libopenxr_loader.so\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] libopenxr_loader.so from other packages will be disabled because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"OculusXRFeature is not enabled in OpenXR Settings. Oculus Integration scripts will not be functional.\");\n\t\t}\n#endif\n\n#if UNITY_ANDROID && !(USING_XR_SDK && UNITY_2019_3_OR_NEWER)\n\t\t\n\t\tif (!PlayerSettings.GetUseDefaultGraphicsAPIs(BuildTarget.Android))\n\t\t{\n\t\t\tGraphicsDeviceType[] apis = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);\n\t\t\tif (apis.Length >= 1 && apis[0] == GraphicsDeviceType.Vulkan)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"The Vulkan Graphics API does not support XR in your configuration. To use Vulkan, you must use Unity 2019.3 or newer, and the XR Plugin Management.\");\n\t\t\t}\n\t\t}\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS && OCULUS_XR_SYMMETRIC\n        OculusSettings settings;\n        UnityEditor.EditorBuildSettings.TryGetConfigObject<OculusSettings>(\"Unity.XR.Oculus.Settings\", out settings);\n\n        if (settings.SymmetricProjection && !symmetricWarningShown)\n        {\n            symmetricWarningShown = true;\n            UnityEngine.Debug.LogWarning(\"Symmetric Projection is enabled in the Oculus XR Settings. To ensure best GPU performance, make sure at least FFR 1 is being used.\");\n        }\n#endif\n\n#if UNITY_ANDROID\n#if USING_XR_SDK\n        if (useOpenXR)\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"Oculus Utilities Plugin with OpenXR is being used, which is under experimental status\");\n\n\t\t\tif (PlayerSettings.colorSpace != ColorSpace.Linear)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports linear lighting. Please set 'Rendering/Color Space' to 'Linear' in Player Settings\");\n\t\t\t}\n\t\t}\n#else\n\t\tif (useOpenXR)\n\t\t{\n\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports XR Plug-in Managmenent with Oculus XR Plugin.\");\n\t\t}\n#endif",
    "code_repairing_3": "The code snippet you provided is part of a larger script that modifies the Android build process to support the Oculus virtual reality platform. The snippet you provided is intended to be used in the context of a larger script, which is why I have not included the full script for you. However, I can tell you that the snippet you provided is modifying a \"Gradle wrapper\" file that is used by the Android build process, and is adding some additional logic to the build process to support the Oculus platform.\n\nSpecifically, the snippet you provided is modifying the \"build.gradle\" file in the Android build process to add some additional functionality for the OpenXR integration. This is an experimental feature that is not yet fully supported by the Oculus platform, but it is one way to use Unity's \"XR Plug-in Management\" feature to support the OpenXR platform.\n\nIt's important to note that this script is only intended to be used in the context of the Unity editor, and should not be used in a standalone release of your game. Additionally, it's important to only use this script for development purposes, as it may not be functional in a production release.\n\nIf you have any further questions, feel free to ask!",
    "code_repairing_4": "```\n// FIXED CODE:\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml;\nusing System.Diagnostics;\nusing System.Threading;\nusing Oculus.VR.Editor;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\n#if UNITY_ANDROID\nusing UnityEditor.Android;\n#endif\n\n#if USING_XR_SDK_OPENXR\nusing UnityEngine.XR.OpenXR;\nusing UnityEditor.XR.OpenXR.Features;\n#endif\n\n#if USING_XR_SDK_OCULUS\nusing Unity.XR.Oculus;\n#endif\n\n[InitializeOnLoad]\npublic class OVRGradleGeneration\n\t: IPreprocessBuildWithReport, IPostprocessBuildWithReport\n#if UNITY_ANDROID\n\t, IPostGenerateGradleAndroidProject\n#endif\n{\n\tpublic OVRADBTool adbTool;\n\tpublic Process adbProcess;\n\n#if PRIORITIZE_OCULUS_XR_SETTINGS\n\tprivate int _callbackOrder = 3;\n#else\n\tprivate int _callbackOrder = 99999; \n#endif\n\n\tpublic int callbackOrder { get { return _callbackOrder; } }\n\tstatic private System.DateTime buildStartTime;\n\tstatic private System.Guid buildGuid;\n\n#if UNITY_ANDROID\n\tpublic const string prefName = \"OVRAutoIncrementVersionCode_Enabled\";\n\tprivate const string menuItemAutoIncVersion = \"Oculus/Tools/Auto Increment Version Code\";\n\tstatic bool autoIncrementVersion = false;\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS\n    static private bool symmetricWarningShown = false;\n#endif\n\n    static OVRGradleGeneration()\n\t{\n\t\tEditorApplication.delayCall += OnDelayCall;\n\t}\n\n\tstatic void OnDelayCall()\n\t{\n#if UNITY_ANDROID\n\t\tautoIncrementVersion = PlayerPrefs.GetInt(prefName, 0) != 0;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n#endif\n\t}\n\n#if UNITY_ANDROID\n\t[MenuItem(menuItemAutoIncVersion)]\n\tpublic static void ToggleUtilities()\n\t{\n\t\tautoIncrementVersion = !autoIncrementVersion;\n\t\tMenu.SetChecked(menuItemAutoIncVersion, autoIncrementVersion);\n\n\t\tint newValue = (autoIncrementVersion) ? 1 : 0;\n\t\tPlayerPrefs.SetInt(prefName, newValue);\n\t\tPlayerPrefs.Save();\n\n\t\tUnityEngine.Debug.Log(\"Auto Increment Version Code: \" + autoIncrementVersion);\n\t}\n#endif\n\n#if USING_XR_SDK\n\tpublic void OnPreprocessBuild(BuildReport report)\n\t{\n\t\tbool useOpenXR = OVRPluginInfo.IsOVRPluginOpenXRActivated();\n\n#if USING_XR_SDK_OPENXR\n\t\tUnityEngine.Debug.LogWarning(\"The installation of Unity OpenXR Plugin is detected, which should NOT be used in production when developing Oculus apps for production. Please uninstall the package, and install the Oculus XR Plugin from the Package Manager.\");\n\n\t\t\n\t\tvar oculusXRFeature = FeatureHelpers.GetFeatureWithIdForBuildTarget(report.summary.platformGroup, Oculus.XR.OculusXRFeature.featureId);\n\t\tif (oculusXRFeature.enabled)\n\t\t{\n\t\t\tif (!useOpenXR)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"OpenXR backend for Oculus Plugin is disabled, which is required to support Unity OpenXR Plugin. Please enable OpenXR backend for Oculus Plugin through the 'Oculus -> Tools -> OpenXR' menu.\");\n\t\t\t}\n\n\t\t\tstring ovrRootPath = OVRPluginInfo.GetUtilitiesRootPath();\n\t\t\tvar importers = PluginImporter.GetAllImporters();\n\t\t\tforeach (var importer in importers)\n\t\t\t{\n\t\t\t\tif (!importer.GetCompatibleWithPlatform(report.summary.platform))\n\t\t\t\t\tcontinue;\n\t\t\t\tstring fullAssetPath = Path.Combine(Directory.GetCurrentDirectory(), importer.assetPath);\n#if UNITY_EDITOR_WIN\n\t\t\t\tfullAssetPath = fullAssetPath.Replace(\"/\", \"\\\\\");\n#endif\n\t\t\t\tif (fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"OVRPlugin\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] Native plugin included in build because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => true);\n\t\t\t\t}\n\t\t\t\tif (!fullAssetPath.StartsWith(ovrRootPath) && fullAssetPath.Contains(\"libopenxr_loader.so\"))\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogFormat(\"[Oculus] libopenxr_loader.so from other packages will be disabled because of enabled OculusXRFeature: {0}\", importer.assetPath);\n\t\t\t\t\timporter.SetIncludeInBuildDelegate(path => false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"OculusXRFeature is not enabled in OpenXR Settings. Oculus Integration scripts will not be functional.\");\n\t\t}\n#endif\n\n#if UNITY_ANDROID && !(USING_XR_SDK && UNITY_2019_3_OR_NEWER)\n\t\t\n\t\tif (!PlayerSettings.GetUseDefaultGraphicsAPIs(BuildTarget.Android))\n\t\t{\n\t\t\tGraphicsDeviceType[] apis = PlayerSettings.GetGraphicsAPIs(BuildTarget.Android);\n\t\t\tif (apis.Length >= 1 && apis[0] == GraphicsDeviceType.Vulkan)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"The Vulkan Graphics API does not support XR in your configuration. To use Vulkan, you must use Unity 2019.3 or newer, and the XR Plugin Management.\");\n\t\t\t}\n\t\t}\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK_OCULUS && OCULUS_XR_SYMMETRIC\n        OculusSettings settings;\n        UnityEditor.EditorBuildSettings.TryGetConfigObject<OculusSettings>(\"Unity.XR.Oculus.Settings\", out settings);\n\n        if (settings.SymmetricProjection && !symmetricWarningShown)\n        {\n            symmetricWarningShown = true;\n            UnityEngine.Debug.LogWarning(\"Symmetric Projection is enabled in the Oculus XR Settings. To ensure best GPU performance, make sure at least FFR 1 is being used.\");\n        }\n#endif\n\n#if UNITY_ANDROID\n#if USING_XR_SDK\n        if (useOpenXR)\n\t\t{\n\t\t\tUnityEngine.Debug.LogWarning(\"Oculus Utilities Plugin with OpenXR is being used, which is under experimental status\");\n\n\t\t\tif (PlayerSettings.colorSpace != ColorSpace.Linear)\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports linear lighting. Please set 'Rendering/Color Space' to 'Linear' in Player Settings\");\n\t\t\t}\n\t\t}\n#else\n\t\tif (useOpenXR)\n\t\t{\n\t\t\tthrow new BuildFailedException(\"Oculus Utilities Plugin with OpenXR only supports XR Plug-in Managmenent with Oculus XR Plugin.\");\n\t\t}\n#endif\n#endif\n\n#if UNITY_ANDROID && USING_XR_SDK && !USING_COMPATIBLE_OCULUS_XR_PLUGIN_VERSION"
}