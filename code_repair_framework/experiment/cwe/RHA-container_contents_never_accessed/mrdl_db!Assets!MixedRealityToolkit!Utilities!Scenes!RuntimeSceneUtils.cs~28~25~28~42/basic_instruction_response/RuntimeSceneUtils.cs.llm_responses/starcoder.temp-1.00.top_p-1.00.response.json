{
    "code_repairing_0": "using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            var allScenes = SceneManager.sceneCountInBuildSettings;\n            for (var i = 0; i < allScenes; i++)\n            {\n                var loadedScene = SceneManager.GetSceneAt(i);\n                if (string.Equals(loadedScene.name, sceneName, StringComparison.OrdinalIgnoreCase))\n                {\n                    scene = loadedScene;\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n\n            scene = default;\n            sceneIndex = -1;\n            return false;\n        }\n    }\n}",
    "code_repairing_1": "using System.Collections.Generic;\nusing UnityEngine;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            List<Scene> allScenesInProject = new List<Scene>(SceneManager.sceneCountInBuildSettings);\n            SceneManager.GetScenes(allScenesInProject);\n\n            for (int i = 0; i < allScenesInProject.Count; i++)\n            {\n                if (GetSceneNameFromScenePath(allScenesInProject[i].path) == sceneName)\n                {\n                    scene = allScenesInProject[i];\n                    sceneIndex = i;\n                    return true;",
    "code_repairing_2": "using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            // Get all loaded scenes\n            List<Scene> allScenesInProject = new List<Scene>(SceneManager.sceneCountInBuildSettings);\n            SceneManager.GetScenes(allScenesInProject);\n\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            // Search for the scene by name\n            for (int i = 0; i < allScenesInProject.Count; i++)\n            {\n                if (GetSceneNameFromScenePath(allScenesInProject[i].path) == scene",
    "code_repairing_3": "using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        \n        \n        \n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            int numScenes = SceneManager.sceneCountInBuildSettings;\n            for (int i = 0; i < numScenes; ++i)\n            {\n                Scene currentScene = SceneManager.GetSceneAt(i);\n                if (string.Equals(sceneName, currentScene.name, StringComparison.OrdinalIgnoreCase))\n                {\n                    scene = currentScene;\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n\n            return false;\n        }",
    "code_repairing_4": "using System.Collections.Generic;\nusing UnityEngine;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            var allScenesInProject = new List<Scene>();\n            SceneManager.GetScenes(allScenesInProject);\n\n            for (int i = 0; i < allScenesInProject.Count; i++)\n            {\n                if (GetSceneNameFromScenePath(allScenesInProject[i].path) == sceneName)\n                {\n                    scene = allScenesInProject[i];\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }"
}