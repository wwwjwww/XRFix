{
    "code_repairing_0": "using System.Collections.Generic;\nusing UnityEngine;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            List<Scene> allScenesInProject = new List<Scene>();\n            int count = SceneManager.sceneCountInBuildSettings;\n            for (int i = 0; i < count; i++)\n            {\n                allScenesInProject.Add(SceneManager.GetSceneAt(i));\n            }\n\n            for (int i = 0; i < allScenesInProject.Count; i++)\n            {\n                if (allScenesInProject[i].name == sceneName)\n                {\n                    sceneIndex = i;\n                    scene = allScenesInProject[i];\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}",
    "code_repairing_1": "using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            int count = SceneManager.sceneCount;\n            for (int i = 0; i < count; i++)\n            {\n                Scene currentScene = SceneManager.GetSceneAt(i);\n                if (currentScene.name.Equals(sceneName))\n                {\n                    scene = currentScene;\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public static bool LoadScene(string sceneName, LoadSceneMode mode)\n        {\n            int sceneIndex;\n            return FindScene(sceneName, out Scene scene, out sceneIndex) &&\n                   SceneManager.LoadSceneAsync(sceneIndex",
    "code_repairing_2": "using System.Collections.Generic;\nusing UnityEngine;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        \n        \n        \n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n            \n            \n            // Find scene index based on name\n            for (int i = 0; i < SceneManager.sceneCount; i++)\n            {\n                if (SceneManager.GetSceneAt(i).name == sceneName)\n                {\n                    sceneIndex = i;\n                    scene = SceneManager.GetSceneAt(i);\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n[System.Obsolete(\"LoadSceneAsync is being deprecated. Please use LoadSceneAsync method instead.\", true)]\n        public static async void LoadSceneAsync(int sceneIndex, LoadSceneMode mode)\n        {\n            await SceneManager.LoadSceneAsync(sceneIndex, mode);\n        }",
    "code_repairing_3": "```\n```\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            List<Scene> allScenesInProject = new List<Scene>();\n            foreach (string path in UnityEngine.SceneManagement.SceneManager.scenePaths)\n            {\n                Scene s = UnityEngine.SceneManagement.SceneManager.GetSceneAt(allScenesInProject.Count);\n                allScenesInProject.Add(s);\n            }\n\n            for (int i = 0; i < allScenesInProject.Count; i++)\n            {\n                if (allScenesInProject[i].name.Equals(sceneName))\n                {\n                    scene = allScenesInProject[i];\n                    sceneIndex = i;\n                    return true;\n                }",
    "code_repairing_4": "using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            var allScenesInProject = new List<Scene>();\n            SceneManager.sceneLoaded += (Scene s) => allScenesInProject.Add(s);\n            SceneManager.LoadScene(sceneName);\n            for (var i = 0; i < allScenesInProject.Count; i++)\n            {\n                if (GetSceneNameFromScenePath(allScenesInProject[i].path) == sceneName)\n                {\n                    scene = allScenesInProject[i];\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n<|user|>"
}