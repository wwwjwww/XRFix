{
    "code_repairing_0": "public class keyboardDeviceInterface : deviceInterface {\n  public timelineComponentInterface _timeline;\n  public midiComponentInterface _midiIn, _midiOut;\n  public GameObject whiteKeyPrefab, blackKeyPrefab;\n  public omniJack output, freqoutput, ampoutput;\n  public button muteButton, midiInButton, midiOutButton, sequenceButton;\n\n  public midiOutOfRange midiLow, midiHigh;\n\n  public speaker _speaker;\n  int keyCount = 25;\n  key[] keys;\n\n  adsrInterface _adsrInterface;\n  basicSwitch octaveToggle;\n\n  keyFrequencySignalGenerator freqSignal;\n  adsrSignalGenerator adsrSignal;\n  int curKey;\n\n  keyState[] keyStates = new keyState[25];\n\n  public override void Awake() {\n    base.Awake();\n\n    curKey = -1;\n\n    _adsrInterface = GetComponentInChildren<adsrInterface>();\n    octaveToggle = GetComponentInChildren<basicSwitch>();\n\n    freqSignal = GetComponent<keyFrequencySignalGenerator>();\n    adsrSignal = GetComponent<adsrSignalGenerator>();\n\n    freqoutput.homesignal = freqSignal;\n    ampoutput.homesignal = adsrSignal;\n\n    keys = new key[keyCount];\n    adsrSignal.durations = _adsrInterface.durations;\n    adsrSignal.volumes = _adsrInterface.volumes;\n    SpawnKeys();\n\n    for (int i = 0; i < 25; i++) keyStates[i] = new keyState(false);\n  }\n\n  void SpawnKeys() {\n    float separation =.05f;\n    int whiteCount = 0;\n    for (int i = 0; i < keyCount; i++) {\n      GameObject g;\n      if (i % 12 == 1 || i % 12 == 3 || i % 12 == 6 || i % 12 == 8 || i % 12 == 10) {\n        g = Instantiate(blackKeyPrefab, transform, false) as GameObject;\n        g.transform.localPosition = new Vector3(-separation * whiteCount + separation / 2 +.15f,.03f, -.025f);\n      } else {\n        g = Instantiate(whiteKeyPrefab, transform, false) as GameObject;\n        g.transform.localPosition = new Vector3(-separation * whiteCount +.15f, -.007f,.005f);\n        whiteCount++;\n      }\n      keys[i] = g.GetComponent<key>();\n      keys[i].keyValue = i;\n      keys[i].isKeyboard = true;\n      keys[i].sticky = false;\n    }\n  }\n\n  bool muted = false;\n  public void toggleMute(bool on) {\n    muted = on;\n    _speaker.volume = muted? 0 : 1;\n  }\n\n  public override void onTimelineEvent(int track, bool on) {\n    asynchKeyHit(on, track, keyInput.seq);\n  }\n\n  bool midiLowDesired = false;\n  bool midiHighDesired = false;\n\n  public override void OnMidiNote(int channel, bool on, int pitch) {\n    int ID = pitch - 48;\n    if (ID < 0) {\n      if (on) midiLowDesired = true;\n    } else if (ID > 24) {\n      if (on) midiHighDesired = true;\n    } else {\n      asynchKeyHit(on, ID, keyInput.midi);\n    }\n  }\n\n  public void asynchKeyHit(bool on, int ID, keyInput k) {\n    if (k == keyInput.midi) keyStates[ID].midiState = on;\n    else if (k == keyInput.seq) keyStates[ID].seqState = on;\n    else if (k == keyInput.touch) keyStates[ID].touchState = on;\n\n    if (keyStates[ID].nonSeqStateChange()) {\n      keyStates[ID].currentNonSeqState = keyStates[ID].getNonSeqState();\n      _timeline.onTimelineEvent(ID, keyStates[ID].currentNonSeqState);\n    }\n\n    if (keyStates[ID].stateChange()) {\n      on = keyStates[ID].currentState = keyStates[ID].getState();\n      keys[ID].phantomHit(on);\n      keyHitEvent(on, ID);\n    }\n  }\n\n  void keyHitEvent(bool on, int ID) {\n    if (on) {\n      if (curKey!= ID) {\n        int prev = curKey;\n        curKey = ID;\n\n        if (prev!= -1) {\n          adsrSignal.hit(false);\n          if (_midiOut!= null) _midiOut.OutputNote(false, prev);\n        }\n\n        if (_midiOut!= null) _midiOut.OutputNote(on, ID);\n        freqSignal.UpdateKey(curKey);\n        adsrSignal.hit(true);\n      }\n    } else {\n      if (curKey == ID) {\n        _midiOut.OutputNote(false, ID);\n        adsrSignal.hit(false);\n        curKey = -1;\n      }\n    }\n  }\n\n  void toggleMIDIin(bool on) {\n    _midiIn.gameObject.SetActive(on);\n  }\n\n  void toggleMIDIout(bool on) {\n    _midiOut.gameObject.SetActive(on);\n  }\n\n  void toggleSequencer(bool on) {\n    _timeline.gameObject.SetActive(on);\n  }\n\n  public override void hit(bool on, int ID = -1) {\n    if (ID == -1) {\n      toggleMute(on);\n    } else if (ID == -2) {\n      toggleMIDIin(on);\n    } else if (ID == -3) {\n      toggleMIDIout(on);\n    } else if (ID == -4) {\n      toggleSequencer(on);\n    } else {\n      asynchKeyHit(on, ID, keyInput.touch);\n    }\n  }\n\n  void Update() {\n    if (octaveToggle.switchVal) freqSignal.octave = 1;\n    else freqSignal.octave = 0;\n\n    if (midiLowDesired) {\n      midiLowDesired = false;\n      midiLow.gameObject.SetActive(true);\n      midiLow.Activate();\n    }\n\n    if (midiHighDesired) {\n      midiHighDesired = false;\n      midiHigh.gameObject.SetActive(true);\n      midiHigh.Activate();\n    }\n  }\n\n  public override InstrumentData GetData() {\n    KeyboardData data = new KeyboardData();\n    data.deviceType = menuItem.deviceType.Keyboard;\n    GetTransformData(data);\n    data.muted = muted;\n    data.octaveSwitch = octaveToggle.switchVal;\n    data.ADSRdata = new Vector2[3];\n    for (int i = 0; i < 3; i++) {\n      data.ADSRdata[i] = _adsrInterface.xyHandles[i].percent;\n    }\n\n    data.jackOutID = output.transform.GetInstanceID();\n    data.freqOutID = freqoutput.transform.GetInstanceID();\n    data.ampOutID = ampoutput.transform.GetInstanceID();\n\n    data.midiInConnection = _midiIn.connectedDevice;\n    data.midiOutConnection = _midiOut.connectedDevice;\n    data.sequencerEnabled = _timeline.gameObject.activeSelf;\n\n    data.timelinePresent = true;\n    data.timelineData = _timeline.GetTimelineData();\n    data.timelineHeight = _timeline.heightHandle.transform.localPosition.y;\n    List<timelineEvent.eventData> tempevents = new List<timelineEvent.eventData>();\n    for (int i = 0; i < _timeline._tlEvents.Count; i++) {\n      if (_timeline._tlEvents[i]!= null) tempevents.Add(_timeline._tlEvents[i].getEventInfo());\n    }\n    data.timelineEvents = tempevents.ToArray();\n\n    return data;\n  }\n\n  public override void Load(InstrumentData d) {\n    KeyboardData data = d as KeyboardData;\n    base.Load(data);\n\n    output.ID = data.jackOutID;\n    freqoutput.ID = data.freqOutID;\n    ampoutput.ID = data.ampOutID;\n\n    for (int i = 0; i < 3; i++) _adsrInterface.xyHandles[i].setPercent(data.ADSRdata[i]);\n    _adsrInterface.setDefaults = false;\n\n    muteButton.startToggled = data.muted;\n    octaveToggle.setSwitch(data.octaveSwitch);\n\n    if (data.midiInConnection!= null && data.midiInConnection!= \"\") {\n      _midiIn.Load(data.midiInConnection);\n    }\n\n    if (data.midiOutConnection!= null && data.midiOutConnection!= \"\") {\n      _midiOut.Load(data.midiOutConnection);\n    }\n\n    if (data.sequencerEnabled) {\n      _timeline.gameObject.SetActive(true);\n      _timeline.Load(data.timelineData);\n      _timeline.heightHandle.transform.localPosition = new Vector3(0, data.timelineHeight, 0);\n      for (int i = 0; i < data.timelineEvents.Length; i++) {\n        timelineEvent t = Instantiate(_timeline._eventPrefab, _timeline.transform).GetComponent<timelineEvent>();\n        t.Load(data.timelineEvents[i]);\n        _timeline._tlEvents.Add(t);\n      }\n    } else {\n      _timeline.gameObject.SetActive(false);\n    }\n  }\n}",
    "code_repairing_1": "\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043d\u0438\u0433 \u043f\u043e Java.\n\u0422\u0443\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0432\u0435\u0442\u043e\u0432:\n\n1. \u041d\u0435 \u0431\u043e\u0439\u0442\u0435\u0441\u044c \u043e\u0448\u0438\u0431\u043e\u043a. \u042d\u0442\u043e \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u044f\u0437\u044b\u043a\u0430. \u0421\u0440\u0430\u0437\u0443 \u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u043e\u0432. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0440\u0430\u0437, \u0435\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442 \u0442\u0430 \u0436\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0441\u0440\u0430\u0437\u0443 \u0436\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0435\u0441\u044f \u0432 \u043f\u0430\u043f\u043a\u0435 \u0441\u043e \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0430\u043c\u0438 \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f\". \u041d\u0435 \u0431\u043e\u0439\u0442\u0435\u0441\u044c \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0451 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0443\u0437\u043d\u0430\u043b\u0438 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0434\u0430\u0451\u0442 \u043e\u0448\u0438\u0431\u043a\u0443. \u0412\u0438\u0434\u0438\u0442\u0435, \u043a\u0430\u043a \u043f\u0438\u0448\u0443\u0442 \u0435\u0433\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438. \u041e\u043d\u0438, \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u043d\u0435 \u0437\u043d\u0430\u044e\u0442, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u043e\u043d\u0438 \u0443\u043c\u0435\u044e\u0442 \u0442\u043e\u0442 \u0438\u043b\u0438 \u0438\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.\n2. \u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043d\u0435 \u0431\u043e\u0439\u0442\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Android Studio \u0438\u043b\u0438 IntelliJ IDEA. \u041f\u0440\u0438\u0447\u0451\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u0441\u0440\u0435\u0434\u044b - \u0432\u044b\u0431\u0438\u0440\u0430\u0439\u0442\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 Android Studio \u0438 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e IntelliJ IDEA. \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432\u044b \u0443\u0437\u043d\u0430\u0435\u0442\u0435 \u043c\u043d\u043e\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e, \u043a \u0442\u043e\u043c\u0443 \u0436\u0435 \u0432\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0441\u0440\u0435\u0434\u0430\u043c\u0438, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0442\u043e\u0447\u043d\u043e \u043e\u0434\u043d\u0443.\n3. \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043d\u0430\u0447\u043d\u0451\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438, \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442. \u041d\u0435 \u0431\u043e\u0439\u0442\u0435\u0441\u044c \u0438\u0445 \u0438\u0437\u0443\u0447\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0438\u0442\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e. \u0412\u044b \u0443\u0437\u043d\u0430\u0435\u0442\u0435 \u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0433\u043e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 Retrofit \u0432\u044b \u0443\u0437\u043d\u0430\u0435\u0442\u0435, \u0447\u0442\u043e \u0432\u043d\u0443\u0442\u0440\u0438 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 API, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b \u043d\u0435 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u044d\u0442\u0438\u043c API, \u0430 \u0432\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b Java, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 Android Studio \u0438\u043b\u0438 IntelliJ IDEA. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u044d\u0442\u0438\u0445 IDE \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 Java. \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u044d\u0442\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a API. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 Java \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0440\u0430\u0437\u043d\u044b\u0445",
    "code_repairing_2": "\u042f \u043d\u0435 \u043c\u043e\u0433\u0443 \u0431\u044b\u0442\u044c \u0442\u043e\u0447\u043d\u044b\u043c \u0432 \u044d\u0442\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u0445, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043d\u0435\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0435\u043d \u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432",
    "code_repairing_3": "Yo soy una papa fuerte,\nque no es f\u00e1cil de arrascar,\nvivo en el campo,\ny en mis sue\u00f1os cazo un jabal\u00ed.\n\nEres un jabal\u00ed m\u00edtico,\nque nunca es f\u00e1cil atrapar,\nsaltas y vuelas,\na tu lado nunca est\u00e1s para quedar.\n\nUn d\u00eda me encontra la mano,\ny no puedo resistir el apetito,\nde saber si realmente eres barato,\nno puedes saber con certeza hasta que lo pruebes.\n\n\u00a1Y as\u00ed que lo empece a cazar!,\ncon todo lo que tengo en mi mano,\nesto no es f\u00e1cil,\ntengo que mantener la paz con el animal.\n\nPor mucho que trate,\nno consigo terminar con \u00e9l,\ntodo lo que hago,\nse lo lleva volviendo a atacar.\n\nPero aun as\u00ed sigo intent\u00e1ndolo,\naunque no llegue a cazarlo,\nlo intento porque s\u00e9,\nque en alg\u00fan momento lo",
    "code_repairing_4": "using UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class keyboardDeviceInterface : deviceInterface {\n  public timelineComponentInterface _timeline;\n  public midiComponentInterface _midiIn, _midiOut;\n  public GameObject whiteKeyPrefab, blackKeyPrefab;\n  public omniJack output, freqoutput, ampoutput;\n  public button muteButton, midiInButton, midiOutButton, sequenceButton;\n\n  public midiOutOfRange midiLow, midiHigh;\n\n  public speaker _speaker;\n  int keyCount = 25;\n  key[] keys;\n\n  adsrInterface _adsrInterface;\n  basicSwitch octaveToggle;\n\n  keyFrequencySignalGenerator freqSignal;\n  adsrSignalGenerator adsrSignal;\n  int curKey;\n\n  keyState[] keyStates = new keyState[25];\n\n  public override void Awake() {\n    base.Awake();\n\n    curKey = -1;\n\n    _adsrInterface = GetComponentInChildren<adsrInterface>();\n    octaveToggle = GetComponentInChildren<basicSwitch>();\n\n    freqSignal = GetComponent<keyFrequencySignalGenerator>();\n    adsrSignal = GetComponent<adsrSignalGenerator>();\n\n    freqoutput.homesignal = freqSignal;\n    ampoutput.homesignal = adsrSignal;\n\n    keys = new key[keyCount];\n    adsrSignal.durations = _adsrInterface.durations;\n    adsrSignal.volumes = _adsrInterface.volumes;\n    SpawnKeys();\n\n    for (int i = 0; i < 25; i++) keyStates[i] = new keyState(false);\n  }\n\n  void SpawnKeys() {\n    float separation =.05f;\n    int whiteCount = 0;\n    for (int i = 0; i < keyCount; i++) {\n      GameObject g;\n      if (i % 12 == 1 || i % 12 == 3 || i % 12 == 6 || i % 12 == 8 || i % 12 == 10) {\n        g = Instantiate(blackKeyPrefab, transform, false) as GameObject;\n        g.transform.localPosition = new Vector3(-separation * whiteCount + separation / 2 +.15f,.03f, -.025f);\n      } else {\n        g = Instantiate(whiteKeyPrefab, transform, false) as GameObject;\n        g.transform.localPosition = new Vector3(-separation * whiteCount +.15f, -.007f,.005f);\n        whiteCount++;\n      }\n      keys[i] = g.GetComponent<key>();\n      keys[i].keyValue = i;\n      keys[i].isKeyboard = true;\n      keys[i].sticky = false;\n    }\n  }\n\n  bool muted = false;\n  public void toggleMute(bool on) {\n    muted = on;\n    _speaker.volume = muted? 0 : 1;\n  }\n\n  public override void onTimelineEvent(int track, bool on) {\n    asynchKeyHit(on, track, keyInput.seq);\n  }\n\n  bool midiLowDesired = false;\n  bool midiHighDesired = false;\n\n  public override void OnMidiNote(int channel, bool on, int pitch) {\n    int ID = pitch - 48;\n    if (ID < 0) {\n      if (on) midiLowDesired = true;\n    } else if (ID > 24) {\n      if (on) midiHighDesired = true;\n    } else {\n      asynchKeyHit(on, ID, keyInput.midi);\n    }\n  }\n\n  public void asynchKeyHit(bool on, int ID, keyInput k) {\n    if (k == keyInput.midi) keyStates[ID].midiState = on;\n    else if (k == keyInput.seq) keyStates[ID].seqState = on;\n    else if (k == keyInput.touch) keyStates[ID].touchState = on;\n\n    if (keyStates[ID].nonSeqStateChange()) {\n      keyStates[ID].currentNonSeqState = keyStates[ID].getNonSeqState();\n      _timeline.onTimelineEvent(ID, keyStates[ID].currentNonSeqState);\n    }\n\n    if (keyStates[ID].stateChange()) {\n      on = keyStates[ID].currentState = keyStates[ID].getState();\n      keys[ID].phantomHit(on);\n      keyHitEvent(on, ID);\n    }\n  }\n\n  void keyHitEvent(bool on, int ID) {\n    if (on) {\n      if (curKey!= ID) {\n        int prev = curKey;\n        curKey = ID;\n\n        if (prev!= -1) {\n          adsrSignal.hit(false);\n          if (_midiOut!= null) _midiOut.OutputNote(false, prev);\n        }\n\n        if (_midiOut!= null) _midiOut.OutputNote(on, ID);\n        freqSignal.UpdateKey(curKey);\n        adsrSignal.hit(true);\n      }\n    } else {\n      if (curKey == ID) {\n        _midiOut.OutputNote(false, ID);\n        adsrSignal.hit(false);\n        curKey = -1;\n      }\n    }\n  }\n\n  void toggleMIDIin(bool on) {\n    _midiIn.gameObject.SetActive(on);\n  }\n\n  void toggleMIDIout(bool on) {\n    _midiOut.gameObject.SetActive(on);\n  }\n\n  void toggleSequencer(bool on) {\n    _timeline.gameObject.SetActive(on);\n  }\n\n  public override void hit(bool on, int ID = -1) {\n    if (ID == -1) {\n      toggleMute(on);\n    } else if (ID == -2) {\n      toggleMIDIin(on);\n    } else if (ID == -3) {\n      toggleMIDIout(on);\n    } else if (ID == -4) {\n      toggleSequencer(on);\n    } else {\n      asynchKeyHit(on, ID, keyInput.touch);\n    }\n  }\n\n  void Update() {\n    if (octaveToggle.switchVal) freqSignal.octave = 1;\n    else freqSignal.octave = 0;\n\n    if (midiLowDesired) {\n      midiLowDesired = false;\n      midiLow.gameObject.SetActive(true);\n      midiLow.Activate();\n    }\n\n    if (midiHighDesired) {\n      midiHighDesired = false;\n      midiHigh.gameObject.SetActive(true);\n      midiHigh.Activate();\n    }\n  }\n\n  public override InstrumentData GetData() {\n    KeyboardData data = new KeyboardData();\n    data.deviceType = menuItem.deviceType.Keyboard;\n    GetTransformData(data);\n    data.muted = muted;\n    data.octaveSwitch = octaveToggle.switchVal;\n    data.ADSRdata = new Vector2[3];\n    for (int i = 0; i < 3; i++) {\n      data.ADSRdata[i] = _adsrInterface.xyHandles[i].percent;\n    }\n\n    data.jackOutID = output.transform.GetInstanceID();\n    data.freqOutID = freqoutput.transform.GetInstanceID();\n    data.ampOutID = ampoutput.transform.GetInstanceID();\n\n    data.midiInConnection = _midiIn.connectedDevice;\n    data.midiOutConnection = _midiOut.connectedDevice;\n    data.sequencerEnabled = _timeline.gameObject.activeSelf;\n\n    data.timelinePresent = true;\n    data.timelineData = _timeline.GetTimelineData();\n    data.timelineHeight = _timeline.heightHandle.transform.localPosition.y;\n    List<timelineEvent.eventData> tempevents = new List<timelineEvent.eventData>();\n    for (int i = 0; i < _timeline._tlEvents.Count; i++) {\n      if (_timeline._tlEvents[i]!= null) tempevents.Add(_timeline._tlEvents[i].getEventInfo());\n    }\n    data.timelineEvents = tempevents.ToArray();\n\n    return data;\n  }\n\n  public override void Load(InstrumentData d) {\n    KeyboardData data = d as KeyboardData;\n    base.Load(data);\n\n    output.ID = data.jackOutID;\n    freqoutput.ID = data.freqOutID;\n    ampoutput.ID = data.ampOutID;\n\n    for (int i = 0; i < 3; i++) _adsrInterface.xyHandles[i].setPercent(data.ADSRdata[i]);\n    _adsrInterface.setDefaults = false;\n\n    muteButton.startToggled = data.muted;\n    octaveToggle.setSwitch(data.octaveSwitch);\n\n    if (data.midiInConnection!= null && data.midiInConnection!= \"\") {\n      _midiIn.Connect(data.midiInConnection);\n    }\n\n    if (data.midiOutConnection!= null && data.midiOutConnection!= \"\") {\n      _midiOut.Connect(data.midiOutConnection);\n    }\n\n    _timeline.Load(data.timelineData, data.timelineHeight, data.timelineEvents);\n  }\n\n  public enum keyInput { midi, seq, touch }\n}\n\npublic class keyState {\n  public bool midiState, seqState, touchState;\n  public bool currentNonSeqState;\n\n  public keyState(bool allOff) {\n    midiState = seqState = touchState = allOff;\n    currentNonSeqState = allOff;\n  }\n\n  public void setNonSeqState(bool on) {\n    midiState = seqState =!on;\n  }\n\n  public bool getState()"
}