{
    "code_repairing_0": "```csharp\nforeach (CSProjectInfo project in orderedProjects)\n{\n    configurationMappings.Add(configurationPlatformMappingTemplateBody.Replace(\"<Platform>\", project.Info.PlatformName.ToString()).Replace(\"<Configuration>\", \"InEditor\"));\n    configurationMappings.Add(configurationPlatformMappingTemplateBody.Replace(\"<Platform>\", AvailablePlatforms.First(p => p.Name == \"Player\").Name.ToString()).Replace(\"<Configuration>\", \"Player\"));\n}\n\nFile.WriteAllText(solutionFilePath, Utilities.ReplaceTokens(solutionTemplateText, new Dictionary<string, string>()\n{\n    { projectEntryTemplate, string.Join(Environment.NewLine, projectEntries) },\n    { configurationPlatformEntry, string.Join(Environment.NewLine, configPlatforms) },\n    { configurationPlatformMappingTemplate, string.Join(Environment.NewLine, configurationMappings) }\n}));\n\nforeach (CSProjectInfo project in orderedProjects)\n{\n    File.WriteAllText(projectInfo => GetProjectEntry(project, projectFileTemplateBody), generatedProjectPath, Utilities.ReplaceTokens(projectFileTemplateText, new Dictionary<string, string>()\n    {\n        { \"<ProjectName>\", project.Name },\n        { \"<ProjectEntry>\", GetProjectEntry(project, projectFileTemplateBody) }\n    }));\n}\n```\n\nThe code you've provided is cleaning and optimizing the code. It removes the redundant select method call and makes sure that the correct configuration mapping is added to the solution file. It also writes each project file to the appropriate location in the generated project directory.",
    "code_repairing_1": "```csharp\n                foreach (CSProjectInfo project in orderedProjects)\n                {\n                    configurationMappings.Add(configurationPlatformMappingTemplateBody.Replace(\"<ProjectName>\", project.Name).Replace(\"<Configuration>\", BuildPipeline.GetBuildTargetGroup(EditorUserBuildSettings.activeBuildTarget).ToString()));\n                    disabled.Add(configurationPlatformEnabledTemplateBody.Replace(\"<ProjectName>\", project.Name).Replace(\"<Configuration>\", \"InEditor\").Replace(\"<Enabled>\", \"True\"));\n                    disabled.Add(configurationPlatformEnabledTemplateBody.Replace(\"<ProjectName>\", project.Name).Replace(\"<Configuration>\", \"Player\").Replace(\"<Enabled>\", \"True\"));\n                }\n\n                string finalContent = solutionTemplateText\n                    .Replace(projectEntryTemplate, string.Join(Environment.NewLine, projectEntries))\n                    .Replace(configurationPlatformEntry, string.Join(Environment.NewLine, configPlatforms))\n                    .Replace(configurationPlatformMappingTemplate, string.Join(Environment.NewLine, configurationMappings))\n                    .Replace(configurationPlatformEnabledTemplate, string.Join(Environment.NewLine, disabled));\n\n                File.WriteAllText(solutionFilePath, finalContent);\n\n                foreach (var project in CSProjects)\n                {\n                    project.Value.ExportProjectFiles(generatedProjectPath, projectFileTemplateText);\n                }\n            }\n            else\n            {\n                Debug.LogError($\"Unable to export solution. One or more templates missing.\");\n            }\n        }\n    }\n}\n#endif",
    "code_repairing_2": "foreach (CSProjectInfo project in orderedProjects)\n{\n    configurationMappings.Add(configurationPlatformMappingTemplate.Replace(\"<Configuration>\", project.Configuration)\n                            .Replace(\"<Platform>\", project.Platform)\n                            .Replace(\"<ProjectName>\", project.Name));\n    disabled.Add(configurationPlatformEnabledTemplate.Replace(\"<Configuration>\", project.Configuration)\n                            .Replace(\"<Platform>\", project.Platform)\n                            .Replace(\"<Enable>\", \"false\"));\n}\n\n                using (StreamWriter writer = new StreamWriter(solutionFilePath, false, Encoding.UTF8))\n                {\n                    writer.WriteLine(solutionTemplateText\n                        .Replace(\"<PROJECT>\", string.Join(Environment.NewLine, projectEntries))\n                        .Replace(\"<CONFIGURATION_PLATFORM>\", string.Join(Environment \",\", configPlatforms))\n                        .Replace(\"<CONFIGURATION_PLATFORM_MAPPING>\", string.Join(Environment.NewLine, configurationMappings))\n                        .Replace(\"<CONFIGURATION_PLATFORM_ENABLED>\", string.Join(Environment.NewLine, disabled))\n                        );\n                }\n            }\n        }\n    }\n}\n#endif",
    "code_repairing_3": "```csharp\n                foreach (CSProjectInfo project in orderedProjects)\n                {\n                    foreach (CompilationPlatformInfo platform in AvailablePlatforms)\n                    {\n                        if (platform == project.CompilationPlatform)\n                        {\n                            configurationMappings.Add(configurationPlatformMappingTemplateBody.Replace(\"<ProjectPath>\", project.ReferencePath.AbsolutePath).Replace(\"<Platform>\", platform.Name.ToString().Replace(\"UnityEditor.\", \"\")));\n                            break;\n                        }\n                    }\n                }\n\n                configurationPlatformEnabledTemplateBody = configurationPlatformEnabledTemplateBody.Replace(\"<UnityConfiguration>\", UnityEditor.BuildOptions.AutoRunPlayer.ToString()).Replace(\"<DisabledUnityConfiguration>\", UnionTypeMapping.None.ToString());\n                disabled.AddRange(AvailablePlatforms.Where(p => p.Is32Bit)\n                    .Select(p => configurationPlatformEnabledTemplateBody.Replace(\"<Platform>\", p.Name.ToString().Replace(\"UnityEditor.\", \"\"))));\n\n                using (StreamWriter writer = new StreamWriter(solutionFilePath))\n                {\n                    writer.WriteLine(solutionTemplateText\n                        .Replace(projectEntryTemplate, string.Join(Environment.NewLine, projectEntries))\n                        .Replace(configurationPlatformEntry, string.Join(Environment.NewLine, configPlatforms))\n                        .Replace(configurationPlatformMappingTemplate, string.Join(Environment.NewLine, configurationMappings))\n                        .Replace(configurationPlatformEnabledTemplate, string.Join(Environment.NewLine, disabled.Select(t => t.Replace(\"<Enabled>\", \"False\")))));\n                }\n\n                foreach (KeyValuePair<string, CSProjectInfo> projectPair in CSProjects)\n                {\n                    string projectFilePath = Path.Combine(generatedProjectPath, Path.GetFileName(projectPair.Value.ReferencePath.AbsolutePath));\n                    using (StreamWriter writer = new StreamWriter(projectFilePath))\n                    {\n                        writer.WriteLine(GetProjectEntry(projectPair.Value, projectFileTemplateText));\n                    }\n                }\n            }\n            else\n            {\n                Debug.LogError(\"One or more of the required text templates were not found in: \" + solutionTemplateText);\n            }\n        }\n    }\n}\n\n\n#endif\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n\n\n\n// Microsoft and the trade mark symbol \"Windows\" and \"Windows Server\" are registered trademarks of Microsoft Corporation in the US and/or other countries.\n// Microsoft, Windows, Microsoft Azure, Active Directory, SQL Server are either registered trademarks, or trademarks of Microsoft in the US and/or other countries.\n//  \n//  \n//  \n//  \n//  \n//  \n//      \n//  \n//  \n//  \n//  \n//  \n//  \n//  \n//  \n//  \n//  \n//  \n//  \n//   \u00a9 2020.  All rights reserved.",
    "code_repairing_4": "```\n                foreach (CSProjectInfo project in orderedProjects)\n                {\n                    foreach (CompilationPlatformInfo platform in AvailablePlatforms)\n                    {\n                        if (platform.Equals(Utilities.AllPlatforms) || project.ContainsPlatform(platform))\n                        {\n                            configurationMappings.Add(configurationPlatformMappingTemplateBody.Replace(\"<Configuration>\", platform.IsEditor ? \"InEditor\" : \"Player\")\n                                .Replace(\"<Platform>\", platform.Name.ToString())\n                                .Replace(\"<ProjectName>\", project.Name));\n                            disabled.Add(configurationPlatformEnabledTemplateBody.Replace(\"<Configuration>\", platform.IsEditor ? \"InEditor\" : \"Player\")\n                                .Replace(\"<Platform>\", platform.Name.ToString())\n                                .Replace(\"<ProjectName>\", project.Name));\n                        }\n                    }\n                }\n\n                string solutionText = solutionTemplateText\n                    .Replace(projectEntryTemplate, projectEntries.Aggregate((a, b) => a + b))\n                    .Replace(configurationPlatformEntry, configPlatforms.Aggregate((a, b) => a + b))\n                    .Replace(configurationPlatformMappingTemplate, configurationMappings.Aggregate((a, b) => a + b))\n                    .Replace(configurationPlatformEnabledTemplate, disabled.Aggregate((a, b) => a + b));\n\n                File.WriteAllText(solutionFilePath, solutionText);\n            }\n            else\n            {\n                Debug.LogError($\"Unable to export solution: one or more templates were missing from the export format.\");\n            }\n        }\n    }\n}\n#endif"
}