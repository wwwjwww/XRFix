{
    "code_repairing_0": "public class Node\n{\n    public readonly TSourceJointId SourceJointId;\n    public readonly BodyJointId BodyJointId;\n\n    public Node Parent;\n    public List<Node> Children = new List<Node>();\n}\n\n// FIXED CODE:\npublic class SkeletonTree\n{\n    public readonly Node Root;\n    public readonly IReadOnlyList<Node> Nodes;\n\n    public SkeletonTree(TSourceJointId root,\n        IReadOnlyDictionary<BodyJointId, JointInfo> mapping)\n    {\n        Dictionary<TSourceJointId, Node> nodes = new Dictionary<TSourceJointId, Node>();\n        foreach (var map in mapping)\n        {\n            BodyJointId jointId = map.Key;\n            JointInfo jointInfo = map.Value;\n            Assert.IsFalse(nodes.ContainsKey(jointInfo.SourceJointId),\n                \"Duplicate Joint ID in Mapping\");\n            nodes[jointInfo.SourceJointId] =\n                new Node(jointInfo.SourceJointId, jointId);\n        }\n        foreach (var jointInfo in mapping.Values)\n        {\n            Node thisNode = nodes[jointInfo.SourceJointId];\n            thisNode.Parent = nodes[jointInfo.ParentJointId];\n            thisNode.Parent.Children.Add(thisNode);\n        }\n        Nodes = new List<Node>(nodes.Values);\n        Root = nodes[root];\n    }\n}",
    "code_repairing_1": "```:\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine.Assertions;\nusing Oculus.Interaction.Collections;\n\nnamespace Oculus.Interaction.Body.Input\n{\n    public abstract class BodySkeletonMapping<TSourceJointId> : ISkeletonMapping\n    where TSourceJointId : System.Enum\n    {\n        public IEnumerableHashSet<BodyJointId> Joints => _joints;\n\n        public bool TryGetParentJointId(BodyJointId jointId, out BodyJointId parentJointId)\n        {\n            return _jointToParent.TryGetValue(jointId, out parentJointId);\n        }\n\n        public bool TryGetSourceJointId(BodyJointId jointId, out TSourceJointId sourceJointId)\n        {\n            return _reverseMap.TryGetValue(jointId, out sourceJointId);\n        }\n\n        public bool TryGetBodyJointId(TSourceJointId jointId, out BodyJointId bodyJointId)\n        {\n            return _forwardMap.TryGetValue(jointId, out bodyJointId);\n        }\n\n        protected TSourceJointId GetSourceJointFromBodyJoint(BodyJointId jointId)\n        {\n            return _reverseMap[jointId];\n        }\n\n        protected BodyJointId GetBodyJointFromSourceJoint(TSourceJointId sourceJointId)\n        {\n            return _forwardMap[sourceJointId];\n        }\n\n        protected abstract TSourceJointId GetRoot();\n        protected abstract IReadOnlyDictionary<BodyJointId, JointInfo> GetJointMapping();\n\n        public BodySkeletonMapping()\n        {\n            _tree = new SkeletonTree(GetRoot(), GetJointMapping());\n            _joints = new EnumerableHashSet<BodyJointId>(_tree.Nodes.Select(n => n.BodyJointId));\n            _forwardMap = _tree.Nodes.ToDictionary((n) => n.SourceJointId, (n) => n.BodyJointId);\n            _reverseMap = _tree.Nodes.ToDictionary((n) => n.BodyJointId, (n) => n.SourceJointId);\n            _jointToParent = _tree.Nodes.ToDictionary((n) => n.BodyJointId, (n) => n.Parent.BodyJointId);\n        }\n\n        private readonly SkeletonTree _tree;\n        private readonly IEnumerableHashSet<BodyJointId> _joints;\n        private readonly IReadOnlyDictionary<TSourceJointId, BodyJointId> _forwardMap;\n        private readonly IReadOnlyDictionary<BodyJointId, TSourceJointId> _reverseMap;\n        private readonly IReadOnlyDictionary<BodyJointId, BodyJointId> _jointToParent;\n\n        private class SkeletonTree\n        {\n            public readonly Node Root;\n            public readonly IReadOnlyList<Node> Nodes;\n\n            public SkeletonTree(TSourceJointId root,\n                IReadOnlyDictionary<BodyJointId, JointInfo> mapping)\n            {\n                Dictionary<TSourceJointId, Node> nodes = new Dictionary<TSourceJointId, Node>();\n                foreach (var map in mapping)\n                {\n                    BodyJointId jointId = map.Key;\n                    JointInfo jointInfo = map.Value;\n            Assert.IsFalse(nodes.ContainsKey(jointInfo.SourceJointId), \"Duplicate Joint ID in Mapping\");\n                    nodes[jointInfo.SourceJointId] =\n                        new Node(jointInfo.SourceJointId, jointId);\n                }\n                foreach (var jointInfo in mapping.Values)\n                {\n                    Node thisNode = nodes[jointInfo.SourceJointId];\n                    thisNode.Parent = nodes[jointInfo.ParentJointId];\n                    thisNode.Parent.Children.Add(thisNode);\n                }\n                Nodes = new List<Node>(nodes.Values);\n                Root = nodes[root];\n            }\n\n            public class Node\n            {\n                public readonly TSourceJointId SourceJointId;\n                public readonly BodyJointId BodyJointId;\n\n                public Node Parent;\n                // BUG: Container contents are never accessed\n                // MESSAGE: A collection or map whose contents are never queried or accessed is useless.\n                public List<Node> Children = new List<Node>();\n\n                // FIXED CODE:\n\npublic Node()\n            {\n\n            }\n\n            public Node(TSourceJointId sourceJointId, BodyJointId bodyJointId)\n            {\n                SourceJointId = sourceJointId;\n                BodyJointId = bodyJointId;\n            }\n\n        }\n\n    }\n\n}\n```",
    "code_repairing_2": "public class Node\n{\n    public Node(TSourceJointId sourceJointId, BodyJointId bodyJointId)\n    {\n        SourceJointId = sourceJointId;\n        BodyJointId = bodyJointId;\n        Children = new List<Node>();\n    }\n \n   public TSourceJointId SourceJointId { get; }\n \n    public BodyJointId BodyJointId { get; }\n \n    // BUG: Container contents are never accessed\n    public List<Node> Children { get; }\n}\n\n}\n\npublic class SkeletonTree\n{\n    public Node Root;\n   \n    public IReadOnlyList<Node> Nodes;\n \n    public SkeletonTree(TSourceJointId root, \n        IReadOnlyDictionary<BodyJointId, JointInfo> mapping)\n    {\n        Dictionary<TSourceJointId, Node> nodes = new Dictionary<TSourceJointId, Node>();\n        foreach (var map in mapping)\n        {\n            BodyJointId jointId = map.Key;\n            JointInfo jointInfo = map.Value;\n            Assert.IsFalse(nodes.ContainsKey(jointInfo.SourceJointId),\n                \"Duplicate Joint ID in Mapping\");\n            nodes[jointInfo.SourceJointId] = \n                new Node(jointInfo.SourceJointId, jointId);\n        }\n        foreach (var jointInfo in mapping.Values)\n        {\n            Node thisNode = nodes[jointInfo.SourceJointId];\n            thisNode.Parent = nodes[jointInfo.ParentJointId];\n            thisNode.Parent.Children.Add(thisNode);\n        }\n        Nodes = new List<Node>(nodes.Values);\n        Root = nodes[root];\n    }\n \n    public class Node\n    {\n        public Node(TSourceJointId sourceJointId, BodyJointId bodyJointId)\n        {\n            SourceJointId = sourceJointId;\n            BodyJointId = bodyJointId;\n            Children = new List<Node>();\n        }\n \n        public TSourceJointId SourceJointId { get; }\n \n        public BodyJointId BodyJointId { get; }\n \n        public Node Parent;\n \n        // BUG: Container contents are never accessed\n        // MESSAGE: A collection or map whose contents are never queried or accessed is useless.\n        public List<Node> Children { get; }\n    }\n}\n\n}\n\n}\n\n}\n}",
    "code_repairing_3": "private class SkeletonTree\n{\n    public readonly Node Root;\n    public readonly IReadOnlyList<Node> Nodes;\n\n    public SkeletonTree(TSourceJointId root,\n        IReadOnlyDictionary<BodyJointId, JointInfo> mapping)\n    {\n        Dictionary<TSourceJointId, Node> nodes = new Dictionary<TSourceJointId, Node>();\n        foreach (var map in mapping)\n        {\n            BodyJointId jointId = map.Key;\n            JointInfo jointInfo = map.Value;\n            Assert.IsFalse(nodes.ContainsKey(jointInfo.SourceJointId),\n                \"Duplicate Joint ID in Mapping\");\n            nodes[jointInfo.SourceJointId] =\n                new Node(jointInfo.SourceJointId, jointId);\n        }\n        foreach (var jointInfo in mapping.Values)\n        {\n            Node thisNode = nodes[jointInfo.SourceJointId];\n            thisNode.Parent = nodes[jointInfo.ParentJointId];\n            thisNode.Parent.Children.Add(thisNode);\n        }\n        Nodes = new List<Node>(nodes.Values);\n        Root = nodes[root];\n    }\n\n    public class Node\n    {\n        public readonly TSourceJointId SourceJointId;\n        public readonly BodyJointId BodyJointId;\n\n        public Node Parent;\n        // FIXED CODE:\n        public List<Node> Children = new List<Node>();\n    }\n}",
    "code_repairing_4": "private class SkeletonTree\n{\npublic readonly Node Root;\npublic readonly IReadOnlyList<Node> Nodes;\n\npublic SkeletonTree(TSourceJointId root,\n    IReadOnlyDictionary<BodyJointId, JointInfo> mapping)\n{\nDictionary<TSourceJointId, Node> nodes = new Dictionary<TSourceJointId, Node>();\nforeach (var map in mapping)\n{\nBodyJointId jointId = map.Key;\nJointInfo jointInfo = map.Value;\nAssert.IsFalse(nodes.ContainsKey(jointInfo.SourceJointId),\n    \"Duplicate Joint ID in Mapping\");\nnodes[jointInfo.SourceJointId] =\n    new Node(jointInfo.SourceJointId, jointId);\n}\nforeach (var jointInfo in mapping.Values)\n{\nNode thisNode = nodes[jointInfo.SourceJointId];\nthisNode.Parent = nodes[jointInfo.ParentJointId];\nthisNode.Parent.Children.Add(thisNode);\n}\nNodes = new List<Node>(nodes.Values);\nRoot = nodes[root];\n}\n\npublic class Node\n{\npublic readonly TSourceJointId SourceJointId;\npublic readonly BodyJointId BodyJointId;\n\npublic Node Parent;\n// FIXED CODE:\n\npublic IReadOnlyList<Node> Children { get; } = new List<Node>();\n\npublic Node(TSourceJointId sourceJointId,\n    BodyJointId bodyJointId)\n{\nSourceJointId = sourceJointId;\nBodyJointId = bodyJointId;\n}\n}\n}\n}\n}"
}