using UnityEngine.XR.Interaction.Toolkit;
using System.Collections.Generic;
using UnityEngine.Serialization;
using UnityEngine;
using System.Linq;
using System;

public class BrickAttachDetector : MonoBehaviour
{
    [FormerlySerializedAs("_isBeingHeld")] public bool isBeingHeld = false;
    [FormerlySerializedAs("_isAttached")] public bool isAttached = false;

    public GameObject maleConnectorParent;
    public GameObject femaleConnectorParent;

    public List<GameObject> _maleConnectors;
    public List<GameObject> _femaleConnectors;

    public GameObject model;

    private Vector3 _collisionExtents;
    private Vector3 _colliderOffset;

    private Transform _transform;

    private HapticsManager _hapticsManager;

    private XRGrabInteractable _xrGrabInteractable;
    private OwnedPhysicsBricksStore _ownedPhysicsBricksStore;

    public bool skipGrabCallbacks;

    public bool tile;
    public bool window;

    public BoxCollider[] colliders;
    private bool _usingBuiltInColliders;

    public float heightOverride;

    private void Awake()
    {
        
        
        BoxCollider boxCollider = GetComponent<BoxCollider>();
        _collisionExtents = Vector3.Scale(boxCollider.size / 2, transform.lossyScale); 
        _xrGrabInteractable = GetComponent<XRGrabInteractable>();
        _ownedPhysicsBricksStore = OwnedPhysicsBricksStore.GetInstance();
        _colliderOffset = boxCollider.center;
        foreach(BoxCollider c in colliders)
            if (c.gameObject == gameObject)
                _usingBuiltInColliders = true;
    }

    private void Start()
    {
        _transform = transform;
        _hapticsManager = HapticsManager.GetInstance();
    }

    private void OnEnable()
    {
        GetComponent<XRBaseInteractable>().onSelectEnter.AddListener(BrickGrabbed);
        GetComponent<XRBaseInteractable>().onSelectExit.AddListener(BrickReleased);
    }

    private void OnDisable()
    {
        GetComponent<XRBaseInteractable>()?.onSelectEnter.RemoveListener(BrickGrabbed);
        GetComponent<XRBaseInteractable>().onSelectExit.RemoveListener(BrickReleased);
    }

    private void BrickGrabbed(XRBaseInteractor interactor)
    {
        if (skipGrabCallbacks) return;
            
        foreach (Collider c in colliders)
        {
            c.isTrigger = true;
        }

        GetComponent<Rigidbody>().isKinematic = false;

        isBeingHeld = true;
        isAttached = false;

        GetComponent<ShowSnappableBrickPositions>().enabled = true;
        _ownedPhysicsBricksStore.AddBrick(gameObject);
    }

    private void BrickReleased(XRBaseInteractor interactor)
    {
        if (skipGrabCallbacks) return;
        if (!isBeingHeld) return;

        isBeingHeld = false;

        (bool canConnect, Vector3 newPos, Quaternion newRot, Vector3 connectionDirection) = CheckIfCanConnect();
        if (canConnect) {
            try {
                if (GetComponent<BrickAttach>().ConnectBricks(newPos, newRot, connectionDirection)) {
                    bool leftHand = interactor.transform.parent.gameObject.name == "LeftHand";
                    _hapticsManager.PlayHaptics(0.5f, 0.5f, 0.1f, !leftHand, leftHand);
                }
            } catch (Exception e) {
                Debug.Log("SOMETHING EXPLODED!");
                Debug.Log(e.Message);
                Debug.Log(e.StackTrace);


                Session session = SessionManager.GetInstance().session;
                Debug.Log(session.CanPlace);
                Debug.Log(session.GetSessionType());

                EnableGravityIfUnowned();
            }
        } else {
            
            EnableGravityIfUnowned();
        }

        XRGrabInteractable ourInteractable = GetComponent<XRGrabInteractable>();

        GetComponent<XRGrabInteractable>().interactionManager.ForceHoverExit(interactor, ourInteractable);

        foreach (Collider c in colliders) {
            c.enabled = true;
            c.isTrigger = false;
        }

        GetComponent<ShowSnappableBrickPositions>().ResetAndDisable();
    }

    private void EnableGravityIfUnowned()
    {
        Wait.ForFrames(2, () =>
        {
            if (!this) return;
            if (_xrGrabInteractable.isSelected) return;

            Rigidbody rb = GetComponent<Rigidbody>();
            rb.isKinematic = false;
            rb.useGravity = true;
        });
    }

    private readonly (bool, Vector3, Quaternion, Vector3) _nullResponse = (false, Vector3.zero, Quaternion.identity, Vector3.zero);
    
    public (bool canConnect, Vector3 pos, Quaternion rot, Vector3 connectionDirection) CheckIfCanConnect()
    {
        if (!SessionManager.GetInstance().session.CanPlace)
            return _nullResponse;

        GameObject[] femaleConnectorsWithConnections = GetFemaleConnectorsWithConnections();
        GameObject[] maleConnectorsWithConnections = GetMaleConnectorsWithConnections();

        GameObject[] validFemaleConnectors = ValidConnections(femaleConnectorsWithConnections);
        GameObject[] validMaleConnectors = ValidConnections(maleConnectorsWithConnections);

        GameObject[] connectorsToUse = validFemaleConnectors.Length > validMaleConnectors.Length
            ? validFemaleConnectors
            : validMaleConnectors;

        bool connectingDownwards = connectorsToUse == validFemaleConnectors;

        if (connectorsToUse.Length > 0)
        {
            Transform otherBrickTransform = ClosestConnectorFromConnector(connectorsToUse[0]).transform.parent.transform.parent;
            GameObject otherBrick = otherBrickTransform.gameObject; 
            Vector3 otherBrickOriginalRot = otherBrick.transform.rotation.eulerAngles;

            if (!IsVectorApproximatelyOne(otherBrickTransform.lossyScale))
            {
                
                return _nullResponse;
            }

            
            

            Vector3 brickCurrentPos = _transform.position;
            Quaternion brickCurrentRot = _transform.rotation;

            _transform.parent = otherBrick.transform;
            Vector3 oldEulerAngles = otherBrick.transform.rotation.eulerAngles;

            GameObject otherBrickConnector = ClosestConnectorFromConnector(connectorsToUse[0]);
            Transform otherConnectorTransform = otherBrickConnector.transform;

            otherBrick.transform.eulerAngles += new Vector3(-oldEulerAngles.x - otherConnectorTransform.localEulerAngles.x, 0, -oldEulerAngles.z - otherConnectorTransform.localEulerAngles.z);

            Quaternion rot = GetNewRot(otherBrickConnector);
            Vector3 pos = GetNewPosWithRot(rot, otherBrick, connectorsToUse, connectingDownwards);

            _transform.position = pos;
            _transform.rotation = rot;

            otherBrick.transform.eulerAngles = otherBrickOriginalRot;

            Quaternion adjustedRot = _transform.rotation;
            Vector3 adjustedPos = _transform.position;

            bool collidesWithBricks = CollidesWithBricks(adjustedRot, adjustedPos);

            _transform.position = brickCurrentPos;
            _transform.rotation = brickCurrentRot;

            _transform.parent = null;

            if (collidesWithBricks)
            {
                return _nullResponse;
            }

            
            adjustedRot *= Quaternion.Euler(0, 180f, 0);

            return (true, adjustedPos, adjustedRot, connectingDownwards ? Vector3.down : Vector3.up);
        }

        return _nullResponse;
    }

    private void OnDrawGizmos()
    {
        foreach (BoxCollider c in colliders)
        {
            Gizmos.DrawWireCube(_transform.position - (_transform.position - _transform.TransformPoint(c.center)),
                Vector3.Scale(c.size, c.transform.lossyScale));
        }
    }


    /* BUG: Container contents are never accessed
    * MESSAGE: A collection or map whose contents are never queried or accessed is useless.
    *     private List<GameObject> testObjects = new List<GameObject>();

    * Remove or Commented-out the collection if it is no longer needed
    * FIXED CODE:
    */
