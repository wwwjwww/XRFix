{
    "code_repairing_0": "Fixed Code:\n\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            var scenes = UnityEngine.SceneManagement.SceneManager.sceneCountInBuildSettings;\n            for (int i = 0; i < scenes; i++)\n            {\n                var loadedScene = UnityEngine.SceneManagement.SceneManager.GetSceneAt(i);\n                if (loadedScene.name == sceneName)\n                {\n                    scene = loadedScene;\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n\n            scene = default;\n            sceneIndex = -1;\n            return false;\n        }\n    }\n}",
    "code_repairing_1": "Here's the fixed code:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool TryGetSceneIndex(string sceneName, out int sceneIndex)\n        {\n            sceneIndex = -1;\n            for (int i = 0; i < SceneManager.sceneCount; i++)\n            {\n                if (SceneManager.GetSceneAt(i).name == sceneName)\n                {\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene)\n        {\n            int sceneIndex;\n            return TryGetSceneIndex(sceneName, out sceneIndex) && (scene",
    "code_repairing_2": "Here is the fixed code:\n```csharp\n\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            scene = default(Scene);\n            sceneIndex = -1;\n\n            int sceneCount = SceneManager.sceneCount;\n            for (int i = 0; i < sceneCount; ++i)\n            {\n                Scene curScene = SceneManager.GetSceneAt(i);\n                if (curScene.name == sceneName)\n                {\n                    scene = curScene;\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n\n```",
    "code_repairing_3": "```csharp\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool TryGetSceneIndex(string sceneName, out int sceneIndex)\n        {\n            sceneIndex = Array.FindIndex(SceneManager.sceneNames, s => s == sceneName);\n            return sceneIndex!= -1;\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene)\n        {\n            int sceneIndex;\n            return TryGetSceneIndex(sceneName, out sceneIndex) && TryGetSceneByIndex(sceneIndex, out scene);\n        }\n\n        public static bool TryGetSceneByIndex(int sceneIndex, out Scene scene)\n        {\n            scene = SceneManager.GetSceneAt(scene",
    "code_repairing_4": "Fixed code:\n\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Microsoft.MixedReality.Toolkit.Utilities\n{\n    public static class RuntimeSceneUtils\n    {\n        public static string GetSceneNameFromScenePath(string scenePath)\n        {\n            return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n        }\n\n        public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex)\n        {\n            List<Scene> loadedScenes = SceneManager.sceneCountInBuildSettings > 0? new List<Scene>(SceneManager.loadedScenes) : new List<Scene>(SceneManager.scenes);\n            for (int i = 0; i < loadedScenes.Count; i++)\n            {\n                if (loadedScenes[i].name == sceneName)\n                {\n                    scene = loadedScenes[i];\n                    sceneIndex = i;\n                    return true;\n                }\n            }\n\n            scene = default(Scene"
}