{
    "code_repairing_0": "```\nusing Microsoft.MixedReality.Toolkit.Input;\nusing Microsoft.MixedReality.Toolkit.Utilities;\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\nusing UnityEngine;\nusing UnityEngine.Events;\nusing UnityEngine.Serialization;\nusing UnityPhysics = UnityEngine.Physics;\n\nnamespace Microsoft.MixedReality.Toolkit.UI\n{\n    \n    \n    \n    \n    \n    \n    [HelpURL(\"https://microsoft.github.io/MixedRealityToolkit-Unity/README.html\")]\n    public class BoundingBox : MonoBehaviour,\n        IMixedRealitySourceStateHandler,\n        IMixedRealityFocusChangedHandler,\n        IMixedRealityFocusHandler\n    {\n        #region Enums\n\n        \n        \n        \n        public enum FlattenModeType\n        {\n            DoNotFlatten = 0,\n            \n            \n            \n            FlattenX,\n            \n            \n            \n            FlattenY,\n            \n            \n            \n            FlattenZ,\n            \n            \n            \n            FlattenAuto,\n        }\n\n        \n        \n        \n        \n        public enum HandleType\n        {\n            None = 0,\n            Rotation,\n            Scale\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        \n        public enum WireframeType\n        {\n            Cubic = 0,\n            Cylindrical\n        }\n\n        \n        \n        \n        private enum CardinalAxisType\n        {\n            X = 0,\n            Y,\n            Z\n        }\n\n        \n        \n        \n        \n        public enum BoundsCalculationMethod\n        {\n            \n            \n            \n            RendererOverCollider = 0,\n            \n            \n            \n            ColliderOverRenderer,\n            \n            \n            \n            ColliderOnly,\n            \n            \n            \n            RendererOnly,\n        }\n\n        \n        \n        \n        public enum BoundingBoxActivationType\n        {\n            ActivateOnStart = 0,\n            ActivateByProximity,\n            ActivateByPointer,\n            ActivateByProximityAndPointer,\n            ActivateManually\n        }\n\n        \n        \n        \n        private enum HandleProximityState\n        {\n            FullsizeNoProximity = 0,\n            MediumProximity,\n            CloseProximity\n        }\n\n        \n        \n        \n        public enum RotationHandlePrefabCollider\n        {\n            Sphere,\n            Box\n        }\n\n        \n        \n        \n        private class Handle\n        {\n            public Transform HandleVisual;\n            public Renderer HandleVisualRenderer;\n            public HandleType Type = HandleType.None;\n            public HandleProximityState ProximityState = HandleProximityState.FullsizeNoProximity;\n        }\n\n        #endregion Enums\n\n        #region Serialized Fields and Properties\n        [SerializeField]\n        [Tooltip(\"The object that the bounding box rig will be modifying.\")]\n        private GameObject targetObject;\n        \n        \n        \n        public GameObject Target\n        {\n            get\n            {\n                if (targetObject == null)\n                {\n                    targetObject = gameObject;\n                }\n\n                return targetObject;\n            }\n        }\n\n        [Tooltip(\"For complex objects, automatic bounds calculation may not behave as expected. Use an existing Box Collider (even on a child object) to manually determine bounds of Bounding Box.\")]\n        [SerializeField]\n        [FormerlySerializedAs(\"BoxColliderToUse\")]\n        private BoxCollider boundsOverride = null;\n\n        \n        \n        \n        public BoxCollider BoundsOverride\n        {\n            get { return boundsOverride; }\n            set\n            {\n                if (boundsOverride != value)\n                {\n                    boundsOverride = value;\n\n                    if (boundsOverride == null)\n                    {\n                        prevBoundsOverride = new Bounds();\n                    }\n                    CreateRig();\n                }\n            }\n        }\n\n        [SerializeField]\n        [Tooltip(\"Defines the volume type and the priority for the bounds calculation\")]\n        private BoundsCalculationMethod boundsCalculationMethod = BoundsCalculationMethod.RendererOverCollider;\n\n        \n        \n        \n        public BoundsCalculationMethod CalculationMethod\n        {\n            get { return boundsCalculationMethod; }\n            set\n            {\n                if (boundsCalculationMethod != value)\n                {\n                    boundsCalculationMethod = value;\n                    CreateRig();\n                }\n            }\n        }\n\n        [Header(\"Behavior\")]\n        [SerializeField]\n        [Tooltip(\"Type of activation method for showing/hiding bounding box handles and controls\")]\n        private BoundingBoxActivationType activation = BoundingBoxActivationType.ActivateOnStart;\n\n        \n        \n        \n        public BoundingBoxActivationType BoundingBoxActivation\n        {\n            get { return activation; }\n            set\n            {\n                if (activation != value)\n                {\n                    activation = value;\n                    ResetHandleVisibility();\n                }\n            }\n        }\n\n        [SerializeField]\n        [Obsolete(\"Use a TransformScaleHandler script rather than setting minimum on BoundingBox directly\", false)]\n        [Tooltip(\"Minimum scaling allowed relative to the initial size\")]\n        private float scaleMinimum = 0.2f;\n\n        [SerializeField]\n        [Obsolete(\"Use a TransformScaleHandler script rather than setting maximum on BoundingBox directly\")]\n        [Tooltip(\"Maximum scaling allowed relative to the initial size\")]\n        private float scaleMaximum = 2.0f;\n\n\n        \n        \n        \n        \n        \n        [Obsolete(\"Use a TransformScaleHandler.ScaleMinimum as it is the authoritative value for min scale\")]\n        public float ScaleMinimum\n        {\n            get\n            {\n                if (scaleHandler != null)\n                {\n                    return scaleHandler.ScaleMinimum;\n                }\n                return 0.0f;\n            }\n        }\n\n        \n        \n        \n        \n        \n        [Obsolete(\"Use a TransformScaleHandler.ScaleMinimum as it is the authoritative value for max scale\")]\n        public float ScaleMaximum\n        {\n            get\n            {\n                if (scaleHandler != null)\n                {\n                    return scaleHandler.ScaleMaximum;\n                }\n                return 0.0f;\n            }\n        }\n\n        [Header(\"Box Display\")]\n        [SerializeField]\n        [Tooltip(\"Flatten bounds in the specified axis or flatten the smallest one if 'auto' is selected\")]\n        private FlattenModeType flattenAxis = FlattenModeType.DoNotFlatten;\n\n        \n        \n        \n        public FlattenModeType FlattenAxis\n        {\n            get { return flattenAxis; }\n            set\n            {\n                if (flattenAxis != value)\n                {\n                    flattenAxis = value;\n                    CreateRig();\n                }\n            }\n        }\n\n        [SerializeField]\n        [Tooltip(\"When an axis is flattened what value to set that axis's scale to for display.\")]\n        private float flattenAxisDisplayScale = 0.0f;\n\n        \n        \n        \n        public float FlattenAxisDisplayScale\n        {\n            get { return flattenAxisDisplayScale; }\n            set\n            {\n                if (flattenAxisDisplayScale != value)\n                {\n                    flattenAxisDisplayScale = value;\n                    CreateRig();\n                }\n            }\n        }\n\n        [SerializeField]\n        [FormerlySerializedAs(\"wireframePadding\")]\n        [Tooltip(\"Extra padding added to the actual Target bounds\")]\n        private Vector3 boxPadding = Vector3.zero;\n\n        \n        \n        \n        public Vector3 BoxPadding\n        {\n            get { return boxPadding; }\n            set\n            {\n                if (Vector3.Distance(boxPadding, value) > float.Epsilon)\n                {\n                    boxPadding = value;\n                    CreateRig();\n                }\n            }\n        }\n\n        [SerializeField]\n        [Tooltip(\"Material used to display the bounding box. If set to null no bounding box will be displayed\")]\n        private Material boxMaterial = null;\n\n        \n        \n        \n        public Material BoxMaterial\n        {\n            get { return boxMaterial; }\n            set\n            {\n                if (boxMaterial != value)",
    "code_repairing_1": "private bool wireframeOnly = false;\n\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\u200b\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    \n        #endregion\n\n        #region Inverted Constructor\n        public BoundingBox() : base()\n        {\n            hideFlags &= ~(HideFlags.HideInHierarchy | HideFlags.HideInInspector);\n        }\n\n        private void OnEnable()\n        {\n            CreateRig();\n        }\n\n        private void OnDisable()\n        {\n            if (rigRoot != null)\n            {\n                MixedRealityToolkit.DisableInputSystem();\n                if (currentPointer != null)\n                {\n                    currentPointer.DetachPointerData(this, null);\n                }\n            }\n        }\n\n        private void OnDestroy()\n        {\n            DestroyRig();\n        }\n\n        private void Start()\n        {\n            if (activation == BoundingBoxActivationType.ActivateOnStart)\n            {\n                Activate();\n            }\n        }\n\n        private void CreateRig()\n        {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\u200b\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff]]}}\n\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff]]]## FIXED CODE IS BELOW THIS LINE ###]]]\n\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff]]]]]## REPLACED THIS LINE ###]]]]]\n\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff]]]]]]## REMOVED THIS LINE ###]]]]]}}}}}\n\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\u200b\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\u200b\n\ufeff\u200b\n\ufeff\u200b\n\n\n\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff[ERROR]\nBoundingBox.cs(0,",
    "code_repairing_2": "```\n\ufeffusing Microsoft.MixedReality.Toolkit.Input;\n[Obsolete(\"Use a TransformScaleHandler script rather than setting minimum on BoundingBox directly\", false)]\npublic float ScaleMinimum\n{\nget\n{\nif (scaleHandler != null)\n{\nreturn scaleHandler.ScaleMinimum;\n}\nreturn 0.0f;\n}\n}\n```\n\nThe code you provided is still using the `[Obsolete]` attribute to flag the `ScaleMinimum` property as deprecated. It is recommended to use the `[EditorBrowsable]` attribute instead to indicate that the property should be hidden in the Unity inspector, but it should still work in code.\n\nHere's the fixed code snippet with the `[EditorBrowsable]` attribute:\n\n```\n\ufeffusing Microsoft.MixedReality.Toolkit.Input;\n[EditorBrowsable(EditorBrowsableState.Never)]\npublic float ScaleMinimum\n{\nget\n{\nif (scaleHandler != null)\n{\nreturn scaleHandler.ScaleMinimum;\n}\nreturn 0.0f;\n}\n}\n```\n\nIt's always a good practice to use the latest versions of the Unity and Mixed Reality Toolkit libraries for your project. The version you're using is not the latest and may not have the best support for new features and bug fixes.\n\nFinally, it's worth noting that the `BoundsOverride` property should be used with caution, as it can have unintended effects in complex scenarios. For example, if you try to use a bounding box to detect collisions within a scene, and you set the `BoundsOverride` property based on a specific game object, you may get unexpected results if that game object is moved or scaled in the scene.\n\nIt's generally better to use the `CalculationMethod` property to ensure that the bounding box is calculated correctly based on your needs, rather than relying on the `BoundsOverride` property.\n\nI hope this helps! Let me know if you have any other questions.",
    "code_repairing_3": "private readonly List<IMixedRealityInputSource> touchingSources = new List<IMixedRealityInputSource>();\n\n        private GameObject handleRoot;\n        private List<Handle> handles;\n        private GameObject[] corners;\n        private List<GameObject> links;\n        private BoundsDisplay boundsDisplay;\n        private BoxDisplayMode boxDisplayMode = BoxDisplayMode.Both;\n        private Material defaultMat;\n        private bool hasStarted = false;\n        private RigDefinition rigDefinition;\n        private bool enabled = false;\n        #endregion\n\n        #region Public Properties\n        /// <summary>\n        /// The object that the bounding box will be modifying.\n        /// </summary>\n        public GameObject Target\n        {\n            get\n            {\n                if (targetObject == null)\n                {\n                    targetObject = gameObject;\n                }\n\n                return targetObject;\n            }\n        }\n\n        /// <summary>\n        /// For complex objects, automatic bounds calculation may not behave as expected.\n        /// Use an existing Box Collider (even on a child object)\n        /// to manually determine bounds of Bounding Box.\n        /// </summary>\n        public BoxCollider BoundsOverride\n        {\n            get => boundsOverride;\n            set\n            {\n                if (boundsOverride != value)\n                {\n                    boundsOverride = value;\n\n                    if (boundsOverride != null)\n                    {\n                        prevBoundsOverride = new Bounds();\n                    }\n\n                    CreateRig();\n                }\n            }\n        }\n\n        /// <summary>\n        /// The current bounds of the target object, in its hierarchy.\n        /// </summary>\n        private Bounds CurrentBounds\n        {\n            get\n            {\n                if (currentBoundsExtents == Vector3.zero)\n                {\n                    CalculateBounds();\n                }\n\n                return new Bounds(boundsCenter(), currentBoundsExtents);\n            }\n        }\n\n        /// <summary>\n        /// The current bounds of the target object, in world space.\n        /// Use this if you need to apply it to a renderer or physics collider.\n        /// </summary>\n        public Bounds WorldBounds\n        {\n            get\n            {\n                if (rigRoot == null)\n                {\n                    throw new Exception(\"BoundingBox rig invalid state\");\n                }\n\n                if (usePrevBoundsOverride)\n                {\n                    return prevBoundsOverride;\n                }\n\n                if (usePrevBounds)\n                {\n                    return prevBounds;\n                }\n\n                CalculateBounds();\n                return new Bounds(rigRoot.position, currentBoundsExtents);\n            }\n        }\n\n        /// <summary>\n        /// Returns the current bounds of the target object, in world space.\n        /// If the object has a BoxCollider, the bounds are obtained from that instead.\n        /// </summary>\n        public Bounds WorldCalculatedBounds\n        {\n            get\n            {\n                if (rigRoot == null)\n                {\n                    throw new Exception(\"BoundingBox rig invalid state\");\n                }\n\n                if (usePrevBoundsOverride)\n                {\n                    return prevBoundsOverride;\n                }\n\n                if (usePrevBounds)\n                {\n                    return prevBounds;\n                }\n\n                return new Bounds(rigRoot.position, currentBoundsExtents);\n            }\n        }\n\n        /// <summary>\n        /// Returns the center of the current bounds of the target object.\n        /// </summary>\n        public Vector3 boundsCenter()\n        {\n            return rigRoot.InverseTransformPoint(WorldBounds.center);\n        }\n\n        /// <summary>\n        /// Returns the size of the current bounds of the target object.\n        /// Useful for comparing to other <see cref=\"Bounds\"/>.\n        /// </summary>\n        public Vector3 boundsSize()\n        {\n            return WorldBounds.size;\n        }\n\n        /// <summary>\n        /// Returns the distance from the center of the bounds to each corner of the bounds.\n        /// </summary>\n        public Vector3[] cornerPoints()\n        {\n            if (boundsCorners == null)\n            {\n                throw new Exception($\"cornerPoints is invalid state\");\n            }\n\n            return boundsCorners;\n        }\n\n        /// <summary>\n        /// Returns the angle between each corner of the bounds and its neighboring corner.\n        /// For example, 0, 90, 180, and 270 degrees.\n        /// </summary>\n        public Vector3[] cornerAngles()\n        {\n            Vector3[] cornerAnglesArr = (Vector3[])cornerPoints().Clone();\n            int last = cornerAnglesArr.Length - 1;\n            for (int i = 0; i < last; i++)\n            {\n                cornerAnglesArr[i] = Vector3.Angle(cornerAnglesArr[i] - cornerAnglesArr[i].normalized, cornerAnglesArr[i + 1] - cornerAnglesArr[i + 1].normalized);\n            }\n            cornerAnglesArr[last] = Vector3.Angle(cornerAnglesArr[last] - cornerAnglesArr[last].normalized, cornerAnglesArr[0] - cornerAnglesArr[0].normalized);\n\n            return cornerAnglesArr;\n        }\n\n        /// <summary>\n        /// The currently active input source, used to check for proximity.\n        /// </summary>\n        public IMixedRealityInputSource CurrentInputSource\n        {\n            get\n            {\n                if (currentPointer == null)\n                {\n                    return null;\n                }\n                return currentPointer.InputSourceParent;\n            }\n        }\n\n        /// <summary>\n        /// Check if a given input source is currently touching a bounding box handle.\n        /// </summary>\n        /// <param name=\"inputSource\">The Input Source to check</param>\n        /// <returns>True if the given Input Source is touching a bounding box handle</returns>\n        public bool IsTouchingInputSource(IMixedRealityInputSource inputSource)\n        {\n            return touchingSources.Exists(source => source.InstanceId == inputSource.InstanceId);\n        }\n\n        /// <summary>\n        /// Checks if a given hand is currently touching a bounding box handle.\n        /// </summary>\n        /// <param name=\"handedness\">The Handedness to check</param>\n        /// <returns>True if the given Hand is touching a bounding box handle</returns>\n        public bool IsTouchingHand(Handedness handedness)\n        {\n            return touchingSources.Exists(source => source.SourceId == handedness);\n        }\n\n        /// <summary>\n        /// Get the nearest collider hit by a given GameObject.\n        /// Returns null if no collider found.\n        /// </summary>\n        /// <param name=\"go\">The GameObject to check</param>\n        /// <returns>The nearest collider hit by the GameObject, or null if one could not be found.</returns>\n        public Collider GetNearestCollider(GameObject go)\n        {\n            if (go == null)\n            {\n                throw new Exception(\"GetNearestCollider: null GameObject\");\n            }\n\n            Collider[] colliders = go.GetComponents<Collider>();\n            Collider nearest = null;\n            float nearestDistance = float.MaxValue;\n            foreach (var collider in colliders)\n            {\n                if (collider == null)\n                {\n                    continue;\n                }\n\n                var hit = Physics.Raycast(go.transform.position, go.transform.forward, out var hitInfo);\n                if (hit)\n                {\n                    float dist = (hitInfo.point - go.transform.position).magnitude;\n                    if (dist < nearestDistance)\n                    {\n                        nearestDistance = dist;\n                        nearest = collider;\n                    }\n                }\n            }\n\n            return nearest;\n        }\n\n        /// <summary>\n        /// Returns the bounds of a collision volume for a given object, which would contain the object's colliders.\n        /// </summary>\n        public Bounds GetVolumeBounds(GameObject obj)\n        {\n            if (obj == null)\n            {\n                throw new Exception(\"GetVolumeBounds: null GameObject\");\n            }\n\n            Bounds bounds = new Bounds();\n            Collider collider = GetNearestCollider(obj);\n            if (collider == null)\n            {\n                return bounds;\n            }\n\n            Vector3 center = collider.bounds.center;\n            Vector3 size = collider.bounds.size;",
    "code_repairing_4": "\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\u200b\ufeffFix\n\n[Serializable]\ninternal enum BoundingBoxActivationType\n{\n    None = 0,\n    ActivateOnStart,\n    ActivateByPointer,\n    ActivateByProximity,\n    ActivateByProximityAndPointer,\n    ActivateManually\n}\n\n[Serializable]\ninternal enum BoundsCalculationMethod\n{\n    ColliderOverRenderer = 0,\n    RendererOverCollider\n}\n\n[Serializable]\ninternal enum FlattenModeType\n{\n    DoNotFlatten = 0,\n    FlattenX,\n    FlattenY,\n    FlattenZ,\n    FlattenAuto\n}\n\n[Serializable]\ninternal enum HandleType\n{\n    None = 0,\n    Rotation,\n    Scale\n}"
}