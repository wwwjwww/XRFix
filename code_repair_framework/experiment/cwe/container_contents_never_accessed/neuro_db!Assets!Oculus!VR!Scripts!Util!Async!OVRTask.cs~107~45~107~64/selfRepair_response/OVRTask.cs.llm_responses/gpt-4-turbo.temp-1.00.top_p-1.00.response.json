"{\"id\":\"chatcmpl-BqmUXGgCHMRgavc2UkGoG2X3krWrz\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n/*\\n    private static readonly HashSet<Action> InternalDataClearers = new HashSet<Action>();\\n*/\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n/*\\n * Copyright (c) Meta Platforms, Inc. and affiliates.\\n * All rights reserved.\\n *\\n * Licensed under the Oculus SDK License Agreement (the \\\"License\\\");\\n * you may not use the Oculus SDK except in compliance with the License,\\n * which is provided at the time of installation or download, or which\\n * otherwise accompanies this software in either electronic or hard copy form.\\n *\\n * You may obtain a copy of the License at\\n *\\n * https:\\n *\\n * Unless required by applicable law or agreed to in writing, the Oculus SDK\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Runtime.CompilerServices;\\n\\ninternal static class OVRTask\\n{\\n    internal static OVRTask<TResult> FromGuid<TResult>(Guid id) => Create<TResult>(id);\\n    internal static OVRTask<TResult> FromRequest<TResult>(ulong id) => Create<TResult>(GetId(id));\\n\\n    internal static OVRTask<TResult> FromResult<TResult>(TResult result)\\n    {\\n        var task = Create<TResult>(Guid.NewGuid());\\n        task.SetResult(result);\\n        return task;\\n    }\\n\\n    internal static OVRTask<TResult> GetExisting<TResult>(Guid id) => Get<TResult>(id);\\n    internal static OVRTask<TResult> GetExisting<TResult>(ulong id) => Get<TResult>(GetId(id));\\n\\n    internal static void SetResult<TResult>(Guid id, TResult result) =>\\n        GetExisting<TResult>(id).SetResult(result);\\n\\n    internal static void SetResult<TResult>(ulong id, TResult result) =>\\n        GetExisting<TResult>(id).SetResult(result);\\n\\n    private static OVRTask<TResult> Get<TResult>(Guid id)\\n    {\\n        return new OVRTask<TResult>(id);\\n    }\\n\\n    private static OVRTask<TResult> Create<TResult>(Guid id)\\n    {\\n        var task = Get<TResult>(id);\\n        task.AddToPending();\\n        return task;\\n    }\\n\\n    internal static unsafe Guid GetId(ulong value)\\n    {\\n        const ulong hashModifier1 = 0x319642b2d24d8ec3;\\n        const ulong hashModifier2 = 0x96de1b173f119089;\\n        var guid = default(Guid);\\n        *(ulong*)&guid = unchecked(value + hashModifier1);\\n        *((ulong*)&guid + 1) = hashModifier2;\\n        return guid;\\n    }\\n}\\n\\npublic readonly struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable\\n{\\n    #region static\\n\\n    private static readonly HashSet<Guid> Pending = new HashSet<Guid>();\\n    private static readonly Dictionary<Guid, TResult> Results = new Dictionary<Guid, TResult>();\\n    private static readonly Dictionary<Guid, Action> Continuations = new Dictionary<Guid, Action>();\\n\\n    private delegate void CallbackInvoker(Guid guid, TResult result);\\n\\n    private delegate bool CallbackRemover(Guid guid);\\n\\n    private static readonly Dictionary<Guid, CallbackInvoker>\\n        CallbackInvokers = new Dictionary<Guid, CallbackInvoker>();\\n\\n    private static readonly Dictionary<Guid, CallbackRemover>\\n        CallbackRemovers = new Dictionary<Guid, CallbackRemover>();\\n\\n    private static readonly HashSet<Action> CallbackClearers = new HashSet<Action>();\\n\\n    private delegate bool InternalDataRemover(Guid guid);\\n\\n    private static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers =\\n        new Dictionary<Guid, InternalDataRemover>();\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n/*\\n * Copyright (c) Meta Platforms, Inc. and affiliates.\\n * All rights reserved.\\n *\\n * Licensed under the Oculus SDK License Agreement (the \\\"License\\\");\\n * you may not use the Oculus SDK except in compliance with the License,\\n * which is provided at the time of installation or download, or which\\n * otherwise accompanies this software in either electronic or hard copy form.\\n *\\n * You may obtain a copy of the License at\\n *\\n * https:\\n *\\n * Unless required by applicable law or agreed to in writing, the Oculus SDK\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Runtime.CompilerServices;\\n\\ninternal static class OVRTask\\n{\\n    internal static OVRTask<TResult> FromGuid<TResult>(Guid id) => Create<TResult>(id);\\n    internal static OVRTask<TResult> FromRequest<TResult>(ulong id) => Create<TResult>(GetId(id));\\n\\n    internal static OVRTask<TResult> FromResult<TResult>(TResult result)\\n    {\\n        var task = Create<TResult>(Guid.NewGuid());\\n        task.SetResult(result);\\n        return task;\\n    }\\n\\n    internal static OVRTask<TResult> GetExisting<TResult>(Guid id) => Get<TResult>(id);\\n    internal static OVRTask<TResult> GetExisting<TResult>(ulong id) => Get<TResult>(GetId(id));\\n\\n    internal static void SetResult<TResult>(Guid id, TResult result) =>\\n        GetExisting<TResult>(id).SetResult(result);\\n\\n    internal static void SetResult<TResult>(ulong id, TResult result) =>\\n        GetExisting<TResult>(id).SetResult(result);\\n\\n    private static OVRTask<TResult> Get<TResult>(Guid id)\\n    {\\n        return new OVRTask<TResult>(id);\\n    }\\n\\n    private static OVRTask<TResult> Create<TResult>(Guid id)\\n    {\\n        var task = Get<TResult>(id);\\n        task.AddToPending();\\n        return task;\\n    }\\n\\n    internal static unsafe Guid GetId(ulong value)\\n    {\\n        const ulong hashModifier1 = 0x319642b2d24d8ec3;\\n        const ulong hashModifier2 = 0x96de1b173f119089;\\n        var guid = default(Guid);\\n        *(ulong*)&guid = unchecked(value + hashModifier1);\\n        *((ulong*)&guid + 1) = hashModifier2;\\n        return guid;\\n    }\\n}\\n\\npublic readonly struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable\\n{\\n    #region static\\n\\n    private static readonly HashSet<Guid> Pending = new HashSet<Guid>();\\n    private static readonly Dictionary<Guid, TResult> Results = new Dictionary<Guid, TResult>();\\n    private static readonly Dictionary<Guid, Action> Continuations = new Dictionary<Guid, Action>();\\n\\n    private delegate void CallbackInvoker(Guid guid, TResult result);\\n\\n    private delegate bool CallbackRemover(Guid guid);\\n\\n    private static readonly Dictionary<Guid, CallbackInvoker>\\n        CallbackInvokers = new Dictionary<Guid, CallbackInvoker>();\\n\\n    private static readonly Dictionary<Guid, CallbackRemover>\\n        CallbackRemovers = new Dictionary<Guid, CallbackRemover>();\\n\\n    private static readonly HashSet<Action> CallbackClearers = new HashSet<Action>();\\n\\n    private delegate bool InternalDataRemover(Guid guid);\\n\\n    private static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers =\\n        new Dictionary<Guid, InternalDataRemover>();\\n\\n    //Removed unused collection\\n    #endregion\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n/*\\n * Copyright (c) Meta Platforms, Inc. and affiliates.\\n * All rights reserved.\\n *\\n * Licensed under the Oculus SDK License Agreement (the \\\"License\\\");\\n * you may not use the Oculus SDK except in compliance with the License,\\n * which is provided at the time of installation or download, or which\\n * otherwise accompanies this software in either electronic or hard copy form.\\n *\\n * You may obtain a copy of the License at\\n *\\n * https:\\n *\\n * Unless required by applicable law or agreed to in writing, the Oculus SDK\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Runtime.CompilerServices;\\n\\ninternal static class OVRTask\\n{\\n    internal static OVRTask<TResult> FromGuid<TResult>(Guid id) => Create<TResult>(id);\\n    internal static OVRTask<TResult> FromRequest<TResult>(ulong id) => Create<TResult>(GetId(id));\\n\\n    internal static OVRTask<TResult> FromResult<TResult>(TResult result)\\n    {\\n        var task = Create<TResult>(Guid.NewGuid());\\n        task.SetResult(result);\\n        return task;\\n    }\\n\\n    internal static OVRTask<TResult> GetExisting<TResult>(Guid id) => Get<TResult>(id);\\n    internal static OVRTask<TResult> GetExisting<TResult>(ulong id) => Get<TResult>(GetId(id));\\n\\n    internal static void SetResult<TResult>(Guid id, TResult result) =>\\n        GetExisting<TResult>(id).SetResult(result);\\n\\n    internal static void SetResult<TResult>(ulong id, TResult result) =>\\n        GetExisting<TResult>(id).SetResult(result);\\n\\n    private static OVRTask<TResult> Get<TResult>(Guid id)\\n    {\\n        return new OVRTask<TResult>(id);\\n    }\\n\\n    private static OVRTask<TResult> Create<TResult>(Guid id)\\n    {\\n        var task = Get<TResult>(id);\\n        task.AddToPending();\\n        return task;\\n    }\\n\\n    internal static unsafe Guid GetId(ulong value)\\n    {\\n        const ulong hashModifier1 = 0x319642b2d24d8ec3;\\n        const ulong hashModifier2 = 0x96de1b173f119089;\\n        var guid = default(Guid);\\n        *(ulong*)&guid = unchecked(value + hashModifier1);\\n        *((ulong*)&guid + 1) = hashModifier2;\\n        return guid;\\n    }\\n}\\n\\npublic readonly struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable\\n{\\n    #region static\\n\\n    private static readonly HashSet<Guid> Pending = new HashSet<Guid>();\\n    private static readonly Dictionary<Guid, TResult> Results = new Dictionary<Guid, TResult>();\\n    private static readonly Dictionary<Guid, Action> Continuations = new Dictionary<Guid, Action>();\\n\\n    private delegate void CallbackInvoker(Guid guid, TResult result);\\n\\n    private delegate bool CallbackRemover(Guid guid);\\n\\n    private static readonly Dictionary<Guid, CallbackInvoker>\\n        CallbackInvokers = new Dictionary<Guid, CallbackInvoker>();\\n\\n    private static readonly Dictionary<Guid, CallbackRemover>\\n        CallbackRemovers = new Dictionary<Guid, CallbackRemover>();\\n\\n    private static readonly HashSet<Action> CallbackClearers = new HashSet<Action>();\\n\\n    private delegate bool InternalDataRemover(Guid guid);\\n\\n    private static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers =\\n        new Dictionary<Guid, InternalDataRemover>();\\n\\n    //Removed the unused collection\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n/*\\n * Copyright (c) Meta Platforms, Inc. and affiliates.\\n * All rights reserved.\\n *\\n * Licensed under the Oculus SDK License Agreement (the \\\"License\\\");\\n * you may not use the Oculus SDK except in compliance with the License,\\n * which is provided at the time of installation or download, or which\\n * otherwise accompanies this software in either electronic or hard copy form.\\n *\\n * You may obtain a copy of the License at\\n *\\n * https:\\n *\\n * Unless required by applicable law or agreed to in writing, the Oculus SDK\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Runtime.CompilerServices;\\n\\ninternal static class OVRTask\\n{\\n    internal static OVRTask<TResult> FromGuid<TResult>(Guid id) => Create<TResult>(id);\\n    internal static OVRTask<TResult> FromRequest<TResult>(ulong id) => Create<TResult>(GetId(id));\\n\\n    internal static OVRTask<TResult> FromResult<TResult>(TResult result)\\n    {\\n        var task = Create<TResult>(Guid.NewGuid());\\n        task.SetResult(result);\\n        return task;\\n    }\\n\\n    internal static OVRTask<TResult> GetExisting<TResult>(Guid id) => Get<TResult>(id);\\n    internal static OVRTask<TResult> GetExisting<TResult>(ulong id) => Get<TResult>(GetId(id));\\n\\n    internal static void SetResult<TResult>(Guid id, TResult result) =>\\n        GetExisting<TResult>(id).SetResult(result);\\n\\n    internal static void SetResult<TResult>(ulong id, TResult result) =>\\n        GetExisting<TResult>(id).SetResult(result);\\n\\n    private static OVRTask<TResult> Get<TResult>(Guid id)\\n    {\\n        return new OVRTask<TResult>(id);\\n    }\\n\\n    private static OVRTask<TResult> Create<TResult>(Guid id)\\n    {\\n        var task = Get<TResult>(id);\\n        task.AddToPending();\\n        return task;\\n    }\\n\\n    internal static unsafe Guid GetId(ulong value)\\n    {\\n        const ulong hashModifier1 = 0x319642b2d24d8ec3;\\n        const ulong hashModifier2 = 0x96de1b173f119089;\\n        var guid = default(Guid);\\n        *(ulong*)&guid = unchecked(value + hashModifier1);\\n        *((ulong*)&guid + 1) = hashModifier2;\\n        return guid;\\n    }\\n}\\n\\npublic readonly struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable\\n{\\n    #region static\\n\\n    private static readonly HashSet<Guid> Pending = new HashSet<Guid>();\\n    private static readonly Dictionary<Guid, TResult> Results = new Dictionary<Guid, TResult>();\\n    private static readonly Dictionary<Guid, Action> Continuations = new Dictionary<Guid, Action>();\\n\\n    private delegate void CallbackInvoker(Guid guid, TResult result);\\n\\n    private delegate bool CallbackRemover(Guid guid);\\n\\n    private static readonly Dictionary<Guid, CallbackInvoker>\\n        CallbackInvokers = new Dictionary<Guid, CallbackInvoker>();\\n\\n    private static readonly Dictionary<Guid, CallbackRemover>\\n        CallbackRemovers = new Dictionary<Guid, CallbackRemover>();\\n\\n    private static readonly HashSet<Action> CallbackClearers = new HashSet<Action>();\\n\\n    private delegate bool InternalDataRemover(Guid guid);\\n\\n    private static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers =\\n        new Dictionary<Guid, InternalDataRemover>();\\n\\n    // Removed the unused collection\\n    #endregion static\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751919157,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":2955,\"prompt_tokens\":853,\"total_tokens\":3808,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"