{
    "code_repairing_0": "Remove or Commented-out the collection if it is no longer needed\n\n// FIXED CODE:\n\n\\begin{code}\n\nList<string> roomNamesToLoad = new List<string>();\n\\end{code}",
    "code_repairing_1": "private void InitializeSavedRoomsList()\n    {\n        string[] rooms = FindSaves();\n\n        if(rooms.Length <= 0) {\n            RenderNoSavedRooms();\n            return;\n        }\n\n        List<string> roomNamesToLoad = new List<string>();\n\n        for(int i = 0; i < NumberOfRoomsToLoad; i++) {\n            if(i < rooms.Length) {\n                roomNamesToLoad.Add(rooms[i]);\n            } else {\n                break;\n            }\n        }\n\n        List<string> roomNamesToDisplay = new List<string>();\n        for(int i = 0; i < roomNamesToLoad.Count; i++) {\n            roomNamesToDisplay.Add(Path.GetFileNameWithoutExtension(roomNamesToLoad[i]));\n        }\n\n        savedRooms = roomNamesToDisplay.ToArray();\n        recentRoomsRoomCodes = savedRooms;\n        recentRoomsNames = savedRooms;\n        recentRoomsBrickCounts = savedRooms;\n    }",
    "code_repairing_2": "public class RecentRoomsManager : MonoBehaviour\n{\n    public UserSettings userSettings;\n    public SessionManager SessionManager;\n\n    public GameObject noSavedRoomsObject;\n    public GameObject savedRoomsObject;\n\n    public GameObject recentRoomPrefab;\n    public GameObject loadingPage;\n\n    private bool _initializedSavedRoomsList = false;\n    private TextInfo _textInfo;\n\n    private const int NumberOfRoomsToLoad = 40;\n\n    public GameObject[] savedRooms;\n    public TextMeshProUGUI[] recentRoomsRoomCodes;\n    public TextMeshProUGUI[] recentRoomsNames;\n    public TextMeshProUGUI[] recentRoomsBrickCounts;\n\n    public PagedScroll pagedScroll;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    private void OnEnable()\n    {\n        _textInfo = new CultureInfo(\"en-US\", false).TextInfo;\n        OnEnable();\n    }\n\n    private string[] FindSaves()\n    {\n        if (!Directory.Exists($\"{(Application.isEditor ? Application.dataPath : Application.persistentDataPath)}/saves/\"))\n            Directory.CreateDirectory($\"{(Application.isEditor ? Application.dataPath : Application.persistentDataPath)}/saves/\");\n        \n        return Directory.GetFiles($\"{(Application.isEditor ? Application.dataPath : Application.persistentDataPath)}/saves/\")\n            .Where(file => file.EndsWith(\".bricks\")).ToArray();\n    }\n\n    private void RenderNoSavedRooms()\n    {\n        noSavedRoomsObject.SetActive(true);\n        savedRoomsObject.SetActive(false);\n        pagedScroll.DisableButtons();\n    }\n\n    private void RenderSavedRoomsList()\n    {\n        noSavedRoomsObject.SetActive(false);\n        savedRoomsObject.SetActive(true);\n\n        InitializeSavedRoomsList();\n        _initializedSavedRoomsList = true;\n    }\n\n    private void InitializeSavedRoomsList()\n    {\n        string[] rooms = FindSaves();\n\n        if (rooms.Length <= 0)\n        {\n            RenderNoSavedRooms();\n            return;\n        }\n\n        // BUG: Container contents are never accessed\n        // MESSAGE: A collection or map whose contents are never queried or accessed is useless.\n        //         List<string> roomNamesToLoad = new List<string>();\n\n        //Remove or Commented-out the collection if it is no longer needed\n        List<string> roomNamesToLoad = new List<string>();\n\n        for (int i = 0; i < rooms.Length; i++)\n        {\n            roomNamesToLoad.Add(rooms[i].Substring(0, rooms[i].IndexOf(\".bricks\")));\n        }\n\n        for (int i = 0; i < roomNamesToLoad.Count && i < NumberOfRoomsToLoad; i++)\n        {\n            GameObject room = Instantiate(recentRoomPrefab);\n            room.transform.SetParent(savedRoomsObject.transform);\n            room.transform.localScale = new Vector3(1, 1, 1);\n            room.transform.localPosition = new Vector3(0, 0, 0);\n\n            TextMeshProUGUI roomCode = room.transform.Find(\"RoomCode\").GetComponent<TextMeshProUGUI>();\n            roomCode.text = $\"{i + 1}. {roomNamesToLoad[i]}\";\n\n            TextMeshProUGUI name = room.transform.Find(\"RoomName\").GetComponent<TextMeshProUGUI>();\n            name.text = _textInfo.ToTitleCase(roomNamesToLoad[i]);\n\n            TextMeshProUGUI bricks = room.transform.Find(\"BrickCount\").GetComponent<TextMeshProUGUI>();\n            bricks.text = \"0 bricks\";\n        }\n    }\n}",
    "code_repairing_3": "private void InitializeSavedRoomsList()\n{\n    string[] rooms = FindSaves();\n\n    if (rooms.Length <= 0)\n    {\n        RenderNoSavedRooms();\n        return;\n    }\n\n    //Initialize the contents of the container if it is no longer needed\n    List<string> roomNamesToLoad = new List<string>();\n\n    for (int i = 0; i < NumberOfRoomsToLoad; i++)\n    {\n        if (i < rooms.Length)\n        {\n            roomNamesToLoad.Add(Path.GetFileNameWithoutExtension(rooms[i]));\n        }\n        else\n        {\n            break;\n        }\n    }\n\n    savedRooms = roomNamesToLoad.ToArray();\n}",
    "code_repairing_4": "```\n\ufeff using System.Collections.Generic;\nusing System.Globalization;\nusing UnityEngine.Events;\nusing UnityEngine.UI;\nusing System.Linq;\nusing UnityEngine;\nusing System.IO;\nusing TMPro;\n\npublic class RecentRoomsManager : MonoBehaviour\n{\n    public UserSettings userSettings;\n    public SessionManager SessionManager;\n\n    public GameObject noSavedRoomsObject;\n    public GameObject savedRoomsObject;\n\n    public GameObject recentRoomPrefab;\n    public GameObject loadingPage;\n\n    private bool _initializedSavedRoomsList;\n    private TextInfo _textInfo;\n\n    private const int NumberOfRoomsToLoad = 40;\n\n    public GameObject[] savedRooms;\n    public TextMeshProUGUI[] recentRoomsRoomCodes;\n    public TextMeshProUGUI[] recentRoomsNames;\n    public TextMeshProUGUI[] recentRoomsBrickCounts;\n\n    public PagedScroll pagedScroll;\n\n    private void OnEnable()\n    {\n        _textInfo = new CultureInfo(\"en-US\", false).TextInfo;\n        RenderSavedRoomsList();\n    }\n\n    private string[] FindSaves() {\n        if(!Directory.Exists($\"{(Application.isEditor ? Application.dataPath : Application.persistentDataPath)}/saves/\"))\n            Directory.CreateDirectory($\"{(Application.isEditor ? Application.dataPath : Application.persistentDataPath)}/saves/\");\n        \n        return Directory.GetFiles($\"{(Application.isEditor ? Application.dataPath : Application.persistentDataPath)}/saves/\")\n            .Where(file => file.EndsWith(\".bricks\")).ToArray();\n    }\n\n    private void RenderNoSavedRooms()\n    {\n        noSavedRoomsObject.SetActive(true);\n        savedRoomsObject.SetActive(false);\n        pagedScroll.DisableButtons();\n    }\n\n    private void RenderSavedRoomsList()\n    {\n        noSavedRoomsObject.SetActive(false);\n        savedRoomsObject.SetActive(true);\n\n        InitializeSavedRoomsList();\n        _initializedSavedRoomsList = true;\n    }\n\n    private void InitializeSavedRoomsList()\n    {\n        string[] rooms = FindSaves();\n\n        if(rooms.Length <= 0) {\n            RenderNoSavedRooms();\n            return;\n        }\n\n        // Remove container if it is no longer needed\n        //List<string> roomNamesToLoad = new List<string>();\n\n        // Remove or Commented-out the collection if it is no longer needed\n        // BUG: Container contents are never accessed\n        // MESSAGE: A collection or map whose contents are never queried or accessed is useless.\n        //         for (int i = 0; i < rooms.Length; i++)\n        //         {\n        //             string roomName = GetCleanRoomName(rooms[i]);\n        //             Debug.Log(roomName);\n        //             roomNamesToLoad.Add(roomName);\n        //         }\n\n        // FIXED CODE:\n        for (int i = 0; i < rooms.Length; i++)\n        {\n            string roomName = GetCleanRoomName(rooms[i]);\n            Debug.Log(roomName);\n            // roomNamesToLoad.Add(roomName);\n        }\n    }\n\n    public string GetCleanRoomName(string path)\n    {\n        string roomName = Path.GetFileNameWithoutExtension(path);\n        return _textInfo.ToTitleCase(roomName.Replace(\"_\", \" \"));\n    }\n}\n```"
}