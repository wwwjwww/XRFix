{
    "id": "chatcmpl-9yzhXkKYJiNVtv2m1p3vUoDCTAWtA",
    "object": "chat.completion",
    "created": 1724323887,
    "model": "gpt-35-turbo",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```csharp\n    public void SetHovered(bool hovered, bool left)\n    {\n        if ((left && (_hoveredLeft == hovered)) || (!left && (_hoveredRight == hovered)))\n            return;\n\n        if (left)\n            _hoveredLeft = hovered;\n        else\n            _hoveredRight = hovered;\n\n        UpdateBrickColor();\n    }\n\n    public void SetHeld(bool held)\n    {\n        if (Held == held)\n            return;\n\n        Held = held;\n        UpdateBrickColor();\n    }\n\n    public void UpdateBrickColor()\n    {\n        if (_props == null) return;\n\n        _props.SetColor(\"_Color\", (_hoveredLeft || _hoveredRight || Held) ? HoverColor : _color);\n        _props.SetFloat(\"_TexOffset\", texOffset);\n\n        MeshRenderer renderer = model.GetComponent<MeshRenderer>();\n        renderer.SetPropertyBlock(_props);\n    }\n\n    private void SetSortedMaterial(Mesh mesh = null)\n    {\n        MeshRenderer meshRenderer = model.GetComponent<MeshRenderer>();\n\n        meshRenderer.material = BrickRenderQueueSorter.SortedMaterialFromMesh(mesh ? mesh : meshFilter.sharedMesh, meshRenderer.sharedMaterial);\n        renderQueue = meshRenderer.sharedMaterial.renderQueue;\n    }\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "```csharp\n    public void RecalculateRenderedGeometry() {\n        bool placed = placedBrickRenderer == null;\n        bool performanceMode = _userSettings.SuperUltraPerformanceMode;\n\n        string cacheKey = \"\";\n        cacheKey += normalPrefabName;\n\n        bool allFemalePegsCovered = femaleConnectorScripts.All(s => s.covered);\n\n        bool isOnCarpet = IsOnCarpet();\n\n        if (performanceMode)\n        {\n            cacheKey += \"perfmode\"; \n        }\n        else\n        {\n            foreach (LegoConnectorScript s in maleConnectorScripts)\n            {\n                cacheKey += ((placed && s.covered) ? \"Y\" : \"N\");\n            }\n\n            if ((allFemalePegsCovered || isOnCarpet) && placed) cacheKey += \"-bottomcovered\";\n        }\n\n        MeshFilter combinedMeshFilter = combinedModel.GetComponent<MeshFilter>();\n\n        Mesh cachedMesh = BrickMeshCache.GetInstance().GetMesh(cacheKey);\n        if (cachedMesh != null)\n        {\n            combinedMeshFilter.mesh = cachedMesh;\n            SetSortedMaterial(combinedMeshFilter.sharedMesh);\n            return;\n        }\n\n        Vector3 originalPos = transform.position;\n        transform.position = Vector3.zero;\n\n        Quaternion originalRot = transform.rotation;\n        transform.rotation = Quaternion.identity;\n\n        List<CombineInstance> combineInstances = new List<CombineInstance>();\n\n        _modularModel.transform.position = transform.position;\n\n        foreach (MeshFilter meshFilter in _modularModel.GetComponentsInChildren<MeshFilter>())\n        {\n            GameObject obj = meshFilter.gameObject;\n            string parentName = meshFilter.transform.parent.name;\n\n            switch (parentName)\n            {\n                case \"Studs\" when (maleConnectorScriptsByName[obj.name].covered || performanceMode):\n                case \"Tubes\" when (allFemalePegsCovered || performanceMode):\n                case \"Body\" when (allFemalePegsCovered || performanceMode || isOnCarpet):\n                case \"FlatBody\" when !performanceMode && !allFemalePegsCovered && !isOnCarpet:\n                    continue;\n            }\n\n            CombineInstance instance = new CombineInstance();\n            instance.mesh = obj.sharedMesh;\n            instance.transform = obj.transform.localToWorldMatrix;\n            combineInstances.Add(instance);\n        }\n\n        Mesh newMesh = new Mesh();\n        combinedMeshFilter.mesh = newMesh;\n        combinedMeshFilter.mesh.CombineMeshes(combineInstances.ToArray());\n        combinedMeshFilter.mesh.Optimize();\n\n        BrickMeshCache.GetInstance().PutMesh(cacheKey, combinedMeshFilter.sharedMesh);\n\n        transform.position = originalPos;\n        transform.rotation = originalRot;\n\n        SetColor(_color);\n        SetSortedMaterial(combinedMeshFilter.sharedMesh);\n    }\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "```csharp\nprivate List<BrickAttach> _attachBuffer = new List<BrickAttach>();\n\nprivate void ConnectBricks(Vector3 newPos, Quaternion newRot, Vector3 connectionDirection, Session session = null) {\n        session = session ?? Session.GetInstance();\n        transform.position = newPos;\n        transform.rotation = newRot;\n\n        List<GameObject> bricksBelow = OverlappingBricksFromConnectors(femaleConnectors);\n        List<BrickAttach> bricksBelowAttaches = bricksBelow.Select(b => b.GetComponent<BrickAttach>()).ToList();\n\n        List<GameObject> bricksAbove = OverlappingBricksFromConnectors(maleConnectors);\n        List<BrickAttach> bricksAboveAttaches = bricksAbove.Select(b => b.GetComponent<BrickAttach>()).ToList();\n\n        string attachedToHeadClientId = session.ClientID;\n        foreach (BrickAttach attach in bricksBelowAttaches)\n            if (attach.headClientId != session.ClientID)\n                attachedToHeadClientId = attach.headClientId;\n\n        foreach (BrickAttach attach in bricksAboveAttaches)\n            if (attach.headClientId != session.ClientID)\n                attachedToHeadClientId = attach.headClientId;\n\n        for (int i = 0; i < bricksBelowAttaches.Count; i++) {\n            ConfigureNeighboringBrick(bricksBelowAttaches[i], bricksBelow[i], true);\n        }\n\n        for (int i = 0; i < bricksAboveAttaches.Count; i++) {\n            ConfigureNeighboringBrick(bricksAboveAttaches[i], bricksAbove[i], false);\n        }\n\n        BrickSwapper.SwapToFakeBrick(gameObject, attachedToHeadClientId, _avatarManager);\n\n        _attachBuffer = bricksBelowAttaches.Concat(bricksAboveAttaches).ToList();\n    }\n```"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "private readonly Dictionary<BrickAttach, bool> _attachBuffer = new Dictionary<BrickAttach, bool>();"
            },
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "private readonly Dictionary<BrickAttach, bool> _attachBuffer = new Dictionary<BrickAttach, bool>();"
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2640,
        "completion_tokens": 1225,
        "total_tokens": 3865
    },
    "system_fingerprint": "fp_e49e4201a9"
}