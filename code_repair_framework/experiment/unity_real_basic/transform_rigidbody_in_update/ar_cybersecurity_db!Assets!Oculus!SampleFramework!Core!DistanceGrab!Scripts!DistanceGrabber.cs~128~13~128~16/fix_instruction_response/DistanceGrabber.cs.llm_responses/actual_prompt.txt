//Here're the buggy code lines from /Assets/Oculus/SampleFramework/Core/DistanceGrab/Scripts/DistanceGrabber.cs:
/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https:
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


using System.Collections.Generic;
using UnityEngine;
#if UNITY_EDITOR
using UnityEngine.SceneManagement;
#endif


namespace OculusSampleFramework
{
    
    
    
    [RequireComponent(typeof(Rigidbody))]
    public class DistanceGrabber : OVRGrabber
    {
        
        [SerializeField]
        float m_spherecastRadius = 0;

        
        
        [SerializeField]
        float m_noSnapThreshhold = 0.05f;

        [SerializeField]
        bool m_useSpherecast;

        public bool UseSpherecast
        {
            get { return m_useSpherecast; }
            set
            {
                m_useSpherecast = value;
                GrabVolumeEnable(!m_useSpherecast);
            }
        }

        
        [SerializeField]
        public bool m_preventGrabThroughWalls;

        [SerializeField]
        float m_objectPullVelocity = 10.0f;

        float m_objectPullMaxRotationRate = 360.0f; 

        bool m_movingObjectToHand = false;

        
        [SerializeField]
        float m_maxGrabDistance;

        
        
        [SerializeField]
        int m_grabObjectsInLayer = 0;

        [SerializeField]
        int m_obstructionLayer = 0;

        DistanceGrabber m_otherHand;

        protected DistanceGrabbable m_target;

        
        protected Collider m_targetCollider;

        protected override void Start()
        {
            base.Start();

            
            
            
            Collider sc = m_player.GetComponentInChildren<Collider>();
            if (sc != null)
            {
                m_maxGrabDistance = sc.bounds.size.z * 0.5f + 3.0f;
            }
            else
            {
                m_maxGrabDistance = 12.0f;
            }

            if (m_parentHeldObject == true)
            {
                Debug.LogError("m_parentHeldObject incompatible with DistanceGrabber. Setting to false.");
                m_parentHeldObject = false;
            }

            DistanceGrabber[] grabbers = FindObjectsOfType<DistanceGrabber>();
            for (int i = 0; i < grabbers.Length; ++i)
            {
                if (grabbers[i] != this) m_otherHand = grabbers[i];
            }

            Debug.Assert(m_otherHand != null);

#if UNITY_EDITOR
            OVRPlugin.SendEvent("distance_grabber", (SceneManager.GetActiveScene().name == "DistanceGrab").ToString(),
                "sample_framework");
#endif
        }

// BUG: Transform object of Rigidbody in Update() methods
// MESSAGE: Rigidbody needs to be transformed in FixedUpdate() methods to simulate real-world movement.
//        public override void Update()
//        {
//            base.Update();
//
//            Debug.DrawRay(transform.position, transform.forward, Color.red, 0.1f);
//
//            DistanceGrabbable target;
//            Collider targetColl;
//            FindTarget(out target, out targetColl);
//
//            if (target != m_target)
//            {
//                if (m_target != null)
//                {
//                    m_target.Targeted = m_otherHand.m_target == m_target;
//                }
//
//                m_target = target;
//                m_targetCollider = targetColl;
//                if (m_target != null)
//                {
//                    m_target.Targeted = true;
//                }
//            }
//        }
//Here's the definition of function call in another component.
//Related code from /Assets/Oculus/VR/Scripts/Util/OVRGrabber.cs:
/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https:
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Collections.Generic;
using UnityEngine;




[RequireComponent(typeof(Rigidbody))]
public class OVRGrabber : MonoBehaviour
{
    
    public float grabBegin = 0.55f;
    public float grabEnd = 0.35f;

    
    
    
    
    
    [SerializeField]
    protected bool m_parentHeldObject = false;

    
    
    
    
    
    
    [SerializeField]
    protected bool m_moveHandPosition = false;

    
    
    [SerializeField]
    protected Transform m_gripTransform = null;

    
    [SerializeField]
    protected Collider[] m_grabVolumes = null;

    
    [SerializeField]
    protected OVRInput.Controller m_controller;

    
    
    
    [SerializeField]
    protected Transform m_parentTransform;

    [SerializeField]
    protected GameObject m_player;

    protected bool m_grabVolumeEnabled = true;
    protected Vector3 m_lastPos;
    protected Quaternion m_lastRot;
    protected Quaternion m_anchorOffsetRotation;
    protected Vector3 m_anchorOffsetPosition;
    protected float m_prevFlex;
    protected OVRGrabbable m_grabbedObj = null;
    protected Vector3 m_grabbedObjectPosOff;
    protected Quaternion m_grabbedObjectRotOff;
    protected Dictionary<OVRGrabbable, int> m_grabCandidates = new Dictionary<OVRGrabbable, int>();
    protected bool m_operatingWithoutOVRCameraRig = true;

    
    
    
    public OVRGrabbable grabbedObject
    {
        get { return m_grabbedObj; }
    }

    public void ForceRelease(OVRGrabbable grabbable)
    {
        bool canRelease = (
            (m_grabbedObj != null) &&
            (m_grabbedObj == grabbable)
        );
        if (canRelease)
        {
            GrabEnd();
        }
    }

    protected virtual void Awake()
    {
        m_anchorOffsetPosition = transform.localPosition;
        m_anchorOffsetRotation = transform.localRotation;

        if (!m_moveHandPosition)
        {
            
            OVRCameraRig rig = transform.GetComponentInParent<OVRCameraRig>();
            if (rig != null)
            {
                rig.UpdatedAnchors += (r) => { OnUpdatedAnchors(); };
                m_operatingWithoutOVRCameraRig = false;
            }
        }
    }

    protected virtual void Start()
    {
        m_lastPos = transform.position;
        m_lastRot = transform.rotation;
        if (m_parentTransform == null)
        {
            m_parentTransform = gameObject.transform;
        }

        
        SetPlayerIgnoreCollision(gameObject, true);
    }

    
    
    
    
    
    
    
    
    
    virtual public void Update()
    {
        if (m_operatingWithoutOVRCameraRig)
        {
            OnUpdatedAnchors();
        }
    }

    
    
    
//    void OnUpdatedAnchors()
//    {
//        Vector3 destPos = m_parentTransform.TransformPoint(m_anchorOffsetPosition);
//        Quaternion destRot = m_parentTransform.rotation * m_anchorOffsetRotation;
//
//        if (m_moveHandPosition)
//        {
//            GetComponent<Rigidbody>().MovePosition(destPos);
//            GetComponent<Rigidbody>().MoveRotation(destRot);
//        }
//
//        if (!m_parentHeldObject)
//        {
//            MoveGrabbedObject(destPos, destRot);
//        }
//
//        m_lastPos = transform.position;
//        m_lastRot = transform.rotation;
//
//        float prevFlex = m_prevFlex;
//        
//        m_prevFlex = OVRInput.Get(OVRInput.Axis1D.PrimaryHandTrigger, m_controller);
//
//        CheckForGrabOrRelease(prevFlex);
//    }

// FIXED CODE:

// Move this function in FixedUpdate() methods.