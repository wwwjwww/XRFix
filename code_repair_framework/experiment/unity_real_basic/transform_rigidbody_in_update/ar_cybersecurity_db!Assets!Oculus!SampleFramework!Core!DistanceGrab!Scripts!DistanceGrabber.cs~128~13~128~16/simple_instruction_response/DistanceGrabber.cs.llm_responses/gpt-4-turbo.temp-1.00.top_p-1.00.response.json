"{\"id\":\"chatcmpl-B3J9KsrAR0PAYBl2Zot9yn2OjAahW\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nnamespace OculusSampleFramework\\n{\\n    [RequireComponent(typeof(Rigidbody))]\\n    public class DistanceGrabber : OVRGrabber\\n    {\\n        [SerializeField]\\n        float m_spherecastRadius = 0;\\n\\n        [SerializeField]\\n        float m_noSnapThreshhold = 0.05f;\\n\\n        [SerializeField]\\n        bool m_useSpherecast;\\n\\n        public bool UseSpherecast\\n        {\\n            get { return m_useSpherecast; }\\n            set\\n            {\\n                m_useSpherecast = value;\\n                GrabVolumeEnable(!m_useSpherecast);\\n            }\\n        }\\n\\n        [SerializeField]\\n        public bool m_preventGrabThroughWalls;\\n\\n        [SerializeField]\\n        float m_objectPullVelocity = 10.0f;\\n\\n        float m_objectPullMaxRotationRate = 360.0f; // max rotation rate in degrees per second\\n\\n        bool m_movingObjectToHand = false;\\n\\n        [SerializeField]\\n        float m_maxGrabDistance;\\n\\n        [SerializeField]\\n        int m_grabObjectsInLayer = 0;\\n\\n        [SerializeField]\\n        int m_obstructionLayer = 0;\\n\\n        DistanceGrabber m_otherHand;\\n\\n        protected DistanceGrabbable m_target;\\n\\n        protected Collider m_targetCollider;\\n\\n        protected override void Start()\\n        {\\n            base.Start();\\n\\n            Collider sc = m_player.GetComponentInChildren<Collider>();\\n            if (sc != null)\\n            {\\n                m_maxGrabDistance = sc.bounds.size.z * 0.5f + 3.0f;\\n            }\\n            else\\n            {\\n                m_maxGrabDistance = 12.0f;\\n            }\\n\\n            if (m_parentHeldObject == true)\\n            {\\n                Debug.LogError(\\\"m_parentHeldObject incompatible with DistanceGrabber. Setting to false.\\\");\\n                m_parentHeldObject = false;\\n            }\\n\\n            DistanceGrabber[] grabbers = FindObjectsOfType<DistanceGrabber>();\\n            for (int i = 0; i < grabbers.Length; ++i)\\n            {\\n                if (grabbers[i] != this) m_otherHand = grabbers[i];\\n            }\\n\\n            Debug.Assert(m_otherHand != null);\\n\\n#if UNITY_EDITOR\\n            OVRPlugin.SendEvent(\\\"distance_grabber\\\", (SceneManager.GetActiveScene().name == \\\"DistanceGrab\\\").ToString(),\\n                \\\"sample_framework\\\");\\n#endif\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n#if UNITY_EDITOR\\nusing UnityEngine.SceneManagement;\\n#endif\\n\\nnamespace OculusSampleFramework\\n{\\n    [RequireComponent(typeof(Rigidbody))]\\n    public class DistanceGrabber : OVRGrabber\\n    {\\n        [SerializeField]\\n        float m_spherecastRadius = 0;\\n\\n        [SerializeField]\\n        float m_noSnapThreshhold = 0.05f;\\n\\n        [SerializeField]\\n        bool m_useSpherecast;\\n\\n        public bool UseSpherecast\\n        {\\n            get { return m_useSpherecast; }\\n            set\\n            {\\n                m_useSpherecast = value;\\n                GrabVolumeEnable(!m_useSpherecast);\\n            }\\n        }\\n\\n        [SerializeField]\\n        public bool m_preventGrabThroughWalls;\\n\\n        [SerializeField]\\n        float m_objectPullVelocity = 10.0f;\\n\\n        float m_objectPullMaxRotationRate = 360.0f; // max rotation rate in degrees per second\\n\\n        bool m_movingObjectToHand = false;\\n\\n        [SerializeField]\\n        float m_maxGrabDistance;\\n\\n        [SerializeField]\\n        int m_grabObjectsInLayer = 0;\\n\\n        [SerializeField]\\n        int m_obstructionLayer = 0;\\n\\n        DistanceGrabber m_otherHand;\\n\\n        protected DistanceGrabbable m_target;\\n\\n        protected Collider m_targetCollider;\\n\\n        protected override void Start()\\n        {\\n            base.Start();\\n\\n            Collider sc = m_player.GetComponentInChildren<Collider>();\\n            if (sc != null)\\n            {\\n                m_maxGrabDistance = sc.bounds.extents.z * 2 + 3.0f;\\n            }\\n            else\\n            {\\n                m_maxGrabDistance = 12.0f;\\n            }\\n\\n            if (m_parentHeldObject == true)\\n            {\\n                Debug.LogError(\\\"m_parentHeldObject incompatible with DistanceGrabber. Setting to false.\\\");\\n                m_parentHeldObject = false;\\n            }\\n\\n            DistanceGrabber[] grabbers = FindObjectsOfType<DistanceGrabber>();\\n            for (int i = 0; i < grabbers.Length; ++i)\\n            {\\n                if (grabbers[i] != this) m_otherHand = grabbers[i];\\n            }\\n\\n            Debug.Assert(m_otherHand != null);\\n\\n#if UNITY_EDITOR\\n            OVRPlugin.SendEvent(\\\"distance_grabber\\\", (SceneManager.GetActiveScene().name == \\\"DistanceGrab\\\").ToString(),\\n                \\\"sample_framework\\\");\\n#endif\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n#if UNITY_EDITOR\\nusing UnityEngine.SceneManagement;\\n#endif\\n\\nnamespace OculusSampleFramework\\n{\\n    [RequireComponent(typeof(Rigidbody))]\\n    public class DistanceGrabber : OVRGrabber\\n    {\\n        [SerializeField]\\n        float m_spherecastRadius = 0;\\n\\n        [SerializeField]\\n        float m_noSnapThreshhold = 0.05f;\\n\\n        [SerializeField]\\n        bool m_useSpherecast;\\n\\n        public bool UseSpherecast\\n        {\\n            get { return m_useSpherecast; }\\n            set\\n            {\\n                m_useSpherecast = value;\\n                GrabVolumeEnable(!m_useSpherecast);\\n            }\\n        }\\n\\n        [SerializeField]\\n        public bool m_preventGrabThroughWalls;\\n\\n        [SerializeField]\\n        float m_objectPullVelocity = 10.0f;\\n\\n        float m_objectPullMaxRotationRate = 360.0f; // max rotation rate in degrees per second\\n\\n        bool m_movingObjectToHand = false;\\n\\n        [SerializeField]\\n        float m_maxGrabDistance;\\n\\n        [SerializeField]\\n        int m_grabObjectsInLayer = 0;\\n\\n        [SerializeField]\\n        int m_obstructionLayer = 0;\\n\\n        DistanceGrabber m_otherHand;\\n\\n        protected DistanceGrabbable m_target;\\n\\n        protected Collider m_targetCollider;\\n\\n        protected override void Start()\\n        {\\n            base.Start();\\n\\n            Collider sc = m_player.GetComponentInChildren<Collider>();\\n            if (sc != null)\\n            {\\n                m_maxGrabDistance = sc.bounds.size.z * 0.5f + 3.0f;\\n            }\\n            else\\n            {\\n                m_maxGrabDistance = 12.0f;\\n            }\\n\\n            if (m_parentHeldObject == true)\\n            {\\n                Debug.LogError(\\\"m_parentHeldObject incompatible with DistanceGrabber. Setting to false.\\\");\\n                m_parentHeldObject = false;\\n            }\\n\\n            DistanceGrabber[] grabbers = FindObjectsOfType<DistanceGrabber>();\\n            for (int i = 0; i < grabbers.Length; ++i)\\n            {\\n                if (grabbers[i] != this) m_otherHand = grabbers[i];\\n            }\\n\\n            Debug.Assert(m_otherHand != null);\\n\\n#if UNITY_EDITOR\\n            OVRPlugin.SendEvent(\\\"distance_grabber\\\", (SceneManager.GetActiveScene().name == \\\"DistanceGrab\\\").ToString(),\\n                \\\"sample_framework\\\");\\n#endif\\n        }\\n\\n        public override void Update()\\n        {\\n            base.Update();\\n\\n            if (m_operatingWithoutOVRCameraRig)\\n            {\\n                OnUpdatedAnchors();\\n            }\\n\\n            Debug.DrawRay(transform.position, transform.forward, Color.red, 0.1f);\\n\\n            DistanceGrabbable target;\\n            Collider targetColl;\\n            FindTarget(out target, out targetColl);\\n\\n            if (target != m_target)\\n            {\\n                if (m_target != null)\\n                {\\n                    m_target.Targeted = m_otherHand.m_target == m_target;\\n                }\\n\\n                m_target = target;\\n                m_targetCollider = targetColl;\\n                if (m_target != null)\\n                {\\n                    m_target.Targeted = true;\\n                }\\n            }\\n        }\\n\\n        private void FindTarget(out DistanceGrabbable target, out Collider targetColl)\\n        {\\n            // Logic to find the target and assign it to target and targetColl\\n            target = null; // Assign actual target logic here\\n            targetColl = null; // Assign actual target collider logic here\\n        }\\n\\n        private void OnUpdatedAnchors()\\n        {\\n            Vector3 destPos = m_parentTransform.TransformPoint(m_anchorOffsetPosition);\\n            Quaternion destRot = m_parentTransform.rotation * m_anchorOffsetRotation;\\n\\n            if (m_moveHandPosition)\\n            {\\n                GetComponent<Rigidbody>().MovePosition(destPos);\\n                GetComponent<Rigidbody>().MoveRotation(destRot);\\n            }\\n\\n            if (!m_parentHeldObject)\\n            {\\n                MoveGrabbedObject(destPos, destRot);\\n            }\\n\\n            m_lastPos = transform.position;\\n            m_lastRot = transform.rotation;\\n\\n            float prevFlex = m_prevFlex;\\n\\n            m_prevFlex = OVRInput.Get(OVRInput.Axis1D.PrimaryHandTrigger, m_controller);\\n\\n            CheckForGrabOrRelease(prevFlex);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nprotected override void Start()\\n{\\n    base.Start();\\n\\n    Collider sc = m_player != null ? m_player.GetComponentInChildren<Collider>() : null;\\n    if (sc != null)\\n    {\\n        m_maxGrabDistance = sc.bounds.size.z * 0.5f + 3.0f;\\n    }\\n    else\\n    {\\n        m_maxGrabDistance = 12.0f;\\n    }\\n\\n    if (m_parentHeldObject == true)\\n    {\\n        Debug.LogError(\\\"m_parentHeldObject incompatible with DistanceGrabber. Setting to false.\\\");\\n        m_parentHeldObject = false;\\n    }\\n\\n    DistanceGrabber[] grabbers = FindObjectsOfType<DistanceGrabber>();\\n    foreach (DistanceGrabber grabber in grabbers)\\n    {\\n        if (grabber != this) m_otherHand = grabber;\\n    }\\n\\n    Debug.Assert(m_otherHand != null);\\n\\n#if UNITY_EDITOR\\n    OVRPlugin.SendEvent(\\\"distance_grabber\\\", (SceneManager.GetActiveScene().name == \\\"DistanceGrab\\\").ToString(),\\n        \\\"sample_framework\\\");\\n#endif\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n#if UNITY_EDITOR\\nusing UnityEngine.SceneManagement;\\n#endif\\n\\nnamespace OculusSampleFramework\\n{\\n    [RequireComponent(typeof(Rigidbody))]\\n    public class DistanceGrabber : OVRGrabber\\n    {\\n        [SerializeField]\\n        float m_spherecastRadius = 0;\\n\\n        [SerializeField]\\n        float m_noSnapThreshhold = 0.05f;\\n\\n        [SerializeField]\\n        bool m_useSpherecast;\\n\\n        public bool UseSpherecast\\n        {\\n            get { return m_useSpherecast; }\\n            set\\n            {\\n                m_useSpherecast = value;\\n                GrabVolumeEnable(!m_useSpherecast);\\n            }\\n        }\\n\\n        [SerializeField]\\n        public bool m_preventGrabThroughWalls;\\n\\n        [SerializeField]\\n        float m_objectPullVelocity = 10.0f;\\n\\n        float m_objectPullMaxRotationRate = 360.0f;\\n\\n        bool m_movingObjectToHand = false;\\n\\n        [SerializeField]\\n        float m_maxGrabDistance;\\n\\n        [SerializeField]\\n        int m_grabObjectsInLayer = 0;\\n\\n        [SerializeField]\\n        int m_obstructionLayer = 0;\\n\\n        DistanceGrabber m_otherHand;\\n\\n        protected DistanceGrabbable m_target;\\n\\n        protected Collider m_targetCollider;\\n\\n        protected override void Start()\\n        {\\n            base.Start();\\n\\n            Collider sc = m_player.GetComponentInChildren<Collider>();\\n            if (sc != null)\\n            {\\n                m_maxGrabDistance = sc.bounds.extents.z + 3.0f;\\n            }\\n            else\\n            {\\n                m_maxGrabDistance = 12.0f;\\n            }\\n\\n            if (m_parentHeldObject == true)\\n            {\\n                Debug.LogError(\\\"m_parentHeldObject incompatible with DistanceGrabber. Setting to false.\\\");\\n                m_parentHeldObject = false;\\n            }\\n\\n            DistanceGrabber[] grabbers = FindObjectsOfType<DistanceGrabber>();\\n            for (int i = 0; i < grabbers.Length; ++i)\\n            {\\n                if (grabbers[i] != this) m_otherHand = grabbers[i];\\n            }\\n\\n            Debug.Assert(m_otherHand != null);\\n\\n#if UNITY_EDITOR\\n            OVRPlugin.SendEvent(\\\"distance_grabber\\\", (SceneManager.GetActiveScene().name == \\\"DistanceGrab\\\").ToString(),\\n                \\\"sample_framework\\\");\\n#endif\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740128294,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":2606,\"prompt_tokens\":1834,\"total_tokens\":4440,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"