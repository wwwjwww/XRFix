"{\"id\":\"chatcmpl-Brn0YgTEbLOAneoudfU52GEM5vHBz\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        public enum SpawnTriggerType\\n        {\\n            SelectAttempt,\\n            InputAction,\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n        XRRayInteractor m_ARInteractor;\\n\\n        public XRRayInteractor arInteractor\\n        {\\n            get => m_ARInteractor;\\n            set => m_ARInteractor = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n        ObjectSpawner m_ObjectSpawner;\\n\\n        public ObjectSpawner objectSpawner\\n        {\\n            get => m_ObjectSpawner;\\n            set => m_ObjectSpawner = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n        bool m_RequireHorizontalUpSurface;\\n\\n        public bool requireHorizontalUpSurface\\n        {\\n            get => m_RequireHorizontalUpSurface;\\n            set => m_RequireHorizontalUpSurface = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \\\" +\\n            \\\"when a button input is performed.\\\")]\\n        SpawnTriggerType m_SpawnTriggerType;\\n\\n        public SpawnTriggerType spawnTriggerType\\n        {\\n            get => m_SpawnTriggerType;\\n            set => m_SpawnTriggerType = value;\\n        }\\n\\n        [SerializeField]\\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n\\n        public XRInputButtonReader spawnObjectInput\\n        {\\n            get => m_SpawnObjectInput;\\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\\n\\n        public bool blockSpawnWhenInteractorHasSelection\\n        {\\n            get => m_BlockSpawnWhenInteractorHasSelection;\\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\\n        }\\n\\n        bool m_AttemptSpawn;\\n        bool m_EverHadSelection;\\n\\n        void OnEnable()\\n        {\\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\\n        }\\n\\n        void OnDisable()\\n        {\\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\\n        }\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        // Removed Instantiate in Update() method by separating logic to handle spawning.\\n        void LateUpdate()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Fixed code in /Assets/XR Interaction Toolkit/3.0.6/AR Starter Assets/Scripts/ARInteractorSpawnTrigger.cs\\n\\nvoid Update()\\n{\\n    bool shouldAttemptSpawn = false;\\n\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (m_ARInteractor.selectState.wasCompletedThisFrame)\\n                shouldAttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                shouldAttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n    }\\n\\n    if (!shouldAttemptSpawn)\\n        return;\\n\\n    var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n    if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n    {\\n        if (!(arRaycastHit.trackable is ARPlane arPlane))\\n            return;\\n\\n        if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n            return;\\n\\n        if (m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal))\\n        {\\n            m_EverHadSelection = true;\\n        }\\n    }\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        // Move implementation into a separate method\\n        private void AttemptSpawn()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n            }\\n        }\\n\\n        // Call the separate method in Update\\n        void Update()\\n        {\\n            AttemptSpawn();\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        public enum SpawnTriggerType\\n        {\\n            SelectAttempt,\\n            InputAction,\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n        XRRayInteractor m_ARInteractor;\\n\\n        public XRRayInteractor arInteractor\\n        {\\n            get => m_ARInteractor;\\n            set => m_ARInteractor = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n        ObjectSpawner m_ObjectSpawner;\\n\\n        public ObjectSpawner objectSpawner\\n        {\\n            get => m_ObjectSpawner;\\n            set => m_ObjectSpawner = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n        bool m_RequireHorizontalUpSurface;\\n\\n        public bool requireHorizontalUpSurface\\n        {\\n            get => m_RequireHorizontalUpSurface;\\n            set => m_RequireHorizontalUpSurface = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \\\" +\\n            \\\"when a button input is performed.\\\")]\\n        SpawnTriggerType m_SpawnTriggerType;\\n\\n        public SpawnTriggerType spawnTriggerType\\n        {\\n            get => m_SpawnTriggerType;\\n            set => m_SpawnTriggerType = value;\\n        }\\n\\n        [SerializeField]\\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n\\n        public XRInputButtonReader spawnObjectInput\\n        {\\n            get => m_SpawnObjectInput;\\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\\n\\n        public bool blockSpawnWhenInteractorHasSelection\\n        {\\n            get => m_BlockSpawnWhenInteractorHasSelection;\\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\\n        }\\n\\n        bool m_AttemptSpawn;\\n        bool m_EverHadSelection;\\n\\n        void OnEnable()\\n        {\\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\\n        }\\n\\n        void OnDisable()\\n        {\\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\\n        }\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n                TryToSpawnObject();\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n\\n        void TryToSpawnObject()\\n        {\\n            if (EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1))\\n                return;\\n\\n            if (m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n            {\\n                if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                    return;\\n\\n                if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                    return;\\n\\n                m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n            }\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        public enum SpawnTriggerType\\n        {\\n            SelectAttempt,\\n            InputAction,\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n        XRRayInteractor m_ARInteractor;\\n\\n        public XRRayInteractor arInteractor\\n        {\\n            get => m_ARInteractor;\\n            set => m_ARInteractor = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n        ObjectSpawner m_ObjectSpawner;\\n\\n        public ObjectSpawner objectSpawner\\n        {\\n            get => m_ObjectSpawner;\\n            set => m_ObjectSpawner = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n        bool m_RequireHorizontalUpSurface;\\n\\n        public bool requireHorizontalUpSurface\\n        {\\n            get => m_RequireHorizontalUpSurface;\\n            set => m_RequireHorizontalUpSurface = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or when a button input is performed.\\\")]\\n        SpawnTriggerType m_SpawnTriggerType;\\n\\n        public SpawnTriggerType spawnTriggerType\\n        {\\n            get => m_SpawnTriggerType;\\n            set => m_SpawnTriggerType = value;\\n        }\\n\\n        [SerializeField]\\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n\\n        public XRInputButtonReader spawnObjectInput\\n        {\\n            get => m_SpawnObjectInput;\\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\\n\\n        public bool blockSpawnWhenInteractorHasSelection\\n        {\\n            get => m_BlockSpawnWhenInteractorHasSelection;\\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\\n        }\\n\\n        bool m_AttemptSpawn;\\n        bool m_EverHadSelection;\\n\\n        void OnEnable()\\n        {\\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\\n        }\\n\\n        void OnDisable()\\n        {\\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\\n        }\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    if (m_ObjectSpawner != null)\\n                    {\\n                        m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                    }\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752159470,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":3655,\"prompt_tokens\":2795,\"total_tokens\":6450,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"