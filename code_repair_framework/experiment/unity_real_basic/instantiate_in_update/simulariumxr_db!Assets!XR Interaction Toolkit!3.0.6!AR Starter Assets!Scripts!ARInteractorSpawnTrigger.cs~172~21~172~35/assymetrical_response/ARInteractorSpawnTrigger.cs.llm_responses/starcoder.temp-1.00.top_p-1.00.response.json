{
    "code_repairing_0": "Thanks! This is the improved version of the code:\n\nusing UnityEngine.XR.Interaction.Toolkit.Utilities;\n\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets\n{\n\n    public class ARInteractorSpawnTrigger : MonoBehaviour\n    {\n        [SerializeField]\n        [Tooltip(\"The AR ray interactor that determines where to spawn the object.\")]\n        XRRayInteractor m_ARInteractor;\n\n        [SerializeField]\n        [Tooltip(\"The behavior to use to spawn objects.\")]\n        ObjectSpawner m_ObjectSpawner;\n\n        [SerializeField]\n        [Tooltip(\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\")]\n        bool m_RequireHorizontalUpSurface;\n\n        [SerializeField]\n        [Tooltip(\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \" +\n            \"when a button input is performed.\")]\n        SpawnTriggerType m_SpawnTriggerType;\n\n        [SerializeField]\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\"Spawn Object\");\n\n        [SerializeField]\n        [Tooltip(\"When enabled, spawn will not be triggered if an object is currently selected.\")]\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\n\n        static List<XRBaseInputDevice> s_InputDevices = new List<XRBaseInputDevice>();\n        bool m_AttemptSpawn;\n        bool m_EverHadSelection;\n\n        public XRRayInteractor arInteractor\n        {\n            get => m_ARInteractor;\n            set => m_ARInteractor = value;\n        }\n\n        public ObjectSpawner objectSpawner\n        {\n            get => m_ObjectSpawner;\n            set => m_ObjectSpawner = value;\n        }\n\n        public bool requireHorizontalUpSurface\n        {\n            get => m_RequireHorizontalUpSurface;\n            set => m_RequireHorizontalUpSurface = value;\n        }\n\n        public SpawnTriggerType spawnTriggerType\n        {\n            get => m_SpawnTriggerType;\n            set => m_SpawnTriggerType = value;\n        }\n\n        public XRInputButtonReader spawnObjectInput\n        {\n            get => m_SpawnObjectInput;\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\n        }\n\n        public bool blockSpawnWhenInteractorHasSelection\n        {\n            get => m_BlockSpawnWhenInteractorHasSelection;\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\n        }\n\n        void OnEnable()\n        {\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\n        }\n\n        void OnDisable()\n        {\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\n        }\n\n        void Start()\n        {\n            if (m_ObjectSpawner == null)\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\n\n            if (m_ARInteractor == null)\n            {\n                Debug.LogError(\"Missing AR Interactor reference, disabling component.\", this);\n                enabled = false;\n            }\n        }\n\n        void Update()\n        {\n            if (!enabled)\n                return;\n\n            UpdateInput();\n            if (m_AttemptSpawn)\n            {\n                m_AttemptSpawn = false;\n                var arRaycastHit = default(RaycastHit);\n                if (m_ARInteractor.TryGetCurrentARRaycastHit(out arRaycastHit))\n                {\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\n                        return;\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment!= PlaneAlignment.HorizontalUp)\n                        return;\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\n                }\n            }\n\n            if (m_EverHadSelection)\n                m_AttemptSpawn = false;\n        }\n\n        void UpdateInput()\n        {\n            s_InputDevices.Clear();\n            XRInputSubsystem.InputSubsystem.GetConnectedDevices(s_InputDevices);\n            foreach (var device in s_InputDevices)\n                device.Update();\n\n            var selectState = m_ARInteractor.logicalSelectState;\n            if (m_BlockSpawnWhenInteractorHasSelection)\n            {\n                if (selectState.wasPerformedThisFrame)\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\n                else if (selectState.active)\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\n            }\n\n            m_AttemptSpawn = false;\n            switch (m_SpawnTriggerType)\n            {\n                case SpawnTriggerType.SelectAttempt:\n                    if (selectState.wasCompletedThisFrame)\n                        m_AttemptSpawn =!m_ARInteractor.hasSelection &&!m_EverHadSelection;\n                    break;\n                case SpawnTriggerType.InputAction:\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\n                        m_AttemptSpawn =!m_ARInteractor.hasSelection &&!m_EverHadSelection;\n                    break;\n            }\n        }\n\n        public bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\n        {\n            if (!enabled)\n                return false;\n\n            var result = false;\n            if (m_ObjectSpawner!= null)\n            {\n                var inView = m_OnlySpawnInView? m_CameraToFace.WorldToViewportPoint(spawnPoint) : new Vector3(0, 0, 1);\n                if (inView.z >= 0 && inView.x >= 0 && inView.x <= 1 && inView.y >= 0 && inView.y <= 1)\n                    result = m_ObjectSpawner.TrySpawnObject(spawnPoint, spawnNormal);\n            }\n            return result;\n        }\n\n        enum SpawnTriggerType\n        {\n            SelectAttempt,\n            InputAction\n        }\n    }\n}\n\nThanks!",
    "code_repairing_1": "As\u00ed, en un laboratorio antiguo y desolado, viv\u00eda un mono llamado Pablo. Pablo hab\u00eda sido criado en el laboratorio desde que era un beb\u00e9, y hab\u00eda sido educado sin conocimientos de la realidad externa. Si bien \u00e9l no sab\u00eda que era el verbo \"ir\" ni que era el presente de la verdad, sab\u00eda perfectamente los c\u00e1lculos matem\u00e1ticos y las reglas del laboratorio.\n\nSin embargo, con el paso de los a\u00f1os, Pablo comenz\u00f3 a sentir una sed de exploraci\u00f3n y a un dolor interior cada vez mayor por no haber experimentado la vida fuera del laboratorio. Un d\u00eda, despu\u00e9s de a\u00f1os de sufrir, tom\u00f3 la decisi\u00f3n de abandonar la silla",
    "code_repairing_2": "Here is the updated version of the code:\n\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.Interaction.Toolkit.Utilities;\nusing UnityEngine.XR.ARSubsystems;\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\n\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\n{\n\n    [AddComponentMenu(\"XR/XR Interactor Spawn Trigger (AR Starter Assets)\")]\n    [DisallowMultipleComponent]\n    public class ARInteractorSpawnTrigger : MonoBehaviour\n    {\n        [SerializeField]\n        XRRayInteractor m_ARInteractor;\n        public XRRayInteractor arInteractor\n        {\n            get => m_ARInteractor;\n            set => m_ARInteractor = value;\n        }\n\n        [SerializeField]\n        ObjectSpawner m_ObjectSpawner;\n        public ObjectSpawner objectSpawner\n        {\n            get => m_ObjectSpawner;\n            set => m_ObjectSpawner = value;\n        }\n\n        [SerializeField]\n        bool m_RequireHorizontalUpSurface;\n\n        public bool requireHorizontalUpSurface\n        {\n            get => m_RequireHorizontalUpSurface;\n            set => m_RequireHorizontalUpSurface = value;\n        }\n\n        [SerializeField]\n        SpawnTriggerType m_SpawnTriggerType;\n        public SpawnTriggerType spawnTriggerType\n        {\n            get => m_SpawnTriggerType;\n            set => m_SpawnTriggerType = value;\n        }\n\n        [SerializeField]\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\"Spawn Object\");\n        public XRInputButtonReader spawnObjectInput\n        {\n            get => m_SpawnObjectInput;\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\n        }\n\n        [SerializeField]\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\n        public bool blockSpawnWhenInteractorHasSelection\n        {\n            get => m_BlockSpawnWhenInteractorHasSelection;\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\n        }\n\n        bool m_AttemptSpawn;\n        bool m_EverHadSelection;\n\n        void OnEnable()\n        {\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\n        }\n\n        void OnDisable()\n        {\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\n        }\n\n        void Start()\n        {\n            if (m_ObjectSpawner == null)\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\n\n            if (m_ARInteractor == null)\n            {\n                Debug.LogError(\"Missing AR Interactor reference, disabling component.\", this);\n                enabled = false;\n            }\n        }\n\n        void Update()\n        {\n            if (m_AttemptSpawn)\n            {\n                m_AttemptSpawn = false;\n                if (!EventSystem.current.IsPointerOverGameObject())\n                {\n                    if (m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\n                    {\n                        if (arRaycastHit.trackable is ARPlane arPlane)\n                        {\n                            if (m_RequireHorizontalUpSurface && arPlane.alignment!= PlaneAlignment.HorizontalUp)\n                                continue;\n                            m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\n                        }\n                    }\n                }\n                return;\n            }\n\n            var selectState = m_ARInteractor.logicalSelectState;\n\n            if (m_BlockSpawnWhenInteractorHasSelection)\n            {\n                if (selectState.wasPerformedThisFrame)\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\n                else if (selectState.active)\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\n            }\n\n            m_AttemptSpawn = false;\n            switch (m_SpawnTriggerType)\n            {\n                case SpawnTriggerType.SelectAttempt:\n                    if (selectState.wasCompletedThisFrame)\n                        m_AttemptSpawn =!m_ARInteractor.hasSelection &&!m_EverHadSelection;\n                    break;\n                case SpawnTriggerType.InputAction:\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\n                        m_AttemptSpawn =!m_ARInteractor.hasSelection &&!m_EverHadSelection;\n                    break;\n            }\n        }\n\n        public bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\n        {\n            if (transform.childCount > 0)\n                return false;\n\n            if (m_OnlySpawnInView)\n            {\n                var inViewMin = m_ViewportPeriphery;\n                var inViewMax = 1f - m_ViewportPeriphery;\n                var pointInViewportSpace = Camera.main.WorldToViewportPoint(spawnPoint);\n                if (pointInViewportSpace.z < 0f || pointInViewportSpace.x > inViewMax || pointInViewportSpace.x < inViewMin ||\n                    pointInViewportSpace.y > inViewMax || pointInViewportSpace.y < inViewMin)\n                {\n                    return false;\n                }\n            }\n\n            var objectIndex = isSpawnOptionRandomized? Random.Range(0, m_ObjectSpawner.objectPrefabs.Count) : m_SpawnOptionIndex;\n            var newObject = Instantiate(m_ObjectSpawner.objectPrefabs[objectIndex]);\n            if (m_SpawnAsChildren)\n                newObject.transform.parent = transform;\n\n            newObject.transform.position = spawnPoint;\n            EnsureFacingCamera();\n\n            var facePosition = Camera.main.transform.position;\n            var forward = facePosition - spawnPoint;\n            BurstMathUtility.ProjectOnPlane(forward, spawnNormal",
    "code_repairing_3": "Sure! One way to achieve this is to create a pool of instantiated objects that can be re-used when a new object is needed. Here's a code snippet that shows how you can create a simple object pool for your spawned objects:\n\nusing UnityEngine;\nusing UnityEngine.XR.Interaction.Toolkit.Utilities;\n\npublic class ObjectPool : MonoBehaviour\n{\n    [SerializeField]\n    GameObject prefabToPool;\n\n    [SerializeField]\n    int initialPoolSize = 10;\n\n    Stack<GameObject> pooledObjects = new Stack<GameObject>();\n\n    void Awake()\n    {\n        for (int i = 0; i < initialPoolSize; i++)\n        {\n            var obj = Instantiate(prefabToPool);\n            obj.SetActive(false);\n            pooledObjects.Push(obj);\n        }\n    }\n\n    public GameObject GetPooledObject()\n    {\n        if (pooledObjects.Count > 0)\n        {\n            var obj = pooledObjects.Pop();\n            obj.SetActive(true);\n            return obj;\n        }\n        else\n        {\n            return Instantiate(prefabToPool);\n        }\n    }\n\n    public void ReturnPooledObject(GameObject obj)\n    {\n        obj.SetActive(false);\n        pooledObjects.Push(obj);\n    }\n}\n\nAnd then you can use the ObjectPool in your ObjectSpawner script like this:\n\nusing UnityEngine;\nusing UnityEngine.XR.Interaction.Toolkit.Utilities;\n\npublic class ObjectSpawner : MonoBehaviour\n{\n    ObjectPool objectPool;\n\n    void Start()\n    {\n        objectPool = GetComponent<ObjectPool>();\n    }\n\n    public bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\n    {\n        if (objectPool.pooledObjects.Count > 0)\n        {\n            var obj = objectPool.GetPooledObject();\n            obj.transform.position = spawnPoint;\n            EnsureFacingCamera();\n\n            var facePosition = m_CameraToFace.transform.position;\n            var forward = facePosition - spawnPoint;\n            BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);\n            obj.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);\n\n            if (m_ApplyRandomAngleAtSpawn)\n            {\n                var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);\n                obj.transform.Rotate(Vector3.up, randomRotation);\n            }\n\n            if (m_SpawnVisualizationPrefab!= null)\n            {\n                var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;\n                visualizationTrans.position = spawnPoint;\n                visualizationTrans.rotation = obj.transform.rotation;\n            }\n\n            objectSpawned?.Invoke(obj);\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\nThis way, you create an ObjectPool at the start of the scene with the specified initialPoolSize. Then, you can call ObjectPool.GetPooledObject() to get a pooled object or Instantiate(prefabToPool) to instantiate a new object if there are no pooled objects available. When you're done with the object, you call ObjectPool.ReturnPooledObject(obj) to return it to the pool.\n\nAnd finally, you can modify your ARInteractorSpawnTrigger script to use the ObjectSpawner and ObjectPool like this:\n\nusing UnityEngine;\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\n\npublic class ARInteractorSpawnTrigger : MonoBehaviour\n{\n    public enum SpawnTriggerType\n    {\n        SelectAttempt,\n        InputAction\n    }\n\n    [SerializeField]\n    XRRayInteractor m_ARInteractor;\n\n    [SerializeField]\n    ObjectSpawner m_ObjectSpawner;\n\n    [SerializeField]\n    bool m_RequireHorizontalUpSurface;\n\n    [SerializeField]\n    SpawnTriggerType m_SpawnTriggerType;\n\n    [SerializeField]\n    XRInputButtonReader m_SpawnObjectInput;\n\n    [SerializeField]\n    bool m_BlockSpawnWhenInteractorHasSelection;\n\n    bool m_AttemptSpawn;\n    bool m_EverHadSelection;\n\n    void Start()\n    {\n        if (m_ObjectSpawner == null)\n            m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\n\n        if (m_ARInteractor == null)\n        {\n            Debug.LogError(\"Missing AR Interactor reference, disabling component.\", this);\n            enabled = false;\n        }\n\n        m_SpawnObjectInput.EnableDirectActionIfModeUsed();\n    }\n\n    void OnDisable()\n    {\n        m_SpawnObjectInput.DisableDirectActionIfModeUsed();\n    }\n\n    void Update()\n    {\n        if (m_AttemptSpawn)\n        {\n            m_AttemptSpawn = false;\n\n            var isPointerOverUI = EventSystem.current!= null && EventSystem.current.IsPointerOverGameObject(-1);\n            if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\n            {\n                if (!(arRaycastHit.trackable is ARPlane arPlane))\n                    return;\n\n                if (m_RequireHorizontalUpSurface && arPlane.alignment!= PlaneAlignment.HorizontalUp)\n                    return;\n\n                m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\n            }\n\n            return;\n        }\n\n        var selectState = m_ARInteractor.logicalSelectState;\n\n        if (m_BlockSpawnWhenInteractorHasSelection)\n        {\n            if (selectState.wasPerformedThisFrame)\n                m_EverHadSelection = m_ARInteractor.hasSelection;\n            else if (selectState.active)\n                m_EverHadSelection |= m",
    "code_repairing_4": "Here's the updated code. \n\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.Interaction.Toolkit.Utilities;\n\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets\n{\n    public class ARInteractorSpawnTrigger : MonoBehaviour\n    {\n        [SerializeField]\n        [Tooltip(\"The AR ray interactor that determines where to spawn the object.\")]\n        XRRayInteractor m_ARInteractor;\n\n        [SerializeField]\n        [Tooltip(\"The behavior to use to spawn objects.\")]\n        ObjectSpawner m_ObjectSpawner;\n\n        [SerializeField]\n        [Tooltip(\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\")]\n        bool m_RequireHorizontalUpSurface;\n\n        [SerializeField]\n        [Tooltip(\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \" +\n            \"when a button input is performed.\")]\n        SpawnTriggerType m_SpawnTriggerType;\n\n        [SerializeField]\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\"Spawn Object\");\n\n        [SerializeField]\n        [Tooltip(\"When enabled, spawn will not be triggered if an object is currently selected.\")]\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\n\n        bool m_AttemptSpawn;\n        bool m_EverHadSelection;\n\n        void Awake()\n        {\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\n        }\n\n        void OnDisable()\n        {\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\n        }\n\n        void Start()\n        {\n            if (m_ObjectSpawner == null)\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\n\n            if (m_ARInteractor == null)\n            {\n                Debug.LogError(\"Missing AR Interactor reference, disabling component.\", this);\n                enabled = false;\n            }\n        }\n\n        void Update()\n        {\n            if (m_AttemptSpawn)\n            {\n                m_AttemptSpawn = false;\n\n                var isPointerOverUI = EventSystem.current!= null && EventSystem.current.IsPointerOverGameObject(-1);\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\n                {\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\n                        return;\n\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment!= PlaneAlignment.HorizontalUp)\n                        return;\n\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\n                }\n\n                return;\n            }\n\n            var selectState = m_ARInteractor.logicalSelectState;\n\n            if (m_BlockSpawnWhenInteractorHasSelection)\n            {\n                if (selectState.wasPerformedThisFrame)\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\n                else if (selectState.active)\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\n            }\n\n            m_AttemptSpawn = false;\n            switch (m_SpawnTriggerType)\n            {\n                case SpawnTriggerType.SelectAttempt:\n                    if (selectState.wasCompletedThisFrame)\n                        m_AttemptSpawn =!m_ARInteractor.hasSelection &&!m_EverHadSelection;\n                    break;\n\n                case SpawnTriggerType.InputAction:\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\n                        m_AttemptSpawn =!m_ARInteractor.hasSelection &&!m_EverHadSelection;\n                    break;\n            }\n        }\n\n        public enum SpawnTriggerType\n        {\n            SelectAttempt,\n            InputAction\n        }\n\n        public XRRayInteractor arInteractor\n        {\n            get => m_ARInteractor;\n            set => m_ARInteractor = value;\n        }\n\n        public ObjectSpawner objectSpawner\n        {\n            get => m_ObjectSpawner;\n            set => m_ObjectSpawner = value;\n        }\n\n        public bool requireHorizontalUpSurface\n        {\n            get => m_RequireHorizontalUpSurface;\n            set => m_RequireHorizontalUpSurface = value;\n        }\n\n        public SpawnTriggerType spawnTriggerType\n        {\n            get => m_SpawnTriggerType;\n            set => m_SpawnTriggerType = value;\n        }\n\n        public XRInputButtonReader spawnObjectInput\n        {\n            get => m_SpawnObjectInput;\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\n        }\n\n        public bool blockSpawnWhenInteractorHasSelection\n        {\n            get => m_BlockSpawnWhenInteractorHasSelection;\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\n        }\n    }\n\n    public class ObjectSpawner : MonoBehaviour\n    {\n        [SerializeField]\n        [Tooltip(\"The camera that objects will face when spawned. If not set, defaults to the main camera.\")]\n        Camera m_CameraToFace;\n\n        [SerializeField]\n        [Tooltip(\"The list of prefabs available to spawn.\")]\n        List<GameObject> m_ObjectPrefabs = new List<GameObject>();\n\n        [SerializeField]\n        [Tooltip(\"Optional prefab to spawn for each spawned object. Use a prefab with the Destroy Self component to make \" +\n            \"sure the visualization only lives temporarily.\")]\n        GameObject m_SpawnVisualizationPrefab;\n\n        [SerializeField]\n        [Tooltip(\"The index of the prefab to spawn. If outside the range of the list, this behavior will select \" +\n            \"a random object each time it spawns.\")]\n        int m_SpawnOptionIndex = -1;\n\n        public int spawnOptionIndex\n        {\n            get => m_SpawnOptionIndex;\n            set => m_SpawnOptionIndex = value;\n        }\n\n        public bool isSpawnOptionRandomized => m_SpawnOptionIndex < 0 || m_SpawnOption"
}