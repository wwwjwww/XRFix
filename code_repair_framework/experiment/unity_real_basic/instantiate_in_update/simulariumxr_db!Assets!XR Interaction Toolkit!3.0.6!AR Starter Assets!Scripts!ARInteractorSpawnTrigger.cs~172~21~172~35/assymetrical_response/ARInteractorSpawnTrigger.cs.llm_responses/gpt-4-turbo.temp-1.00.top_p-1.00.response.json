"{\"id\":\"chatcmpl-B4fseN9hrfUqq8Wp3zrqTTb8q1QBt\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        public enum SpawnTriggerType\\n        {\\n            SelectAttempt,\\n            InputAction,\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n        XRRayInteractor m_ARInteractor;\\n\\n        public XRRayInteractor arInteractor\\n        {\\n            get => m_ARInteractor;\\n            set => m_ARInteractor = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n        ObjectSpawner m_ObjectSpawner;\\n\\n        public ObjectSpawner objectSpawner\\n        {\\n            get => m_ObjectSpawner;\\n            set => m_ObjectSpawner = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n        bool m_RequireHorizontalUpSurface;\\n\\n        public bool requireHorizontalUpSurface\\n        {\\n            get => m_RequireHorizontalUpSurface;\\n            set => m_RequireHorizontalUpSurface = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or when a button input is performed.\\\")]\\n        SpawnTriggerType m_SpawnTriggerType;\\n\\n        public SpawnTriggerType spawnTriggerType\\n        {\\n            get => m_SpawnTriggerType;\\n            set => m_SpawnTriggerType = value;\\n        }\\n\\n        [SerializeField]\\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n\\n        public XRInputButtonReader spawnObjectInput\\n        {\\n            get => m_SpawnObjectInput;\\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\\n\\n        public bool blockSpawnWhenInteractorHasSelection\\n        {\\n            get => m_BlockSpawnWhenInteractorHasSelection;\\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\\n        }\\n\\n        bool m_AttemptSpawn;\\n        bool m_EverHadSelection;\\n\\n        void OnEnable()\\n        {\\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\\n        }\\n\\n        void OnDisable()\\n        {\\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\\n        }\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                if (!EventSystem.current.IsPointerOverGameObject(-1) && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (arRaycastHit.trackable is ARPlane arPlane)\\n                    {\\n                        if (!m_RequireHorizontalUpSurface || arPlane.alignment == PlaneAlignment.HorizontalUp)\\n                        {\\n                            m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                        }\\n                    }\\n                }\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n        m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n        m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n    if (m_ARInteractor == null)\\n    {\\n        Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n        enabled = false;\\n    }\\n\\n    // Pre-instantiate objects or build an object pool here\\n    InitializeObjectPool();\\n}\\n\\nvoid InitializeObjectPool()\\n{\\n    // Example: Pre-instantiate some objects to build an object pool\\n    if (m_ObjectSpawner != null && m_ObjectSpawner.objectPrefabs.Count > 0)\\n    {\\n        for (int i = 0; i < m_ObjectSpawner.objectPrefabs.Count; i++)\\n        {\\n            // Create a pool of objects for each prefab. This is just an example and should be adjusted as needed.\\n            GameObject obj = Instantiate(m_ObjectSpawner.objectPrefabs[i]);\\n            obj.SetActive(false); // Deactivate to use later\\n        }\\n    }\\n}\\n\\nvoid Update()\\n{\\n    if (m_AttemptSpawn)\\n    {\\n        m_AttemptSpawn = false;\\n\\n        var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n        if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n        {\\n            if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                return;\\n\\n            if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                return;\\n\\n            // Use an object from the pool instead of instantiating a new one\\n            TrySpawnObjectFromPool(arRaycastHit.pose.position, arPlane.normal);\\n        }\\n\\n        return;\\n    }\\n\\n    var selectState = m_ARInteractor.logicalSelectState;\\n\\n    if (m_BlockSpawnWhenInteractorHasSelection)\\n    {\\n        if (selectState.wasPerformedThisFrame)\\n            m_EverHadSelection = m_ARInteractor.hasSelection;\\n        else if (selectState.active)\\n            m_EverHadSelection |= m_ARInteractor.hasSelection;\\n    }\\n\\n    m_AttemptSpawn = false;\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (selectState.wasCompletedThisFrame)\\n                m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n    }\\n}\\n\\nvoid TrySpawnObjectFromPool(Vector3 spawnPoint, Vector3 spawnNormal)\\n{\\n    // Example: Activate an object from the pool using the spawn point and normal\\n    foreach (Transform child in transform)\\n    {\\n        if (!child.gameObject.activeInHierarchy)\\n        {\\n            child.position = spawnPoint;\\n            child.rotation = Quaternion.LookRotation(-spawnNormal, Vector3.up);\\n            child.gameObject.SetActive(true);\\n\\n            // Optionally adjust rotation or other properties here\\n\\n            return;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        // ... other parts of the class ...\\n\\n        Queue<GameObject> objectPool = new Queue<GameObject>();\\n\\n        void Start()\\n        {\\n            // Initialize the object pool\\n            if (m_ObjectSpawner != null)\\n            {\\n                int poolSize = m_ObjectSpawner.objectPrefabs.Count * 3; // Arbitrary pool size, adjust as needed\\n                for (int i = 0; i < poolSize; i++)\\n                {\\n                    GameObject obj = Instantiate(m_ObjectSpawner.objectPrefabs[Random.Range(0, m_ObjectSpawner.objectPrefabs.Count)]);\\n                    obj.SetActive(false);\\n                    objectPool.Enqueue(obj);\\n                }\\n            }\\n\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    TrySpawnFromPool(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n\\n                return;\\n            }\\n\\n            // ... rest of the update logic ...\\n\\n        }\\n\\n        bool TrySpawnFromPool(Vector3 spawnPoint, Vector3 spawnNormal)\\n        {\\n            if (objectPool.Count == 0)\\n            {\\n                return false;\\n            }\\n\\n            GameObject newObject = objectPool.Dequeue();\\n            newObject.SetActive(true);\\n\\n            newObject.transform.position = spawnPoint;\\n            EnsureFacingCamera();\\n\\n            var facePosition = m_CameraToFace.transform.position;\\n            var forward = facePosition - spawnPoint;\\n            BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);\\n            newObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);\\n\\n            if (m_ApplyRandomAngleAtSpawn)\\n            {\\n                var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);\\n                newObject.transform.Rotate(Vector3.up, randomRotation);\\n            }\\n\\n            if (m_SpawnVisualizationPrefab != null)\\n            {\\n                var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;\\n                visualizationTrans.position = spawnPoint;\\n                visualizationTrans.rotation = newObject.transform.rotation;\\n            }\\n\\n            objectSpawned?.Invoke(newObject);\\n            return true;\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Fixed code for ARInteractorSpawnTrigger.cs\\n\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        // ... Other class code ...\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    StartCoroutine(TrySpawnObjectDelayed(arRaycastHit.pose.position, arPlane.normal));\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n\\n        private IEnumerator TrySpawnObjectDelayed(Vector3 position, Vector3 normal)\\n        {\\n            yield return null; // Delay to skip the current frame\\n\\n            // Instantiate the object from object pool or direct instantiation logic\\n            m_ObjectSpawner.TrySpawnObject(position, normal);\\n        }\\n    }\\n}\\n#endif\\n```\\n\\nThis fixed code moves the instantiation logic from the `Update()` method to a coroutine, allowing for the deferred execution of the object spawning logic.\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n#if AR_FOUNDATION_PRESENT\\nusing UnityEngine.EventSystems;\\nusing UnityEngine.XR.ARFoundation;\\nusing UnityEngine.XR.ARSubsystems;\\nusing UnityEngine.XR.Interaction.Toolkit.Inputs.Readers;\\nusing UnityEngine.XR.Interaction.Toolkit.Interactors;\\nusing UnityEngine.XR.Interaction.Toolkit.Samples.StarterAssets;\\n\\nnamespace UnityEngine.XR.Interaction.Toolkit.Samples.ARStarterAssets\\n{\\n    public class ARInteractorSpawnTrigger : MonoBehaviour\\n    {\\n        public enum SpawnTriggerType\\n        {\\n            SelectAttempt,\\n            InputAction,\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n        XRRayInteractor m_ARInteractor;\\n\\n        public XRRayInteractor arInteractor\\n        {\\n            get => m_ARInteractor;\\n            set => m_ARInteractor = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n        ObjectSpawner m_ObjectSpawner;\\n\\n        public ObjectSpawner objectSpawner\\n        {\\n            get => m_ObjectSpawner;\\n            set => m_ObjectSpawner = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n        bool m_RequireHorizontalUpSurface;\\n\\n        public bool requireHorizontalUpSurface\\n        {\\n            get => m_RequireHorizontalUpSurface;\\n            set => m_RequireHorizontalUpSurface = value;\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \\\" +\\n            \\\"when a button input is performed.\\\")]\\n        SpawnTriggerType m_SpawnTriggerType;\\n\\n        public SpawnTriggerType spawnTriggerType\\n        {\\n            get => m_SpawnTriggerType;\\n            set => m_SpawnTriggerType = value;\\n        }\\n\\n        [SerializeField]\\n        XRInputButtonReader m_SpawnObjectInput = new XRInputButtonReader(\\\"Spawn Object\\\");\\n\\n        public XRInputButtonReader spawnObjectInput\\n        {\\n            get => m_SpawnObjectInput;\\n            set => XRInputReaderUtility.SetInputProperty(ref m_SpawnObjectInput, value, this);\\n        }\\n\\n        [SerializeField]\\n        [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n        bool m_BlockSpawnWhenInteractorHasSelection = true;\\n\\n        public bool blockSpawnWhenInteractorHasSelection\\n        {\\n            get => m_BlockSpawnWhenInteractorHasSelection;\\n            set => m_BlockSpawnWhenInteractorHasSelection = value;\\n        }\\n\\n        bool m_AttemptSpawn;\\n        bool m_EverHadSelection;\\n\\n        void OnEnable()\\n        {\\n            m_SpawnObjectInput.EnableDirectActionIfModeUsed();\\n        }\\n\\n        void OnDisable()\\n        {\\n            m_SpawnObjectInput.DisableDirectActionIfModeUsed();\\n        }\\n\\n        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindAnyObjectByType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n    }\\n}\\n#endif\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740454000,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_b705f0c291\",\"usage\":{\"completion_tokens\":3957,\"prompt_tokens\":2576,\"total_tokens\":6533,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"