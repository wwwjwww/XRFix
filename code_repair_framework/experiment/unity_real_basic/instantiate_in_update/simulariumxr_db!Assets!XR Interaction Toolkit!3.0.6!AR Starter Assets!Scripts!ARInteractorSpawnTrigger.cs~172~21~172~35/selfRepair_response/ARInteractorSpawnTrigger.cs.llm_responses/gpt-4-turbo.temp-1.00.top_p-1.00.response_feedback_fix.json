// FIXED CODE:

using System.Collections.Generic;
using UnityEngine;

public class ARInteractorSpawnTrigger : MonoBehaviour
{
    private List<GameObject> m_ObjectPool = new List<GameObject>();
    private const int PoolSize = 10;

    void Start()
    {
        // Initialize the object pool with inactive objects
        for (int i = 0; i < PoolSize; i++)
        {
            var obj = InstantiateObject();
            obj.SetActive(false);
            m_ObjectPool.Add(obj);
        }
    }

    private GameObject InstantiateObject()
    {
        // Create an instance of the object
        // Replace `ObjectPrefab` with the actual GameObject you are spawning
        GameObject newObject = Instantiate(ObjectPrefab);
        return newObject;
    }

    private GameObject GetPooledObject()
    {
        // Find an inactive object in the pool and return it
        foreach (var obj in m_ObjectPool)
        {
            if (!obj.activeInHierarchy)
            {
                return obj;
            }
        }

        // If no inactive object is found, expand the pool
        var newObj = InstantiateObject();
        newObj.SetActive(false);
        m_ObjectPool.Add(newObj);
        return newObj;
    }

    void OnEnable()
    {
        // Subscribe to some event or input action
        SpawnEvent += HandleSpawnEvent;
    }

    void OnDisable()
    {
        // Unsubscribe from the event or input action
        SpawnEvent -= HandleSpawnEvent;
    }

    private void HandleSpawnEvent(Vector3 spawnPosition, Vector3 spawnNormal)
    {
        // Use a pooled object instead of instantiating a new one
        var pooledObject = GetPooledObject();
        pooledObject.transform.position = spawnPosition;

        var facePosition = m_CameraToFace.transform.position;
        var forward = facePosition - spawnPosition;
        BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);
        pooledObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);

        pooledObject.SetActive(true);

        // Optional: Apply additional behaviors like random angle
        if (m_ApplyRandomAngleAtSpawn)
        {
            var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);
            pooledObject.transform.Rotate(Vector3.up, randomRotation);
        }
    }

    // Example event declaration, replace it with the actual events you have
    public event Action<Vector3, Vector3> SpawnEvent;
    public GameObject ObjectPrefab;
}
