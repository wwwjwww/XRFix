"{\"id\":\"chatcmpl-B2TuGZneGCupaCnlh2jAcgQNnEyrm\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"        void Start()\\n        {\\n            if (m_ObjectSpawner == null)\\n#if UNITY_2023_1_OR_NEWER\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#else\\n                m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n#endif\\n\\n            if (m_ARInteractor == null)\\n            {\\n                Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n                enabled = false;\\n            }\\n        }\\n\\n        void FixedUpdate()\\n        {\\n            var selectState = m_ARInteractor.selectInteractionState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasActivatedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasDeactivatedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.wasActivatedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n            }\\n        }\\n\\n        public class ARInteractorSpawnTrigger : MonoBehaviour\\n        {\\n            public enum SpawnTriggerType\\n            {\\n                SelectAttempt,\\n                InputAction,\\n            }\\n\\n            [SerializeField]\\n            [Tooltip(\\\"The AR ray interactor that determines where to spawn the object.\\\")]\\n            public XRRayInteractor arInteractor;\\n\\n            [SerializeField]\\n            [Tooltip(\\\"The behavior to use to spawn objects.\\\")]\\n            public ObjectSpawner objectSpawner;\\n\\n            [SerializeField]\\n            [Tooltip(\\\"Whether to require that the AR Interactor hits an AR Plane with a horizontal up alignment in order to spawn anything.\\\")]\\n            public bool requireHorizontalUpSurface;\\n\\n            [SerializeField]\\n            [Tooltip(\\\"The type of trigger to use to spawn an object, either when the Interactor's select action occurs or \\\" +\\n                \\\"when a button input is performed.\\\")]\\n            public SpawnTriggerType spawnTriggerType;\\n\\n            [SerializeField]\\n            public XRInputActionReader spawnObjectInput = new XRInputActionReader();\\n\\n            [SerializeField]\\n            [Tooltip(\\\"When enabled, spawn will not be triggered if an object is currently selected.\\\")]\\n            public bool blockSpawnWhenInteractorHasSelection;\\n\\n            bool m_AttemptSpawn;\\n            bool m_EverHadSelection;\\n\\n            void OnEnable()\\n            {\\n                m_SpawnObjectInput.Enable();\\n            }\\n\\n            void OnDisable()\\n            {\\n                m_SpawnObjectInput.Disable();\\n            }\\n        }\\n    }\\n}\\n\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    if (m_ObjectSpawner == null)\\n    {\\n        m_ObjectSpawner = FindObjectOfType<ObjectSpawner>();\\n    }\\n\\n    if (m_ARInteractor == null)\\n    {\\n        Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n        enabled = false;\\n    }\\n}\\n```\\n```csharp\\nvoid Awake()\\n{\\n    EnsureFacingCamera();\\n}\\n```\\n```csharp\\npublic bool TrySpawnObject(Vector3 spawnPoint, Vector3 spawnNormal)\\n{\\n    if (transform.childCount > 0)\\n    {\\n        return false;\\n    }\\n\\n    if (m_OnlySpawnInView)\\n    {\\n        var inViewMin = m_ViewportPeriphery;\\n        var inViewMax = 1f - m_ViewportPeriphery;\\n        var pointInViewportSpace = cameraToFace.WorldToViewportPoint(spawnPoint);\\n        if (pointInViewportSpace.z < 0f || pointInViewportSpace.x > inViewMax || pointInViewportSpace.x < inViewMin ||\\n            pointInViewportSpace.y > inViewMax || pointInViewportSpace.y < inViewMin)\\n        {\\n            return false;\\n        }\\n    }\\n\\n    var objectIndex = isSpawnOptionRandomized ? Random.Range(0, m_ObjectPrefabs.Count) : m_SpawnOptionIndex;\\n    var newObject = Instantiate(m_ObjectPrefabs[objectIndex]);\\n    if (m_SpawnAsChildren)\\n    {\\n        newObject.transform.parent = transform;\\n    }\\n\\n    newObject.transform.position = spawnPoint;\\n    EnsureFacingCamera();\\n\\n    var facePosition = m_CameraToFace.transform.position;\\n    var forward = facePosition - spawnPoint;\\n    BurstMathUtility.ProjectOnPlane(forward, spawnNormal, out var projectedForward);\\n    newObject.transform.rotation = Quaternion.LookRotation(projectedForward, spawnNormal);\\n\\n    if (m_ApplyRandomAngleAtSpawn)\\n    {\\n        var randomRotation = Random.Range(-m_SpawnAngleRange, m_SpawnAngleRange);\\n        newObject.transform.Rotate(Vector3.up, randomRotation);\\n    }\\n\\n    if (m_SpawnVisualizationPrefab != null)\\n    {\\n        var visualizationTrans = Instantiate(m_SpawnVisualizationPrefab).transform;\\n        visualizationTrans.position = spawnPoint;\\n        visualizationTrans.rotation = newObject.transform.rotation;\\n    }\\n\\n    objectSpawned?.Invoke(newObject);\\n    return true;\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void FixedUpdate()\\n        {\\n            if (m_AttemptSpawn)\\n            {\\n                m_AttemptSpawn = false;\\n\\n                var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n                if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n                {\\n                    if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                        return;\\n\\n                    if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                        return;\\n\\n                    m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n                }\\n\\n                return;\\n            }\\n\\n            var selectState = m_ARInteractor.logicalSelectState;\\n\\n            if (m_BlockSpawnWhenInteractorHasSelection)\\n            {\\n                if (selectState.wasPerformedThisFrame)\\n                    m_EverHadSelection = m_ARInteractor.hasSelection;\\n                else if (selectState.active)\\n                    m_EverHadSelection |= m_ARInteractor.hasSelection;\\n            }\\n\\n            m_AttemptSpawn = false;\\n            switch (m_SpawnTriggerType)\\n            {\\n                case SpawnTriggerType.SelectAttempt:\\n                    if (selectState.wasCompletedThisFrame)\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n\\n                case SpawnTriggerType.InputAction:\\n                    if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                        m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n                    break;\\n            }\\n        }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    if (m_ObjectSpawner == null)\\n    {\\n        m_ObjectSpawner = GetComponentInChildren<ObjectSpawner>();\\n    }\\n\\n    if (m_ARInteractor == null)\\n    {\\n        Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n        enabled = false;\\n    }\\n}\\n\\nvoid FixedUpdate()\\n{\\n    if (m_AttemptSpawn)\\n    {\\n        m_AttemptSpawn = false;\\n\\n        var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n        if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n        {\\n            if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                return;\\n\\n            if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                return;\\n\\n            m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n        }\\n\\n        return;\\n    }\\n\\n    var selectState = m_ARInteractor.logicalSelectState;\\n\\n    if (m_BlockSpawnWhenInteractorHasSelection)\\n    {\\n        if (selectState.wasPerformedThisFrame)\\n            m_EverHadSelection = m_ARInteractor.hasSelection;\\n        else if (selectState.active)\\n            m_EverHadSelection |= m_ARInteractor.hasSelection;\\n    }\\n\\n    m_AttemptSpawn = false;\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (selectState.wasCompletedThisFrame)\\n                m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.ReadWasPerformedThisFrame())\\n                m_AttemptSpawn = !m_ARInteractor.hasSelection && !m_EverHadSelection;\\n            break;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    if (m_ObjectSpawner == null)\\n    {\\n        m_ObjectSpawner = GetComponentInChildren<ObjectSpawner>();\\n    }\\n\\n    if (m_ARInteractor == null)\\n    {\\n        Debug.LogError(\\\"Missing AR Interactor reference, disabling component.\\\", this);\\n        enabled = false;\\n    }\\n}\\n\\nvoid FixedUpdate()\\n{\\n    if (m_AttemptSpawn)\\n    {\\n        m_AttemptSpawn = false;\\n\\n        var isPointerOverUI = EventSystem.current != null && EventSystem.current.IsPointerOverGameObject(-1);\\n        if (!isPointerOverUI && m_ARInteractor.TryGetCurrentARRaycastHit(out var arRaycastHit))\\n        {\\n            if (!(arRaycastHit.trackable is ARPlane arPlane))\\n                return;\\n\\n            if (m_RequireHorizontalUpSurface && arPlane.alignment != PlaneAlignment.HorizontalUp)\\n                return;\\n\\n            m_ObjectSpawner.TrySpawnObject(arRaycastHit.pose.position, arPlane.normal);\\n        }\\n    }\\n\\n    var selectState = m_ARInteractor.selectInteractionState;\\n\\n    if (m_BlockSpawnWhenInteractorHasSelection)\\n    {\\n        if (selectState.wasJustPressed)\\n            m_EverHadSelection = m_ARInteractor.selectTarget != null;\\n        else if (selectState.isActive)\\n            m_EverHadSelection |= m_ARInteractor.selectTarget != null;\\n    }\\n\\n    m_AttemptSpawn = false;\\n    switch (m_SpawnTriggerType)\\n    {\\n        case SpawnTriggerType.SelectAttempt:\\n            if (selectState.wasJustReleased)\\n                m_AttemptSpawn = m_ARInteractor.selectTarget == null && !m_EverHadSelection;\\n            break;\\n\\n        case SpawnTriggerType.InputAction:\\n            if (m_SpawnObjectInput.wasJustPressed)\\n                m_AttemptSpawn = m_ARInteractor.selectTarget == null && !m_EverHadSelection;\\n            break;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739931316,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_0165350fbb\",\"usage\":{\"completion_tokens\":2307,\"prompt_tokens\":2529,\"total_tokens\":4836,\"completion_tokens_details\":null,\"prompt_tokens_details\":null}}"