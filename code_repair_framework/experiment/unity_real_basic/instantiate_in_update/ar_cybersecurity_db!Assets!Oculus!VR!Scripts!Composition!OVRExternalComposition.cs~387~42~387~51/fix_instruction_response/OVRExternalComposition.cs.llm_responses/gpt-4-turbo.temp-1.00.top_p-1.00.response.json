"{\"id\":\"chatcmpl-B1sRqu4SR02MVNoHB3jOcWz5GOyAC\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Fixed the camera instantiation to not occur in the Update method by using object pooling\\nprivate class CameraPool\\n{\\n    public GameObject backgroundCameraGameObject;\\n    public Camera backgroundCamera;\\n    public GameObject foregroundCameraGameObject;\\n    public Camera foregroundCamera;\\n}\\n\\n// Create a pool of cameras based on maximum number required\\nprivate CameraPool CreateCameraPool(GameObject mainCameraGameObject, OVRMixedRealityCaptureConfiguration configuration)\\n{\\n    CameraPool cameraPool = new CameraPool();\\n    \\n    // Instantiate the background camera\\n    if (configuration.instantiateMixedRealityCameraGameObject != null)\\n    {\\n        cameraPool.backgroundCameraGameObject =\\n            configuration.instantiateMixedRealityCameraGameObject(mainCameraGameObject, OVRManager.MrcCameraType.Background);\\n    }\\n    else\\n    {\\n        cameraPool.backgroundCameraGameObject = Object.Instantiate(mainCameraGameObject);\\n    }\\n    \\n    cameraPool.backgroundCamera = cameraPool.backgroundCameraGameObject.GetComponent<Camera>();\\n\\n    // Instantiate the foreground camera\\n    if (configuration.instantiateMixedRealityCameraGameObject != null)\\n    {\\n        cameraPool.foregroundCameraGameObject =\\n            configuration.instantiateMixedRealityCameraGameObject(mainCameraGameObject, OVRManager.MrcCameraType.Foreground);\\n    }\\n    else\\n    {\\n        cameraPool.foregroundCameraGameObject = Object.Instantiate(mainCameraGameObject);\\n    }\\n    \\n    cameraPool.foregroundCamera = cameraPool.foregroundCameraGameObject.GetComponent<Camera>();\\n\\n    return cameraPool;\\n}\\n\\nprivate void Start()\\n{\\n    // Initialize camera pool once at start\\n    CameraPool cameraPool = CreateCameraPool(mainCamera.gameObject, configuration);\\n\\n    // Set up the camera objects\\n    RefreshCameraObjects(gameObject, mainCamera, configuration, cameraPool);\\n}\\n\\nprivate void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n    OVRMixedRealityCaptureConfiguration configuration, CameraPool cameraPool)\\n{\\n    if (mainCamera.gameObject != previousMainCameraObject)\\n    {\\n        Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n            mainCamera.gameObject.name);\\n\\n        OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\\n        backgroundCamera = null;\\n        OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\\n        foregroundCamera = null;\\n\\n        RefreshCameraRig(parentObject, mainCamera);\\n\\n        Debug.Assert(cameraPool.backgroundCameraGameObject != null);\\n        \\n        cameraPool.backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n        cameraPool.backgroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (cameraPool.backgroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(cameraPool.backgroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n        \\n        if (cameraPool.backgroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(cameraPool.backgroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        cameraPool.backgroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var backgroundCamData = cameraPool.backgroundCamera.GetUniversalAdditionalCameraData();\\n        if (backgroundCamData != null)\\n        {\\n            backgroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        cameraPool.backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        cameraPool.backgroundCamera.depth = 99990.0f;\\n        cameraPool.backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n        cameraPool.backgroundCamera.cullingMask = (cameraPool.backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n            configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n        cameraPool.backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        if (!renderCombinedFrame)\\n        {\\n            cameraPool.backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        Debug.Assert(cameraPool.foregroundCameraGameObject != null);\\n        \\n        cameraPool.foregroundCameraGameObject.name = \\\"OculusMRC_ForgroundCamera\\\";\\n        cameraPool.foregroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (cameraPool.foregroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(cameraPool.foregroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n        \\n        if (cameraPool.foregroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(cameraPool.foregroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        cameraPool.foregroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var foregroundCamData = cameraPool.foregroundCamera.GetUniversalAdditionalCameraData();\\n        if (foregroundCamData != null)\\n        {\\n            foregroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        cameraPool.foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        cameraPool.foregroundCamera.depth =\\n            cameraPool.backgroundCamera.depth + 1.0f;\\n        cameraPool.foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n        cameraPool.foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n        cameraPool.foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n        cameraPool.foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n        cameraPool.foregroundCamera.cullingMask = (cameraPool.foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n            configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n        if (renderCombinedFrame)\\n        {\\n            cameraPool.foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        }\\n        else\\n        {\\n            cameraPool.foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n            cameraPool.foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        previousMainCameraObject = mainCamera.gameObject;\\n\\n        // Assign to member variables\\n        backgroundCameraGameObject = cameraPool.backgroundCameraGameObject;\\n        backgroundCamera = cameraPool.backgroundCamera;\\n        foregroundCameraGameObject = cameraPool.foregroundCameraGameObject;\\n        foregroundCamera = cameraPool.foregroundCamera;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing UnityEngine;\\nusing System.Collections.Generic;\\nusing System.Threading;\\nusing UnityEngine.Rendering;\\nusing Object = UnityEngine.Object;\\nusing UnityEngine.Rendering.Universal;\\n\\n// (Lines unchanged)\\n\\npublic class OVRExternalComposition : MonoBehaviour\\n{\\n    // Add fields to hold the object pool\\n    private GameObject pooledBackgroundCameraGameObject;\\n    private GameObject pooledForegroundCameraGameObject;\\n\\n    // (Other class implementations)\\n\\n    private void Awake()\\n    {\\n        // Initialize and prepare pooled objects here\\n        if (backgroundCameraGameObject == null)\\n        {\\n            pooledBackgroundCameraGameObject = new GameObject(\\\"Pooled_OculusMRC_BackgroundCamera\\\");\\n            pooledBackgroundCameraGameObject.SetActive(false);\\n        }\\n\\n        if (foregroundCameraGameObject == null)\\n        {\\n            pooledForegroundCameraGameObject = new GameObject(\\\"Pooled_OculusMRC_ForegroundCamera\\\");\\n            pooledForegroundCameraGameObject.SetActive(false);\\n        }\\n    }\\n\\n    private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (mainCamera.gameObject != previousMainCameraObject)\\n        {\\n            Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n                mainCamera.gameObject.name);\\n\\n            OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\\n            backgroundCamera = null;\\n            OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\\n            foregroundCamera = null;\\n\\n            RefreshCameraRig(parentObject, mainCamera);\\n\\n            Debug.Assert(backgroundCameraGameObject == null);\\n            if (pooledBackgroundCameraGameObject != null)\\n            {\\n                backgroundCameraGameObject = pooledBackgroundCameraGameObject;\\n                backgroundCameraGameObject.SetActive(true);\\n            }\\n            else\\n            {\\n                if (configuration.instantiateMixedRealityCameraGameObject != null)\\n                {\\n                    backgroundCameraGameObject =\\n                        configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                            OVRManager.MrcCameraType.Background);\\n                }\\n                else\\n                {\\n                    backgroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\\n                }\\n                pooledBackgroundCameraGameObject = backgroundCameraGameObject;\\n            }\\n\\n            backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n            backgroundCameraGameObject.transform.parent =\\n                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n            if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n            {\\n                Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n            }\\n\\n            if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n            {\\n                Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n            }\\n\\n            backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n            backgroundCamera.tag = \\\"Untagged\\\";\\n        #if USING_MRC_COMPATIBLE_URP_VERSION\\n            var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n            if (backgroundCamData != null)\\n            {\\n                backgroundCamData.allowXRRendering = false;\\n            }\\n        #elif USING_URP\\n            Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n        #else\\n            backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n        #endif\\n            backgroundCamera.depth = 99990.0f;\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n            backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n        #if OVR_ANDROID_MRC\\n            backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n            if (!renderCombinedFrame)\\n            {\\n                backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n        #endif\\n\\n            Debug.Assert(foregroundCameraGameObject == null);\\n            if (pooledForegroundCameraGameObject != null)\\n            {\\n                foregroundCameraGameObject = pooledForegroundCameraGameObject;\\n                foregroundCameraGameObject.SetActive(true);\\n            }\\n            else\\n            {\\n                if (configuration.instantiateMixedRealityCameraGameObject != null)\\n                {\\n                    foregroundCameraGameObject =\\n                        configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                            OVRManager.MrcCameraType.Foreground);\\n                }\\n                else\\n                {\\n                    foregroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\\n                }\\n                pooledForegroundCameraGameObject = foregroundCameraGameObject;\\n            }\\n\\n            foregroundCameraGameObject.name = \\\"OculusMRC_ForgroundCamera\\\";\\n            foregroundCameraGameObject.transform.parent =\\n                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n            if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n            {\\n                Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n            }\\n\\n            if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n            {\\n                Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n            }\\n\\n            foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n            foregroundCamera.tag = \\\"Untagged\\\";\\n        #if USING_MRC_COMPATIBLE_URP_VERSION\\n            var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n            if (foregroundCamData != null)\\n            {\\n                foregroundCamData.allowXRRendering = false;\\n            }\\n        #elif USING_URP\\n            Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n        #else\\n            foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n        #endif\\n            foregroundCamera.depth =\\n                backgroundCamera.depth + 1.0f;\\n            foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n            foregroundCamera.clearFlags = CameraClearFlags.Color;\\n        #if OVR_ANDROID_MRC\\n            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n        #else\\n            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n        #endif\\n            foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n\\n        #if OVR_ANDROID_MRC\\n            if (renderCombinedFrame)\\n            {\\n                foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n            }\\n            else\\n            {\\n                foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n                foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n        #endif\\n            // (Remaining code unchanged)\\n            previousMainCameraObject = mainCamera.gameObject;\\n        }\\n    }\\n\\n    // (Other method implementations)\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing UnityEngine;\\nusing System.Collections.Generic;\\nusing System.Threading;\\nusing UnityEngine.Rendering;\\nusing Object = UnityEngine.Object;\\nusing UnityEngine.Rendering.Universal;\\n\\npublic class OVRExternalComposition : MonoBehaviour\\n{\\n    // Object pool for camera game objects\\n    private Dictionary<string, GameObject> cameraObjectPool = new Dictionary<string, GameObject>();\\n\\n    private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (mainCamera.gameObject != previousMainCameraObject)\\n        {\\n            Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n                mainCamera.gameObject.name);\\n\\n            OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\\n            backgroundCamera = null;\\n            OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\\n            foregroundCamera = null;\\n\\n            RefreshCameraRig(parentObject, mainCamera);\\n\\n            Debug.Assert(backgroundCameraGameObject == null);\\n            if (!RetrieveFromPool(\\\"OculusMRC_BackgroundCamera\\\", out backgroundCameraGameObject))\\n            {\\n                if (configuration.instantiateMixedRealityCameraGameObject != null)\\n                {\\n                    backgroundCameraGameObject =\\n                        configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                            OVRManager.MrcCameraType.Background);\\n                }\\n                else\\n                {\\n                    backgroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\\n                }\\n                backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n                AddToPool(\\\"OculusMRC_BackgroundCamera\\\", backgroundCameraGameObject);\\n            }\\n\\n            backgroundCameraGameObject.transform.parent =\\n                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n            if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n            {\\n                Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n            }\\n\\n            if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n            {\\n                Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n            }\\n\\n            backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n            backgroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n            var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n            if (backgroundCamData != null)\\n            {\\n                backgroundCamData.allowXRRendering = false;\\n            }\\n#elif USING_URP\\n            Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n            backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n            backgroundCamera.depth = 99990.0f;\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n            backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n            backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n            if (!renderCombinedFrame)\\n            {\\n                backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n#endif\\n\\n            Debug.Assert(foregroundCameraGameObject == null);\\n            if (!RetrieveFromPool(\\\"OculusMRC_ForegroundCamera\\\", out foregroundCameraGameObject))\\n            {\\n                if (configuration.instantiateMixedRealityCameraGameObject != null)\\n                {\\n                    foregroundCameraGameObject =\\n                        configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                            OVRManager.MrcCameraType.Foreground);\\n                }\\n                else\\n                {\\n                    foregroundCameraGameObject = Object.Instantiate(mainCamera.gameObject);\\n                }\\n                foregroundCameraGameObject.name = \\\"OculusMRC_ForegroundCamera\\\";\\n                AddToPool(\\\"OculusMRC_ForegroundCamera\\\", foregroundCameraGameObject);\\n            }\\n\\n            foregroundCameraGameObject.transform.parent =\\n                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n            if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n            {\\n                Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n            }\\n\\n            if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n            {\\n                Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n            }\\n\\n            foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n            foregroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n            var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n            if (foregroundCamData != null)\\n            {\\n                foregroundCamData.allowXRRendering = false;\\n            }\\n#elif USING_URP\\n            Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n            foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n            foregroundCamera.depth =\\n                backgroundCamera.depth + 1.0f;\\n            foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n            foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n            foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n            if (renderCombinedFrame)\\n            {\\n                foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n            }\\n            else\\n            {\\n                foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n                foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n#endif\\n\\n            previousMainCameraObject = mainCamera.gameObject;\\n        }\\n    }\\n\\n    private bool RetrieveFromPool(string name, out GameObject result)\\n    {\\n        return cameraObjectPool.TryGetValue(name, out result) && result != null;\\n    }\\n\\n    private void AddToPool(string name, GameObject obj)\\n    {\\n        if (cameraObjectPool.ContainsKey(name))\\n        {\\n            cameraObjectPool[name] = obj;\\n        }\\n        else\\n        {\\n            cameraObjectPool.Add(name, obj);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Fixed code snippet from /Assets/Oculus/VR/Scripts/Composition/OVRExternalComposition.cs:\\n\\nusing System;\\nusing UnityEngine;\\nusing System.Collections.Generic;\\nusing System.Threading;\\nusing UnityEngine.Rendering;\\nusing Object = UnityEngine.Object;\\nusing UnityEngine.Rendering.Universal;\\n\\npublic class OVRExternalComposition : MonoBehaviour\\n{\\n    private GameObject backgroundCameraGameObject;\\n    private Camera backgroundCamera;\\n    private GameObject foregroundCameraGameObject;\\n    private Camera foregroundCamera;\\n    private GameObject previousMainCameraObject;\\n    private List<GameObject> cameraPool;\\n\\n    void Start()\\n    {\\n        // Initialize the camera pool\\n        cameraPool = new List<GameObject>();\\n    }\\n\\n    private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration)\\n    {\\n        if (mainCamera.gameObject != previousMainCameraObject)\\n        {\\n            Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\",\\n                mainCamera.gameObject.name);\\n\\n            OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\\n            backgroundCamera = null;\\n            OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\\n            foregroundCamera = null;\\n\\n            RefreshCameraRig(parentObject, mainCamera);\\n\\n            Debug.Assert(backgroundCameraGameObject == null);\\n            if (configuration.instantiateMixedRealityCameraGameObject != null)\\n            {\\n                backgroundCameraGameObject =\\n                    configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                        OVRManager.MrcCameraType.Background);\\n            }\\n            else\\n            {\\n                backgroundCameraGameObject = GetInstantiatedCamera(mainCamera.gameObject);\\n            }\\n\\n            backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n            backgroundCameraGameObject.transform.parent =\\n                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n            if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n            {\\n                Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n            }\\n\\n            if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n            {\\n                Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n            }\\n\\n            backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n            backgroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n            var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n            if (backgroundCamData != null)\\n            {\\n                backgroundCamData.allowXRRendering = false;\\n            }\\n#elif USING_URP\\n            Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n            backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n            backgroundCamera.depth = 99990.0f;\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n            backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n            backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n            if (!renderCombinedFrame)\\n            {\\n                backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n#endif\\n\\n            Debug.Assert(foregroundCameraGameObject == null);\\n            if (configuration.instantiateMixedRealityCameraGameObject != null)\\n            {\\n                foregroundCameraGameObject =\\n                    configuration.instantiateMixedRealityCameraGameObject(mainCamera.gameObject,\\n                        OVRManager.MrcCameraType.Foreground);\\n            }\\n            else\\n            {\\n                foregroundCameraGameObject = GetInstantiatedCamera(mainCamera.gameObject);\\n            }\\n\\n            foregroundCameraGameObject.name = \\\"OculusMRC_ForgroundCamera\\\";\\n            foregroundCameraGameObject.transform.parent =\\n                cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n            if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n            {\\n                Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n            }\\n\\n            if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n            {\\n                Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n            }\\n\\n            foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n            foregroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n            var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n            if (foregroundCamData != null)\\n            {\\n                foregroundCamData.allowXRRendering = false;\\n            }\\n#elif USING_URP\\n            Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n            foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n            foregroundCamera.depth =\\n                backgroundCamera.depth + 1.0f;\\n            foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n            foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n            foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n            foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n            if (renderCombinedFrame)\\n            {\\n                foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n            }\\n            else\\n            {\\n                foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n                foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n            }\\n#endif\\n\\n            previousMainCameraObject = mainCamera.gameObject;\\n        }\\n    }\\n\\n    private GameObject GetInstantiatedCamera(GameObject mainCameraGameObject)\\n    {\\n        foreach (var obj in cameraPool)\\n        {\\n            if (!obj.activeInHierarchy)\\n            {\\n                obj.SetActive(true);\\n                return obj;\\n            }\\n        }\\n        GameObject newCamera = Object.Instantiate(mainCameraGameObject);\\n        cameraPool.Add(newCamera);\\n        return newCamera;\\n    }\\n\\n    public override void Update(GameObject gameObject, Camera mainCamera,\\n        OVRMixedRealityCaptureConfiguration configuration, OVRManager.TrackingOrigin trackingOrigin)\\n    {\\n#if OVR_ANDROID_MRC\\n        if (skipFrame && OVRPlugin.Media.IsCastingToRemoteClient())\\n        {\\n            isFrameSkipped = !isFrameSkipped;\\n            if (isFrameSkipped)\\n            {\\n                return;\\n            }\\n        }\\n#endif\\n\\n        RefreshCameraObjects(gameObject, mainCamera, configuration);\\n\\n        OVRPlugin.SetHandNodePoseStateLatency(0.0);\\n\\n        OVRPose stageToLocalPose =\\n            OVRPlugin.GetTrackingTransformRelativePose(OVRPlugin.TrackingOrigin.Stage).ToOVRPose();\\n        OVRPose localToStagePose = stageToLocalPose.Inverse();\\n        OVRPose head = localToStagePose * OVRPlugin.GetNodePose(OVRPlugin.Node.Head, OVRPlugin.Step.Render).ToOVRPose();\\n        OVRPose leftC = localToStagePose *\\n                        OVRPlugin.GetNodePose(OVRPlugin.Node.HandLeft, OVRPlugin.Step.Render).ToOVRPose();\\n        OVRPose rightC = localToStagePose *\\n                         OVRPlugin.GetNodePose(OVRPlugin.Node.HandRight, OVRPlugin.Step.Render).ToOVRPose();\\n        OVRPlugin.Media.SetMrcHeadsetControllerPose(head.ToPosef(), leftC.ToPosef(), rightC.ToPosef());\\n\\n#if OVR_ANDROID_MRC\\n        RefreshAudioFilter(mainCamera);\\n\\n        int drawTextureIndex = (frameIndex / 2) % 2;\\n        int castTextureIndex = 1 - drawTextureIndex;\\n\\n        backgroundCamera.enabled = (frameIndex % 2) == 0;\\n        foregroundCamera.enabled = (frameIndex % 2) == 1;\\n\\n        if (frameIndex % 2 == 0)\\n        {\\n            if (lastMrcEncodeFrameSyncId != -1)\\n            {\\n                OVRPlugin.Media.SyncMrcFrame(lastMrcEncodeFrameSyncId);\\n                lastMrcEncodeFrameSyncId = -1;\\n            }\\n\\n            lastMrcEncodeFrameSyncId = CastMrcFrame(castTextureIndex);\\n            SetCameraTargetTexture(drawTextureIndex);\\n        }\\n\\n        ++frameIndex;\\n#endif\\n\\n        backgroundCamera.clearFlags = mainCamera.clearFlags;\\n        backgroundCamera.backgroundColor = mainCamera.backgroundColor;\\n        if (configuration.dynamicCullingMask)\\n        {\\n            backgroundCamera.cullingMask = (mainCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n        }\\n\\n        backgroundCamera.nearClipPlane = mainCamera.nearClipPlane;\\n        backgroundCamera.farClipPlane = mainCamera.farClipPlane;\\n\\n        if (configuration.dynamicCullingMask)\\n        {\\n            foregroundCamera.cullingMask = (mainCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                           configuration.extraVisibleLayers;\\n        }\\n\\n        foregroundCamera.nearClipPlane = mainCamera.nearClipPlane;\\n        foregroundCamera.farClipPlane = mainCamera.farClipPlane;\\n\\n        if (OVRMixedReality.useFakeExternalCamera || OVRPlugin.GetExternalCameraCount() == 0)\\n        {\\n            OVRPose worldSpacePose = new OVRPose();\\n            OVRPose trackingSpacePose = new OVRPose();\\n            trackingSpacePose.position = trackingOrigin == OVRManager.TrackingOrigin.EyeLevel\\n                ? OVRMixedReality.fakeCameraEyeLevelPosition\\n                : OVRMixedReality.fakeCameraFloorLevelPosition;\\n            trackingSpacePose.orientation = OVRMixedReality.fakeCameraRotation;\\n            worldSpacePose = OVRExtensions.ToWorldSpacePose(trackingSpacePose, mainCamera);\\n\\n            backgroundCamera.fieldOfView = OVRMixedReality.fakeCameraFov;\\n            backgroundCamera.aspect = OVRMixedReality.fakeCameraAspect;\\n            foregroundCamera.fieldOfView = OVRMixedReality.fakeCameraFov;\\n            foregroundCamera.aspect = OVRMixedReality.fakeCameraAspect;\\n\\n            if (cameraInTrackingSpace)\\n            {\\n                backgroundCamera.transform.FromOVRPose(trackingSpacePose, true);\\n                foregroundCamera.transform.FromOVRPose(trackingSpacePose, true);\\n            }\\n            else\\n            {\\n                backgroundCamera.transform.FromOVRPose(worldSpacePose);\\n                foregroundCamera.transform.FromOVRPose(worldSpacePose);\\n            }\\n        }\\n        else\\n        {\\n            OVRPlugin.CameraExtrinsics extrinsics;\\n            OVRPlugin.CameraIntrinsics intrinsics;\\n\\n            if (OVRPlugin.GetMixedRealityCameraInfo(0, out extrinsics, out intrinsics))\\n            {\\n                float fovY = Mathf.Atan(intrinsics.FOVPort.UpTan) * Mathf.Rad2Deg * 2;\\n                float aspect = intrinsics.FOVPort.LeftTan / intrinsics.FOVPort.UpTan;\\n                backgroundCamera.fieldOfView = fovY;\\n                backgroundCamera.aspect = aspect;\\n                foregroundCamera.fieldOfView = fovY;\\n                foregroundCamera.aspect = intrinsics.FOVPort.LeftTan / intrinsics.FOVPort.UpTan;\\n\\n                if (cameraInTrackingSpace)\\n                {\\n                    OVRPose trackingSpacePose = ComputeCameraTrackingSpacePose(extrinsics);\\n                    backgroundCamera.transform.FromOVRPose(trackingSpacePose, true);\\n                    foregroundCamera.transform.FromOVRPose(trackingSpacePose, true);\\n                }\\n                else\\n                {\\n                    OVRPose worldSpacePose = ComputeCameraWorldSpacePose(extrinsics, mainCamera);\\n                    backgroundCamera.transform.FromOVRPose(worldSpacePose);\\n                    foregroundCamera.transform.FromOVRPose(worldSpacePose);\\n                }\\n#if OVR_ANDROID_MRC\\n                cameraPoseTimeArray[drawTextureIndex] = extrinsics.LastChangedTimeSeconds;\\n#endif\\n            }\\n            else\\n            {\\n                Debug.LogError(\\\"Failed to get external camera information\\\");\\n                return;\\n            }\\n        }\\n\\n        Vector3 headToExternalCameraVec = mainCamera.transform.position - foregroundCamera.transform.position;\\n        float clipDistance = Vector3.Dot(headToExternalCameraVec, foregroundCamera.transform.forward);\\n        foregroundCamera.farClipPlane = Mathf.Max(foregroundCamera.nearClipPlane + 0.001f, clipDistance);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing UnityEngine;\\nusing System.Collections.Generic;\\nusing UnityEngine.Rendering;\\nusing Object = UnityEngine.Object;\\nusing UnityEngine.Rendering.Universal;\\n\\n// Declare object pools for background and foreground cameras\\nprivate GameObject backgroundCameraPoolObject;\\nprivate GameObject foregroundCameraPoolObject;\\n\\n// Initialize the object pools in an appropriate initialization method (e.g., Start or Awake)\\nprivate void InitializeCameraPools(GameObject mainCamera)\\n{\\n    if (configuration.instantiateMixedRealityCameraGameObject != null)\\n    {\\n        backgroundCameraPoolObject =\\n            configuration.instantiateMixedRealityCameraGameObject(mainCamera, OVRManager.MrcCameraType.Background);\\n        foregroundCameraPoolObject =\\n            configuration.instantiateMixedRealityCameraGameObject(mainCamera, OVRManager.MrcCameraType.Foreground);\\n    }\\n    else\\n    {\\n        backgroundCameraPoolObject = Object.Instantiate(mainCamera);\\n        foregroundCameraPoolObject = Object.Instantiate(mainCamera);\\n    }\\n    \\n    backgroundCameraPoolObject.SetActive(false);\\n    foregroundCameraPoolObject.SetActive(false);\\n}\\n\\nprivate void RefreshCameraObjects(GameObject parentObject, Camera mainCamera,\\n    OVRMixedRealityCaptureConfiguration configuration)\\n{\\n    if (mainCamera.gameObject != previousMainCameraObject)\\n    {\\n        Debug.LogFormat(\\\"[OVRExternalComposition] Camera refreshed. Rebind camera to {0}\\\", mainCamera.gameObject.name);\\n\\n        OVRCompositionUtil.SafeDestroy(ref backgroundCameraGameObject);\\n        backgroundCamera = null;\\n        OVRCompositionUtil.SafeDestroy(ref foregroundCameraGameObject);\\n        foregroundCamera = null;\\n\\n        RefreshCameraRig(parentObject, mainCamera);\\n\\n        Debug.Assert(backgroundCameraGameObject == null);\\n        backgroundCameraGameObject = backgroundCameraPoolObject;\\n        backgroundCameraGameObject.SetActive(true);\\n\\n        backgroundCameraGameObject.name = \\\"OculusMRC_BackgroundCamera\\\";\\n        backgroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (backgroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (backgroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(backgroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        backgroundCamera = backgroundCameraGameObject.GetComponent<Camera>();\\n        backgroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var backgroundCamData = backgroundCamera.GetUniversalAdditionalCameraData();\\n        if (backgroundCamData != null)\\n        {\\n            backgroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        backgroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        backgroundCamera.depth = 99990.0f;\\n        backgroundCamera.rect = new Rect(0.0f, 0.0f, 0.5f, 1.0f);\\n        backgroundCamera.cullingMask = (backgroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                       configuration.extraVisibleLayers;\\n#if OVR_ANDROID_MRC\\n        backgroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        if (!renderCombinedFrame)\\n        {\\n            backgroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        Debug.Assert(foregroundCameraGameObject == null);\\n        foregroundCameraGameObject = foregroundCameraPoolObject;\\n        foregroundCameraGameObject.SetActive(true);\\n\\n        foregroundCameraGameObject.name = \\\"OculusMRC_ForgroundCamera\\\";\\n        foregroundCameraGameObject.transform.parent =\\n            cameraInTrackingSpace ? cameraRig.trackingSpace : parentObject.transform;\\n        if (foregroundCameraGameObject.GetComponent<AudioListener>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<AudioListener>());\\n        }\\n\\n        if (foregroundCameraGameObject.GetComponent<OVRManager>())\\n        {\\n            Object.Destroy(foregroundCameraGameObject.GetComponent<OVRManager>());\\n        }\\n\\n        foregroundCamera = foregroundCameraGameObject.GetComponent<Camera>();\\n        foregroundCamera.tag = \\\"Untagged\\\";\\n#if USING_MRC_COMPATIBLE_URP_VERSION\\n        var foregroundCamData = foregroundCamera.GetUniversalAdditionalCameraData();\\n        if (foregroundCamData != null)\\n        {\\n            foregroundCamData.allowXRRendering = false;\\n        }\\n#elif USING_URP\\n        Debug.LogError(\\\"Using URP with MRC is only supported with URP version 10.0.0 or higher. Consider using Unity 2020 or higher.\\\");\\n#else\\n        foregroundCamera.stereoTargetEye = StereoTargetEyeMask.None;\\n#endif\\n        foregroundCamera.depth =\\n            backgroundCamera.depth + 1.0f; \\n        foregroundCamera.rect = new Rect(0.5f, 0.0f, 0.5f, 1.0f);\\n        foregroundCamera.clearFlags = CameraClearFlags.Color;\\n#if OVR_ANDROID_MRC\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorQuest;\\n#else\\n        foregroundCamera.backgroundColor = configuration.externalCompositionBackdropColorRift;\\n#endif\\n        foregroundCamera.cullingMask = (foregroundCamera.cullingMask & ~configuration.extraHiddenLayers) |\\n                                       configuration.extraVisibleLayers;\\n\\n#if OVR_ANDROID_MRC\\n        if (renderCombinedFrame)\\n        {\\n            foregroundCamera.targetTexture = mrcRenderTextureArray[0];\\n        }\\n        else\\n        {\\n            foregroundCamera.targetTexture = mrcForegroundRenderTextureArray[0];\\n            foregroundCamera.rect = new Rect(0.0f, 0.0f, 1.0f, 1.0f);\\n        }\\n#endif\\n\\n        previousMainCameraObject = mainCamera.gameObject;\\n    }\\n}\\n\\n// Ensure InitializeCameraPools() is called before the first use\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787326,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_f3927aa00d\",\"usage\":{\"completion_tokens\":8116,\"prompt_tokens\":2647,\"total_tokens\":10763,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"