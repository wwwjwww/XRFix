"{\"id\":\"chatcmpl-Brnl1d6Zl38jRO0PqLPkFKqxiwpU1\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n'''\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    void Update()\\n    {\\n        int state = DebugManager.instance.GetState();\\n        if (m_DebugTreeState != state)\\n        {\\n            ResetAllHierarchy();\\n        }\\n\\n        HandleInput();\\n\\n        if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n            m_UIPanels[m_SelectedPanel].UpdateScroll();\\n    }\\n\\n    void Rebuild()\\n    {\\n        m_PrefabsMap.Clear();\\n        foreach (var bundle in prefabs)\\n        {\\n            var type = Type.GetType(bundle.type);\\n\\n            if (type != null && bundle.prefab != null)\\n                m_PrefabsMap.Add(type, bundle.prefab);\\n        }\\n\\n        m_UIPanels.Clear();\\n\\n        m_DebugTreeState = DebugManager.instance.GetState();\\n        var panels = DebugManager.instance.panels;\\n\\n        DebugUIHandlerWidget selectedWidget = null;\\n        foreach (var panel in panels)\\n        {\\n            if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                continue;\\n\\n            var go = Instantiate(panelPrefab, transform, false).gameObject;\\n            go.name = panel.displayName;\\n\\n            var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n            uiPanel.SetPanel(panel);\\n            uiPanel.Canvas = this;\\n            m_UIPanels.Add(uiPanel);\\n            var container = go.GetComponent<DebugUIHandlerContainer>();\\n            DebugUIHandlerWidget selected = null;\\n            Traverse(panel, container.contentHolder, null, ref selected);\\n\\n            if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n            {\\n                selectedWidget = selected;\\n            }\\n        }\\n        \\n        ActivatePanel(m_SelectedPanel, selectedWidget);\\n    }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n    \\n        void Rebuild()\\n        {\\n\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n        }\\n'''\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Update()\\n{\\n    int state = DebugManager.instance.GetState();\\n    if (m_DebugTreeState != state)\\n    {\\n        ResetAllHierarchy();\\n    }\\n\\n    HandleInput();\\n\\n    if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n        m_UIPanels[m_SelectedPanel].UpdateScroll();\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752162351,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":1353,\"prompt_tokens\":1410,\"total_tokens\":2763,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"