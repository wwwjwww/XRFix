"{\"id\":\"chatcmpl-B1suLWcUiewCeXjkdEuxKj6QON1GS\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"// Move the object pool initialization to the constructor instead of Update method\\nvoid Start()\\n{\\n    Rebuild();\\n}\\n\\nvoid Rebuild()\\n{\\n    m_PrefabsMap = new Dictionary<Type, Transform>();\\n    foreach (var bundle in prefabs)\\n    {\\n        var type = Type.GetType(bundle.type);\\n\\n        if (type != null && bundle.prefab != null)\\n            m_PrefabsMap.Add(type, bundle.prefab);\\n    }\\n\\n    m_UIPanels = new List<DebugUIHandlerPanel>();\\n\\n    m_DebugTreeState = DebugManager.instance.GetState();\\n    var panels = DebugManager.instance.panels;\\n\\n    DebugUIHandlerWidget selectedWidget = null;\\n    foreach (var panel in panels)\\n    {\\n        if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n            continue;\\n\\n        var go = Instantiate(panelPrefab, transform, false).gameObject;\\n        go.name = panel.displayName;\\n\\n        var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n        uiPanel.SetPanel(panel);\\n        uiPanel.Canvas = this;\\n        m_UIPanels.Add(uiPanel);\\n        var container = go.GetComponent<DebugUIHandlerContainer>();\\n        DebugUIHandlerWidget selected = null;\\n        Traverse(panel, container.contentHolder, null, ref selected);\\n\\n        if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n        {\\n            selectedWidget = selected;\\n        }\\n    }\\n\\n    ActivatePanel(m_SelectedPanel, selectedWidget);\\n}\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    BuildObjectPool();\\n}\\n\\nvoid BuildObjectPool()\\n{\\n    m_PrefabsMap = new Dictionary<Type, Transform>();\\n\\n    foreach (var bundle in prefabs)\\n    {\\n        var type = Type.GetType(bundle.type);\\n\\n        if (type != null && bundle.prefab != null)\\n            m_PrefabsMap.Add(type, bundle.prefab);\\n    }\\n\\n    m_UIPanels = new List<DebugUIHandlerPanel>();\\n\\n    m_DebugTreeState = DebugManager.instance.GetState();\\n    var panels = DebugManager.instance.panels;\\n    \\n    DebugUIHandlerWidget selectedWidget = null;\\n    foreach (var panel in panels)\\n    {\\n        if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n            continue;\\n\\n        var go = Instantiate(panelPrefab, transform, false).gameObject;\\n        go.name = panel.displayName;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n        RectTransform rectTransform = go.GetComponent<RectTransform>();\\n        rectTransform.anchoredPosition = safeAreaOffset;\\n        rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n#endif\\n\\n        var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n        uiPanel.SetPanel(panel);\\n        uiPanel.Canvas = this;\\n        m_UIPanels.Add(uiPanel);\\n        var container = go.GetComponent<DebugUIHandlerContainer>();\\n        DebugUIHandlerWidget selected = null;\\n        Traverse(panel, container.contentHolder, null, ref selected);\\n\\n        if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n        {\\n            selectedWidget = selected;\\n        }\\n    }\\n\\n    ActivatePanel(m_SelectedPanel, selectedWidget);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"        private ObjectPool<Transform> m_TransformPool;\\n\\n        void Awake()\\n        {\\n            m_TransformPool = new ObjectPool<Transform>(() => Instantiate(panelPrefab));\\n        }\\n\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n            \\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = m_TransformPool.GetItem().gameObject;\\n                go.name = panel.displayName;\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"\\n```csharp\\n        List<Transform> m_ObjectPool = new List<Transform>();\\n\\n        void Start()\\n        {\\n            BuildObjectPool();\\n        }\\n\\n        void BuildObjectPool()\\n        {\\n            foreach (var bundle in prefabs)\\n            {\\n                var instance = Instantiate(bundle.prefab);\\n                instance.gameObject.SetActive(false);\\n                m_ObjectPool.Add(instance);\\n            }\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null)\\n                {\\n                    Transform prefab = m_ObjectPool.Find(x => x.name == bundle.prefab.name);\\n                    if (prefab != null)\\n                    {\\n                        m_PrefabsMap.Add(type, prefab);\\n                    }\\n                }\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                Transform instance = GetPooledObject(panelPrefab);\\n                instance.gameObject.SetActive(true);\\n                instance.name = panel.displayName;\\n\\n                var uiPanel = instance.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = instance.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n\\n        Transform GetPooledObject(Transform prefab)\\n        {\\n            var pooledObject = m_ObjectPool.Find(x => !x.gameObject.activeSelf && x.name == prefab.name);\\n            if (pooledObject == null)\\n            {\\n                pooledObject = Instantiate(prefab);\\n                m_ObjectPool.Add(pooledObject);\\n            }\\n            return pooledObject;\\n        }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Start()\\n        {\\n            Rebuild();\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739789093,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_0165350fbb\",\"usage\":{\"completion_tokens\":1533,\"prompt_tokens\":1105,\"total_tokens\":2638,\"completion_tokens_details\":null,\"prompt_tokens_details\":null}}"