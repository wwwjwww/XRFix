"{\"id\":\"chatcmpl-B1sUVEXrhiSoem18R6qsEjYWSKhYO\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing UnityEngine.Rendering;\\n\\nnamespace UnityEngine.Rendering.UI\\n{\\n    [Serializable]\\n    public class DebugUIPrefabBundle\\n    {\\n        public string type;\\n        public RectTransform prefab;\\n    }\\n\\n    public class DebugUIHandlerCanvas : MonoBehaviour\\n    {\\n        int m_DebugTreeState;\\n        Dictionary<Type, Transform> m_PrefabsMap;\\n\\n        public Transform panelPrefab;\\n        public List<DebugUIPrefabBundle> prefabs;\\n\\n        List<DebugUIHandlerPanel> m_UIPanels;\\n        int m_SelectedPanel;\\n        DebugUIHandlerWidget m_SelectedWidget;\\n        string m_CurrentQueryPath;\\n\\n        void OnEnable()\\n        {\\n            if (prefabs == null)\\n                prefabs = new List<DebugUIPrefabBundle>();\\n\\n            if (m_PrefabsMap == null)\\n                m_PrefabsMap = new Dictionary<Type, Transform>();\\n\\n            if (m_UIPanels == null)\\n                m_UIPanels = new List<DebugUIHandlerPanel>();\\n\\n            DebugManager.instance.RegisterRootCanvas(this);\\n\\n            // Initialize the object pool for panels on enable\\n            InitializePanelPool();\\n        }\\n\\n        void InitializePanelPool()\\n        {\\n            // Assuming a fixed number of panels to be pooled\\n            int poolSize = 10;\\n            for (int i = 0; i < poolSize; i++)\\n            {\\n                var panel = Instantiate(panelPrefab, transform, false);\\n                panel.gameObject.SetActive(false);\\n            }\\n        }\\n\\n        internal void RequestHierarchyReset()\\n        {\\n            m_DebugTreeState = -1;\\n        }\\n\\n        void ResetAllHierarchy()\\n        {\\n            foreach (Transform t in transform)\\n                CoreUtils.Destroy(t.gameObject);\\n\\n            Rebuild();\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                // Retrieve an inactive panel from the pool\\n                Transform go = GetInactivePanelFromPool();\\n                if (go == null) continue; // If no panel is available, skip\\n\\n                go.name = panel.displayName;\\n                go.gameObject.SetActive(true);\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n\\n        Transform GetInactivePanelFromPool()\\n        {\\n            foreach (Transform t in transform)\\n            {\\n                if (!t.gameObject.activeSelf)\\n                    return t;\\n            }\\n            return null;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing UnityEngine.Rendering;\\n\\nnamespace UnityEngine.Rendering.UI\\n{\\n    [Serializable]\\n    public class DebugUIPrefabBundle\\n    {\\n        public string type;\\n        public RectTransform prefab;\\n    }\\n\\n    public class DebugUIHandlerCanvas : MonoBehaviour\\n    {\\n        int m_DebugTreeState;\\n        Dictionary<Type, Transform> m_PrefabsMap;\\n\\n        public Transform panelPrefab;\\n        public List<DebugUIPrefabBundle> prefabs;\\n\\n        List<DebugUIHandlerPanel> m_UIPanels;\\n        int m_SelectedPanel;\\n        DebugUIHandlerWidget m_SelectedWidget;\\n        string m_CurrentQueryPath;\\n\\n        void OnEnable()\\n        {\\n            if (prefabs == null)\\n                prefabs = new List<DebugUIPrefabBundle>();\\n\\n            if (m_PrefabsMap == null)\\n                m_PrefabsMap = new Dictionary<Type, Transform>();\\n\\n            if (m_UIPanels == null)\\n                m_UIPanels = new List<DebugUIHandlerPanel>();\\n\\n            DebugManager.instance.RegisterRootCanvas(this);\\n            BuildObjectPool();\\n        }\\n\\n        void BuildObjectPool()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        internal void RequestHierarchyReset()\\n        {\\n            m_DebugTreeState = -1;\\n        }\\n\\n        void ResetAllHierarchy()\\n        {\\n            foreach (Transform t in transform)\\n                CoreUtils.Destroy(t.gameObject);\\n\\n            Rebuild();\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n            Rect parentRect = GetComponentInParent<RectTransform>().rect;\\n            float parentWidth = Math.Min(parentRect.width, parentRect.height);\\n            float scaleRatio = parentWidth / Math.Min(Screen.height, Screen.width);\\n\\n            Rect safeAreaRect = Screen.safeArea;\\n            Vector2 margin = new Vector2(5, 5);\\n            var safeAreaOffsetLeft = safeAreaRect.xMin * scaleRatio;\\n            var safeAreaOffsetTop = -safeAreaRect.yMin * scaleRatio;\\n            Vector2 safeAreaOffset = new Vector2(safeAreaOffsetLeft, safeAreaOffsetTop) + margin;\\n#endif\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n                RectTransform rectTransform = go.GetComponent<RectTransform>();\\n                rectTransform.anchoredPosition = safeAreaOffset;\\n                rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n#endif\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n\\n        void HandleInput()\\n        {\\n            // Handle input here\\n        }\\n\\n        void ActivatePanel(int selectedPanel, DebugUIHandlerWidget selectedWidget)\\n        {\\n            // Activate selected panel logic here\\n        }\\n\\n        void Traverse(Panel panel, Transform parent, DebugUIHandlerWidget prev, ref DebugUIHandlerWidget selected)\\n        {\\n            // Traverse logic here\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing UnityEngine.Rendering;\\n\\nnamespace UnityEngine.Rendering.UI\\n{\\n    [Serializable]\\n    public class DebugUIPrefabBundle\\n    {\\n        public string type;\\n        public RectTransform prefab;\\n    }\\n\\n    public class DebugUIHandlerCanvas : MonoBehaviour\\n    {\\n        int m_DebugTreeState;\\n        Dictionary<Type, Transform> m_PrefabsMap;\\n\\n        public Transform panelPrefab;\\n\\n        public List<DebugUIPrefabBundle> prefabs;\\n\\n        List<DebugUIHandlerPanel> m_UIPanels;\\n        int m_SelectedPanel;\\n        DebugUIHandlerWidget m_SelectedWidget;\\n        string m_CurrentQueryPath;\\n\\n        private Queue<GameObject> objectPool;\\n\\n        void OnEnable()\\n        {\\n            if (prefabs == null)\\n                prefabs = new List<DebugUIPrefabBundle>();\\n\\n            if (m_PrefabsMap == null)\\n                m_PrefabsMap = new Dictionary<Type, Transform>();\\n\\n            if (m_UIPanels == null)\\n                m_UIPanels = new List<DebugUIHandlerPanel>();\\n\\n            DebugManager.instance.RegisterRootCanvas(this);\\n\\n            // Initialize object pool\\n            objectPool = new Queue<GameObject>();\\n        }\\n        \\n        internal void RequestHierarchyReset()\\n        {\\n            m_DebugTreeState = -1;\\n        }\\n\\n        void ResetAllHierarchy()\\n        {\\n            foreach (Transform t in transform)\\n                CoreUtils.Destroy(t.gameObject);\\n\\n            Rebuild();\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n            Rect parentRect = GetComponentInParent<RectTransform>().rect;\\n            float parentWidth = Math.Min(parentRect.width, parentRect.height);\\n            float scaleRatio = parentWidth / Math.Min(Screen.height, Screen.width);\\n\\n            Rect safeAreaRect = Screen.safeArea;\\n            Vector2 margin = new Vector2(5, 5);\\n            var safeAreaOffsetLeft = safeAreaRect.xMin * scaleRatio;\\n            var safeAreaOffsetTop = -safeAreaRect.yMin * scaleRatio;\\n            Vector2 safeAreaOffset = new Vector2(safeAreaOffsetLeft, safeAreaOffsetTop) + margin;\\n#endif\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                GameObject go;\\n                if (objectPool.Count > 0)\\n                {\\n                    go = objectPool.Dequeue();\\n                    go.SetActive(true);\\n                }\\n                else\\n                {\\n                    go = Instantiate(panelPrefab, transform, false).gameObject;\\n                }\\n                go.name = panel.displayName;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n                RectTransform rectTransform = go.GetComponent<RectTransform>();\\n                rectTransform.anchoredPosition = safeAreaOffset;\\n                rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n#endif\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing UnityEngine.Rendering;\\n\\nnamespace UnityEngine.Rendering.UI\\n{\\n    [Serializable]\\n    public class DebugUIPrefabBundle\\n    {\\n        public string type;\\n        public RectTransform prefab;\\n    }\\n\\n    public class DebugUIHandlerCanvas : MonoBehaviour\\n    {\\n        int m_DebugTreeState;\\n        Dictionary<Type, Transform> m_PrefabsMap;\\n\\n        public Transform panelPrefab;\\n        public List<DebugUIPrefabBundle> prefabs;\\n\\n        List<DebugUIHandlerPanel> m_UIPanels;\\n        int m_SelectedPanel;\\n        DebugUIHandlerWidget m_SelectedWidget;\\n        string m_CurrentQueryPath;\\n\\n        void OnEnable()\\n        {\\n            if (prefabs == null)\\n                prefabs = new List<DebugUIPrefabBundle>();\\n\\n            if (m_PrefabsMap == null)\\n                m_PrefabsMap = new Dictionary<Type, Transform>();\\n\\n            if (m_UIPanels == null)\\n                m_UIPanels = new List<DebugUIHandlerPanel>();\\n\\n            DebugManager.instance.RegisterRootCanvas(this);\\n            BuildObjectPool();\\n        }\\n\\n        void BuildObjectPool()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n        }\\n\\n        internal void RequestHierarchyReset()\\n        {\\n            m_DebugTreeState = -1;\\n        }\\n\\n        void ResetAllHierarchy()\\n        {\\n            foreach (Transform t in transform)\\n                CoreUtils.Destroy(t.gameObject);\\n\\n            Rebuild();\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_UIPanels.Clear();\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n            Rect parentRect = GetComponentInParent<RectTransform>().rect;\\n            float parentWidth = Math.Min(parentRect.width, parentRect.height);\\n            float scaleRatio = parentWidth / Math.Min(Screen.height, Screen.width);\\n\\n            Rect safeAreaRect = Screen.safeArea;\\n            Vector2 margin = new Vector2(5, 5);\\n            var safeAreaOffsetLeft = safeAreaRect.xMin * scaleRatio;\\n            var safeAreaOffsetTop = -safeAreaRect.yMin * scaleRatio;\\n            Vector2 safeAreaOffset = new Vector2(safeAreaOffsetLeft, safeAreaOffsetTop) + margin;\\n#endif\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n                RectTransform rectTransform = go.GetComponent<RectTransform>();\\n                rectTransform.anchoredPosition = safeAreaOffset;\\n                rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n#endif\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n    }\\n}\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing UnityEngine.Rendering;\\n\\nnamespace UnityEngine.Rendering.UI\\n{\\n    [Serializable]\\n    public class DebugUIPrefabBundle\\n    {\\n        public string type;\\n        public RectTransform prefab;\\n    }\\n\\n    public class DebugUIHandlerCanvas : MonoBehaviour\\n    {\\n        int m_DebugTreeState;\\n        Dictionary<Type, Transform> m_PrefabsMap;\\n\\n        public Transform panelPrefab;\\n        public List<DebugUIPrefabBundle> prefabs;\\n\\n        List<DebugUIHandlerPanel> m_UIPanels;\\n        int m_SelectedPanel;\\n        DebugUIHandlerWidget m_SelectedWidget;\\n        string m_CurrentQueryPath;\\n\\n        void OnEnable()\\n        {\\n            if (prefabs == null)\\n                prefabs = new List<DebugUIPrefabBundle>();\\n\\n            if (m_PrefabsMap == null)\\n                m_PrefabsMap = new Dictionary<Type, Transform>();\\n\\n            if (m_UIPanels == null)\\n                m_UIPanels = new List<DebugUIHandlerPanel>();\\n\\n            DebugManager.instance.RegisterRootCanvas(this);\\n            BuildPrefabPool();\\n        }\\n\\n        void BuildPrefabPool()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null && !m_PrefabsMap.ContainsKey(type))\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n        }\\n\\n        internal void RequestHierarchyReset()\\n        {\\n            m_DebugTreeState = -1;\\n        }\\n\\n        void ResetAllHierarchy()\\n        {\\n            foreach (Transform t in transform)\\n                CoreUtils.Destroy(t.gameObject);\\n\\n            Rebuild();\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n            Rect parentRect = GetComponentInParent<RectTransform>().rect;\\n            float parentWidth = Math.Min(parentRect.width, parentRect.height);\\n            float scaleRatio = parentWidth / Math.Min(Screen.height, Screen.width);\\n\\n            Rect safeAreaRect = Screen.safeArea;\\n            Vector2 margin = new Vector2(5, 5);\\n            var safeAreaOffsetLeft = safeAreaRect.xMin * scaleRatio;\\n            var safeAreaOffsetTop = -safeAreaRect.yMin * scaleRatio;\\n            Vector2 safeAreaOffset = new Vector2(safeAreaOffsetLeft, safeAreaOffsetTop) + margin;\\n#endif\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n                RectTransform rectTransform = go.GetComponent<RectTransform>();\\n                rectTransform.anchoredPosition = safeAreaOffset;\\n                rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n#endif\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n\\n        private void Traverse(DebugUI.Panel panel, Transform parent, DebugUIHandlerWidget previous, ref DebugUIHandlerWidget selected)\\n        {\\n            // Logic for traversing and setting up DebugUI widgets.\\n        }\\n\\n        private void ActivatePanel(int selectedPanel, DebugUIHandlerWidget selectedWidget)\\n        {\\n            // Logic for activating the panel.\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787491,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_b045b4af17\",\"usage\":{\"completion_tokens\":4160,\"prompt_tokens\":1066,\"total_tokens\":5226,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"