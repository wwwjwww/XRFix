"{\"id\":\"chatcmpl-B2TtrM0VsyhXr1zFw0CYyUFaOhyms\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n\\n            Rect parentRect = GetComponent<RectTransform>().rect;\\n            float parentWidth = Math.Min(parentRect.width, parentRect.height);\\n            float scaleRatio = parentWidth / Math.Min(Screen.height, Screen.width);\\n\\n            Rect safeAreaRect = Screen.safeArea;\\n            Vector2 margin = new Vector2(5, 5);\\n            var safeAreaOffsetLeft = safeAreaRect.xMin * scaleRatio;\\n            var safeAreaOffsetTop = -safeAreaRect.yMin * scaleRatio;\\n            Vector2 safeAreaOffset = new Vector2(safeAreaOffsetLeft, safeAreaOffsetTop) + margin;\\n#endif\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n                RectTransform rectTransform = go.GetComponent<RectTransform>();\\n                rectTransform.anchoredPosition = safeAreaOffset;\\n                rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n#endif\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false).gameObject;\\n                go.name = panel.displayName;\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n            int state = DebugManager.instance.GetState();\\n            if (m_DebugTreeState != state)\\n            {\\n                ResetAllHierarchy();\\n            }\\n\\n            HandleInput();\\n\\n\\n            if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n                m_UIPanels[m_SelectedPanel].UpdateScroll();\\n        }\\n\\n        void Rebuild()\\n        {\\n\\n            m_PrefabsMap.Clear();\\n            foreach (var bundle in prefabs)\\n            {\\n                var type = Type.GetType(bundle.type);\\n\\n                if (type != null && bundle.prefab != null)\\n                    m_PrefabsMap.Add(type, bundle.prefab);\\n            }\\n\\n            m_UIPanels.Clear();\\n\\n            m_DebugTreeState = DebugManager.instance.GetState();\\n            var panels = DebugManager.instance.panels;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n\\n            Rect parentRect = ((RectTransform)transform).rect;\\n            float parentWidth = Math.Min(parentRect.width, parentRect.height);\\n            float scaleRatio = parentWidth / Math.Min(Screen.height, Screen.width);\\n\\n            Rect safeAreaRect = Screen.safeArea;\\n            Vector2 margin = new Vector2(5, 5);\\n            var safeAreaOffsetLeft = safeAreaRect.xMin * scaleRatio;\\n            var safeAreaOffsetTop = -safeAreaRect.yMin * scaleRatio;\\n            Vector2 safeAreaOffset = new Vector2(safeAreaOffsetLeft, safeAreaOffsetTop) + margin;\\n#endif\\n\\n            DebugUIHandlerWidget selectedWidget = null;\\n            foreach (var panel in panels)\\n            {\\n                if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n                    continue;\\n\\n                var go = Instantiate(panelPrefab, transform, false);\\n                go.name = panel.displayName;\\n\\n#if UNITY_ANDROID || UNITY_IPHONE\\n                RectTransform rectTransform = go.GetComponent<RectTransform>();\\n                rectTransform.anchoredPosition = safeAreaOffset;\\n                rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n#endif\\n\\n                var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n                uiPanel.SetPanel(panel);\\n                uiPanel.Canvas = this;\\n                m_UIPanels.Add(uiPanel);\\n                var container = go.GetComponent<DebugUIHandlerContainer>();\\n                DebugUIHandlerWidget selected = null;\\n                Traverse(panel, container.contentHolder, null, ref selected);\\n\\n                if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n                {\\n                    selectedWidget = selected;\\n                }\\n            }\\n\\n            ActivatePanel(m_SelectedPanel, selectedWidget);\\n        }\\n```\\n\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start()\\n{\\n    int state = DebugManager.instance.GetState();\\n    if (m_DebugTreeState != state)\\n    {\\n        ResetAllHierarchy();\\n    }\\n\\n    HandleInput();\\n\\n\\n    if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n        m_UIPanels[m_SelectedPanel].UpdateScroll();\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Update()\\n{\\n    int state = DebugManager.instance.GetState();\\n    if (m_DebugTreeState != state)\\n    {\\n        ResetAllHierarchy();\\n    }\\n\\n    HandleInput();\\n\\n\\n    if (m_UIPanels != null && m_SelectedPanel < m_UIPanels.Count && m_UIPanels[m_SelectedPanel] != null)\\n        m_UIPanels[m_SelectedPanel].UpdateScroll();\\n}\\n\\nvoid Rebuild()\\n{\\n\\n    m_PrefabsMap.Clear();\\n    foreach (var bundle in prefabs)\\n    {\\n        var type = Type.GetType(bundle.type);\\n\\n        if (type != null && bundle.prefab != null)\\n            m_PrefabsMap.Add(type, bundle.prefab);\\n    }\\n\\n    m_UIPanels.Clear();\\n\\n    m_DebugTreeState = DebugManager.instance.GetState();\\n    var panels = DebugManager.instance.panels;\\n\\n    Rect parentRect = GetComponentInParent<RectTransform>().rect;\\n    float parentWidth = Math.Min(parentRect.width, parentRect.height);\\n    float scaleRatio = parentWidth / Math.Min(Screen.height, Screen.width);\\n\\n    Rect safeAreaRect = Screen.safeArea;\\n    Vector2 margin = new Vector2(5, 5);\\n    var safeAreaOffsetLeft = safeAreaRect.xMin * scaleRatio;\\n    var safeAreaOffsetTop = -safeAreaRect.yMin * scaleRatio;\\n    Vector2 safeAreaOffset = new Vector2(safeAreaOffsetLeft, safeAreaOffsetTop) + margin;\\n\\n    DebugUIHandlerWidget selectedWidget = null;\\n    foreach (var panel in panels)\\n    {\\n        if (panel.isEditorOnly || panel.children.Count(x => !x.isEditorOnly && !x.isHidden) == 0)\\n            continue;\\n\\n        var go = Instantiate(panelPrefab, transform, false);\\n        go.name = panel.displayName;\\n\\n        RectTransform rectTransform = go.GetComponent<RectTransform>();\\n        rectTransform.anchoredPosition = safeAreaOffset;\\n        rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, safeAreaRect.height * scaleRatio + 2 * safeAreaOffsetTop);\\n\\n        var uiPanel = go.GetComponent<DebugUIHandlerPanel>();\\n        uiPanel.SetPanel(panel);\\n        uiPanel.Canvas = this;\\n        m_UIPanels.Add(uiPanel);\\n        var container = go.GetComponent<DebugUIHandlerContainer>();\\n        DebugUIHandlerWidget selected = null;\\n        Traverse(panel, container.contentHolder, null, ref selected);\\n\\n        if (selected != null && selected.GetWidget().queryPath.Contains(panel.queryPath))\\n        {\\n            selectedWidget = selected;\\n        }\\n    }\\n\\n    ActivatePanel(m_SelectedPanel, selectedWidget);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739931291,\"model\":\"gpt-3.5-turbo-0125\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_0165350fbb\",\"usage\":{\"completion_tokens\":2106,\"prompt_tokens\":1080,\"total_tokens\":3186,\"completion_tokens_details\":null,\"prompt_tokens_details\":null}}"