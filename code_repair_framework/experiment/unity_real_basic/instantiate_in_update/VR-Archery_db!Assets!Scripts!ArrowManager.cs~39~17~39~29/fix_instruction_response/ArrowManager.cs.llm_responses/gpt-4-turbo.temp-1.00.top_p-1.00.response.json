"{\"id\":\"chatcmpl-B1sYLqPub5u5nBGzyL9uOYzDG4cWc\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    private Queue<GameObject> arrowPool = new Queue<GameObject>();\\n    private int poolSize = 10; // Create a pool of 10 arrows or any number you see fit\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n\\n        // Initialize the arrow pool\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            if (arrowPool.Count > 0)\\n            {\\n                currentArrow = arrowPool.Dequeue();\\n                currentArrow.SetActive(true);\\n                currentArrow.transform.SetParent(controler.transform, false);\\n                currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n                currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n                hasArrow = true;\\n            }\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            // Fire the arrow logic here\\n\\n            // Once the arrow is fired, you can handle it\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.SetParent(null);\\n            LastArrow = currentArrow;\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (LastArrow != null)\\n        {\\n            LastArrow.SetActive(false);\\n            arrowPool.Enqueue(LastArrow);\\n            LastArrow = null;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private List<GameObject> arrowPool;\\n    private int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n\\n        // Initialize the object pool\\n        arrowPool = new List<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Add(arrow);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            } \\n            else if (isAttached) \\n            {\\n                Fire();\\n            }\\n        }\\n        else \\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            currentArrow = GetArrowFromPool();\\n            if (currentArrow != null)\\n            {\\n                currentArrow.transform.SetParent(controler.transform);\\n                currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n                currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n                currentArrow.SetActive(true);\\n                hasArrow = true;\\n            }\\n        }\\n    }\\n\\n    private GameObject GetArrowFromPool()\\n    {\\n        foreach (GameObject arrow in arrowPool)\\n        {\\n            if (!arrow.activeInHierarchy)\\n            {\\n                return arrow;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    private void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.transform.SetParent(null);\\n            Rigidbody rb = currentArrow.GetComponent<Rigidbody>();\\n            rb.isKinematic = false;\\n            rb.velocity = controler.transform.forward * 10f; // Example firing speed\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n\\n    private void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.transform.SetParent(null);\\n            currentArrow.SetActive(false);\\n            currentArrow = null;\\n            hasArrow = false;\\n            isAttached = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private Queue<GameObject> arrowPool = new Queue<GameObject>();\\n    private int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        InitializeArrowPool();\\n    }\\n\\n    void InitializeArrowPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            } \\n            else if (isAttached) \\n            {\\n                Fire();\\n            }\\n        }\\n        else \\n        {\\n            ThrowArrow();\\n        }\\n    }\\n\\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            if (arrowPool.Count > 0)\\n            {\\n                currentArrow = arrowPool.Dequeue();\\n                currentArrow.SetActive(true);\\n                currentArrow.transform.SetParent(controler.transform);\\n                currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n                currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n                hasArrow = true;\\n            }\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            // Logic to fire the arrow...\\n            currentArrow.transform.SetParent(null);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            isAttached = false;\\n            hasArrow = false;\\n            currentArrow = null;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        // Logic for throwing arrow\\n        if (currentArrow != null)\\n        {\\n            currentArrow.SetActive(false);\\n            arrowPool.Enqueue(currentArrow);\\n        }\\n        isAttached = false;\\n        hasArrow = false;\\n        currentArrow = null;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n\\n    private Queue<GameObject> arrowPool = new Queue<GameObject>();\\n    public int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        \\n        InitializeArrowPool();\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void InitializeArrowPool()\\n    {\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n    \\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null && arrowPool.Count > 0)\\n        {\\n            currentArrow = arrowPool.Dequeue();\\n            currentArrow.SetActive(true);\\n            currentArrow.transform.SetParent(controler.transform);\\n            currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n            hasArrow = true;\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.GetComponent<Rigidbody>().isKinematic = false;\\n            currentArrow.transform.SetParent(null);\\n            // Additional code to fire the arrow\\n            // Reuse the currentArrow after firing\\n            arrowPool.Enqueue(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        if (currentArrow != null)\\n        {\\n            currentArrow.SetActive(false);\\n            currentArrow.transform.SetParent(null);\\n            arrowPool.Enqueue(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ArrowManager : MonoBehaviour\\n{\\n    private GameObject currentArrow;\\n    public static ArrowManager Instance;\\n    public OVRInput.Controller controller;\\n    public GameObject controler;\\n    public GameObject arrowPrefab;\\n    public GameObject LastArrow;\\n    public GameObject arrowStartPoint;\\n    public TextMesh debug;\\n    private bool hasArrow = false;\\n    private bool isAttached = false;\\n    private Queue<GameObject> arrowPool = new Queue<GameObject>();\\n    private const int poolSize = 10;\\n\\n    void Awake()\\n    {\\n        if (Instance == null)\\n            Instance = this;\\n        \\n        // Initialize arrow pool\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject arrow = Instantiate(arrowPrefab);\\n            arrow.SetActive(false);\\n            arrowPool.Enqueue(arrow);\\n        }\\n    }\\n\\n    void OnDestroy()\\n    {\\n        if (Instance == this)\\n            Instance = null;\\n    }\\n\\n    void Update()\\n    {\\n        debug.text = controler.transform.rotation.x.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.y.ToString() +\\n                     \\\"\\\\n\\\" + controler.transform.rotation.z.ToString();\\n        if (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0)\\n        {\\n            if (!hasArrow)\\n            {\\n                AttachArrow();\\n            }\\n            else if (isAttached)\\n            {\\n                Fire();\\n            }\\n        }\\n        else\\n        {\\n            ThrowArrow();\\n        }\\n    }\\n\\n    public void AttachArrow()\\n    {\\n        if (currentArrow == null)\\n        {\\n            if (arrowPool.Count > 0)\\n            {\\n                currentArrow = arrowPool.Dequeue();\\n                currentArrow.SetActive(true);\\n                currentArrow.transform.SetParent(controler.transform);\\n                currentArrow.transform.localPosition = new Vector3(0.1f, 0f, 0.3f);\\n                currentArrow.GetComponent<Rigidbody>().isKinematic = true;\\n                hasArrow = true;\\n            }\\n        }\\n    }\\n\\n    public void Fire()\\n    {\\n        // Implement the Fire logic\\n    }\\n\\n    public void ThrowArrow()\\n    {\\n        // Implement the ThrowArrow logic\\n\\n        if (currentArrow != null)\\n        {\\n            currentArrow.SetActive(false);\\n            arrowPool.Enqueue(currentArrow);\\n            currentArrow = null;\\n            hasArrow = false;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739787729,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_f3927aa00d\",\"usage\":{\"completion_tokens\":2864,\"prompt_tokens\":468,\"total_tokens\":3332,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"