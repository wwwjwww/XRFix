"{\"id\":\"chatcmpl-Brn05Z754s39OAiW7iZBq4EC6I1PA\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class BalloonSpawner : MonoBehaviour\\n    {\\n        public float minSpawnTime = 5f;\\n        public float maxSpawnTime = 15f;\\n        private float nextSpawnTime;\\n        public GameObject balloonPrefab;\\n\\n        public bool autoSpawn = true;\\n        public bool spawnAtStartup = true;\\n\\n        public bool playSounds = true;\\n        public SoundPlayOneshot inflateSound;\\n        public SoundPlayOneshot stretchSound;\\n\\n        public bool sendSpawnMessageToParent = false;\\n\\n        public float scale = 1f;\\n\\n        public Transform spawnDirectionTransform;\\n        public float spawnForce;\\n\\n        public bool attachBalloon = false;\\n\\n        public Balloon.BalloonColor color = Balloon.BalloonColor.Random;\\n        \\n        private List<GameObject> balloonPool;\\n        public int poolSize = 10;\\n\\n        void Start()\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return;\\n            }\\n\\n            InitializePool();\\n\\n            if (autoSpawn && spawnAtStartup)\\n            {\\n                SpawnBalloonFromPool(color);\\n                nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return;\\n            }\\n\\n            if ((Time.time > nextSpawnTime) && autoSpawn)\\n            {\\n                SpawnBalloonFromPool(color);\\n                nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n            }\\n        }\\n\\n        private void InitializePool()\\n        {\\n            balloonPool = new List<GameObject>();\\n            for (int i = 0; i < poolSize; i++)\\n            {\\n                GameObject balloon = Instantiate(balloonPrefab);\\n                balloon.SetActive(false);\\n                balloon.transform.SetParent(this.transform);\\n                balloonPool.Add(balloon);\\n            }\\n        }\\n\\n        private GameObject GetPooledBalloon()\\n        {\\n            for (int i = 0; i < balloonPool.Count; i++)\\n            {\\n                if (!balloonPool[i].activeInHierarchy)\\n                {\\n                    return balloonPool[i];\\n                }\\n            }\\n\\n            GameObject balloon = Instantiate(balloonPrefab);\\n            balloon.SetActive(false);\\n            balloon.transform.SetParent(this.transform);\\n            balloonPool.Add(balloon);\\n            Debug.LogWarning(\\\"Expanded balloon pool. Consider increasing initial pool size.\\\");\\n            return balloon;\\n        }\\n\\n        public GameObject SpawnBalloonFromPool(Balloon.BalloonColor color = Balloon.BalloonColor.Red)\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return null;\\n            }\\n\\n            GameObject balloon = GetPooledBalloon();\\n            balloon.transform.position = transform.position;\\n            balloon.transform.rotation = transform.rotation;\\n            balloon.transform.localScale = new Vector3(scale, scale, scale);\\n            balloon.SetActive(true);\\n\\n            if (attachBalloon)\\n            {\\n                balloon.transform.parent = transform;\\n            }\\n\\n            if (sendSpawnMessageToParent)\\n            {\\n                if (transform.parent != null)\\n                {\\n                    transform.parent.SendMessage(\\\"OnBalloonSpawned\\\", balloon, SendMessageOptions.DontRequireReceiver);\\n                }\\n            }\\n\\n            if (playSounds)\\n            {\\n                if (inflateSound != null)\\n                {\\n                    inflateSound.Play();\\n                }\\n                if (stretchSound != null)\\n                {\\n                    stretchSound.Play();\\n                }\\n            }\\n            balloon.GetComponentInChildren<Balloon>().SetColor(color);\\n            if (spawnDirectionTransform != null)\\n            {\\n                balloon.GetComponentInChildren<Rigidbody>().AddForce(spawnDirectionTransform.forward * spawnForce);\\n            }\\n\\n            return balloon;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\ufeff//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class BalloonSpawner : MonoBehaviour\\n    {\\n        public float minSpawnTime = 5f;\\n        public float maxSpawnTime = 15f;\\n        private float nextSpawnTime;\\n        public GameObject balloonPrefab;\\n        public int poolSize = 10;\\n        private List<GameObject> balloonPool;\\n\\n        public bool autoSpawn = true;\\n        public bool spawnAtStartup = true;\\n\\n        public bool playSounds = true;\\n        public SoundPlayOneshot inflateSound;\\n        public SoundPlayOneshot stretchSound;\\n\\n        public bool sendSpawnMessageToParent = false;\\n\\n        public float scale = 1f;\\n\\n        public Transform spawnDirectionTransform;\\n        public float spawnForce;\\n\\n        public bool attachBalloon = false;\\n\\n        public Balloon.BalloonColor color = Balloon.BalloonColor.Random;\\n\\n        void Start()\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return;\\n            }\\n\\n            // Initialize the balloon pool\\n            balloonPool = new List<GameObject>();\\n            for (int i = 0; i < poolSize; i++)\\n            {\\n                GameObject balloon = Instantiate(balloonPrefab);\\n                balloon.SetActive(false);\\n                balloonPool.Add(balloon);\\n            }\\n\\n            if (autoSpawn && spawnAtStartup)\\n            {\\n                SpawnBalloon(color);\\n                nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return;\\n            }\\n\\n            if ((Time.time > nextSpawnTime) && autoSpawn)\\n            {\\n                GameObject balloon = GetPooledBalloon();\\n                if (balloon != null)\\n                {\\n                    SpawnBalloon(color, balloon);\\n                    nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n                }\\n            }\\n        }\\n\\n        private GameObject GetPooledBalloon()\\n        {\\n            for (int i = 0; i < balloonPool.Count; i++)\\n            {\\n                if (!balloonPool[i].activeInHierarchy)\\n                {\\n                    return balloonPool[i];\\n                }\\n            }\\n\\n            // Optionally expand pool\\n            GameObject balloon = Instantiate(balloonPrefab);\\n            balloon.SetActive(false);\\n            balloonPool.Add(balloon);\\n            Debug.LogWarning(\\\"Balloon pool expanded. Consider increasing initial pool size.\\\");\\n            return balloon;\\n        }\\n\\n        public void SpawnBalloon(Balloon.BalloonColor color, GameObject balloon = null)\\n        {\\n            if (balloon == null)\\n            {\\n                balloon = Instantiate(balloonPrefab, transform.position, transform.rotation);\\n            }\\n\\n            balloon.transform.position = transform.position;\\n            balloon.transform.rotation = transform.rotation;\\n            balloon.transform.localScale = new Vector3(scale, scale, scale);\\n            balloon.SetActive(true);\\n\\n            if (attachBalloon)\\n            {\\n                balloon.transform.parent = transform;\\n            }\\n\\n            if (sendSpawnMessageToParent)\\n            {\\n                if (transform.parent != null)\\n                {\\n                    transform.parent.SendMessage(\\\"OnBalloonSpawned\\\", balloon, SendMessageOptions.DontRequireReceiver);\\n                }\\n            }\\n\\n            if (playSounds)\\n            {\\n                if (inflateSound != null)\\n                {\\n                    inflateSound.Play();\\n                }\\n                if (stretchSound != null)\\n                {\\n                    stretchSound.Play();\\n                }\\n            }\\n\\n            balloon.GetComponentInChildren<Balloon>().SetColor(color);\\n            if (spawnDirectionTransform != null)\\n            {\\n                balloon.GetComponentInChildren<Rigidbody>().AddForce(spawnDirectionTransform.forward * spawnForce);\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\ufeff//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class BalloonSpawner : MonoBehaviour\\n    {\\n        public float minSpawnTime = 5f;\\n        public float maxSpawnTime = 15f;\\n        private float nextSpawnTime;\\n        public GameObject balloonPrefab;\\n\\n        public bool autoSpawn = true;\\n        public bool spawnAtStartup = true;\\n\\n        public bool playSounds = true;\\n        public SoundPlayOneshot inflateSound;\\n        public SoundPlayOneshot stretchSound;\\n\\n        public bool sendSpawnMessageToParent = false;\\n\\n        public float scale = 1f;\\n\\n        public Transform spawnDirectionTransform;\\n        public float spawnForce;\\n\\n        public bool attachBalloon = false;\\n\\n        public Balloon.BalloonColor color = Balloon.BalloonColor.Random;\\n\\n        private List<GameObject> balloonPool;\\n        public int poolSize = 10;\\n\\n        void Start()\\n        {\\n            balloonPool = new List<GameObject>();\\n            for (int i = 0; i < poolSize; i++)\\n            {\\n                GameObject balloon = Instantiate(balloonPrefab);\\n                balloon.SetActive(false);\\n                balloonPool.Add(balloon);\\n            }\\n\\n            if (balloonPrefab == null)\\n            {\\n                return;\\n            }\\n\\n            if (autoSpawn && spawnAtStartup)\\n            {\\n                SpawnBalloon(color);\\n                nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return;\\n            }\\n\\n            if ((Time.time > nextSpawnTime) && autoSpawn)\\n            {\\n                SpawnBalloon(color);\\n                nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n            }\\n        }\\n\\n        private GameObject GetPooledBalloon()\\n        {\\n            foreach (var balloon in balloonPool)\\n            {\\n                if (!balloon.activeInHierarchy)\\n                {\\n                    return balloon;\\n                }\\n            }\\n\\n            // Expand pool if necessary\\n            GameObject balloon = Instantiate(balloonPrefab);\\n            balloon.SetActive(false);\\n            balloonPool.Add(balloon);\\n            Debug.LogWarning(\\\"Expanded balloon pool. Consider increasing initial pool size.\\\");\\n            return balloon;\\n        }\\n\\n        public void ReturnToPool(GameObject balloon)\\n        {\\n            balloon.SetActive(false);\\n        }\\n\\n        public GameObject SpawnBalloon(Balloon.BalloonColor color = Balloon.BalloonColor.Red)\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return null;\\n            }\\n            GameObject balloon = GetPooledBalloon();\\n            balloon.SetActive(true);\\n            balloon.transform.position = transform.position;\\n            balloon.transform.rotation = transform.rotation;\\n            balloon.transform.localScale = new Vector3(scale, scale, scale);\\n\\n            if (attachBalloon)\\n            {\\n                balloon.transform.parent = transform;\\n            }\\n\\n            if (sendSpawnMessageToParent)\\n            {\\n                if (transform.parent != null)\\n                {\\n                    transform.parent.SendMessage(\\\"OnBalloonSpawned\\\", balloon, SendMessageOptions.DontRequireReceiver);\\n                }\\n            }\\n\\n            if (playSounds)\\n            {\\n                if (inflateSound != null)\\n                {\\n                    inflateSound.Play();\\n                }\\n                if (stretchSound != null)\\n                {\\n                    stretchSound.Play();\\n                }\\n            }\\n            balloon.GetComponentInChildren<Balloon>().SetColor(color);\\n            if (spawnDirectionTransform != null)\\n            {\\n                balloon.GetComponentInChildren<Rigidbody>().AddForce(spawnDirectionTransform.forward * spawnForce);\\n            }\\n\\n            return balloon;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class BalloonSpawner : MonoBehaviour\\n    {\\n        public float minSpawnTime = 5f;\\n        public float maxSpawnTime = 15f;\\n        private float nextSpawnTime;\\n        public GameObject balloonPrefab;\\n\\n        public bool autoSpawn = true;\\n        public bool spawnAtStartup = true;\\n\\n        public bool playSounds = true;\\n        public SoundPlayOneshot inflateSound;\\n        public SoundPlayOneshot stretchSound;\\n\\n        public bool sendSpawnMessageToParent = false;\\n\\n        public float scale = 1f;\\n\\n        public Transform spawnDirectionTransform;\\n        public float spawnForce;\\n\\n        public bool attachBalloon = false;\\n\\n        public Balloon.BalloonColor color = Balloon.BalloonColor.Random;\\n\\n        public int poolSize = 10; // Pool size for balloon objects\\n        private List<GameObject> balloonPool;\\n\\n        void Start()\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return;\\n            }\\n\\n            // Initialize balloon pool\\n            balloonPool = new List<GameObject>();\\n            for (int i = 0; i < poolSize; i++)\\n            {\\n                GameObject obj = Instantiate(balloonPrefab);\\n                obj.SetActive(false);\\n                balloonPool.Add(obj);\\n            }\\n\\n            if (autoSpawn && spawnAtStartup)\\n            {\\n                SpawnBalloon(color);\\n                nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if (balloonPrefab == null)\\n            {\\n                return;\\n            }\\n\\n            if ((Time.time > nextSpawnTime) && autoSpawn)\\n            {\\n                SpawnBalloon(color);\\n                nextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n            }\\n        }\\n\\n        public GameObject SpawnBalloon(Balloon.BalloonColor color = Balloon.BalloonColor.Red)\\n        {\\n            GameObject balloon = GetPooledBalloon();\\n            if (balloon == null)\\n            {\\n                return null;\\n            }\\n\\n            balloon.transform.position = transform.position;\\n            balloon.transform.rotation = transform.rotation;\\n            balloon.transform.localScale = new Vector3(scale, scale, scale);\\n            balloon.SetActive(true);\\n\\n            if (attachBalloon)\\n            {\\n                balloon.transform.parent = transform;\\n            }\\n\\n            if (sendSpawnMessageToParent)\\n            {\\n                if (transform.parent != null)\\n                {\\n                    transform.parent.SendMessage(\\\"OnBalloonSpawned\\\", balloon, SendMessageOptions.DontRequireReceiver);\\n                }\\n            }\\n\\n            if (playSounds)\\n            {\\n                if (inflateSound != null)\\n                {\\n                    inflateSound.Play();\\n                }\\n                if (stretchSound != null)\\n                {\\n                    stretchSound.Play();\\n                }\\n            }\\n\\n            balloon.GetComponentInChildren<Balloon>().SetColor(color);\\n            if (spawnDirectionTransform != null)\\n            {\\n                balloon.GetComponentInChildren<Rigidbody>().AddForce(spawnDirectionTransform.forward * spawnForce);\\n            }\\n\\n            return balloon;\\n        }\\n\\n        private GameObject GetPooledBalloon()\\n        {\\n            for (int i = 0; i < balloonPool.Count; i++)\\n            {\\n                if (!balloonPool[i].activeInHierarchy)\\n                {\\n                    return balloonPool[i];\\n                }\\n            }\\n            return null;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n\\n\\tpublic class BalloonSpawner : MonoBehaviour\\n\\t{\\n\\t\\tpublic float minSpawnTime = 5f;\\n\\t\\tpublic float maxSpawnTime = 15f;\\n\\t\\tprivate float nextSpawnTime;\\n\\t\\tpublic GameObject balloonPrefab;\\n\\n\\t\\tpublic bool autoSpawn = true;\\n\\t\\tpublic bool spawnAtStartup = true;\\n\\n\\t\\tpublic bool playSounds = true;\\n\\t\\tpublic SoundPlayOneshot inflateSound;\\n\\t\\tpublic SoundPlayOneshot stretchSound;\\n\\n\\t\\tpublic bool sendSpawnMessageToParent = false;\\n\\n\\t\\tpublic float scale = 1f;\\n\\n\\t\\tpublic Transform spawnDirectionTransform;\\n\\t\\tpublic float spawnForce;\\n\\n\\t\\tpublic bool attachBalloon = false;\\n\\n\\t\\tpublic Balloon.BalloonColor color = Balloon.BalloonColor.Random;\\n\\n\\t\\tpublic int poolSize = 10;\\n\\t\\tprivate List<GameObject> balloonPool;\\n\\n\\t\\tvoid Start()\\n\\t\\t{\\n\\t\\t\\tif (balloonPrefab == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tInitializePool();\\n\\n\\t\\t\\tif (autoSpawn && spawnAtStartup)\\n\\t\\t\\t{\\n\\t\\t\\t\\tSpawnBalloon(color);\\n\\t\\t\\t\\tnextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid InitializePool()\\n\\t\\t{\\n\\t\\t\\tballoonPool = new List<GameObject>();\\n\\t\\t\\tfor (int i = 0; i < poolSize; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tGameObject obj = Instantiate(balloonPrefab);\\n\\t\\t\\t\\tobj.SetActive(false);\\n\\t\\t\\t\\tballoonPool.Add(obj);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tGameObject GetPooledBalloon()\\n\\t\\t{\\n\\t\\t\\tfor (int i = 0; i < balloonPool.Count; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (!balloonPool[i].activeInHierarchy)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\treturn balloonPool[i];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tGameObject obj = Instantiate(balloonPrefab);\\n\\t\\t\\tobj.SetActive(false);\\n\\t\\t\\tballoonPool.Add(obj);\\n\\t\\t\\tDebug.LogWarning(\\\"Expanded balloon pool. Consider increasing initial pool size.\\\");\\n\\t\\t\\treturn obj;\\n\\t\\t}\\n\\n\\t\\tvoid Update()\\n\\t\\t{\\n\\t\\t\\tif (balloonPrefab == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ((Time.time > nextSpawnTime) && autoSpawn)\\n\\t\\t\\t{\\n\\t\\t\\t\\tSpawnBalloon(color);\\n\\t\\t\\t\\tnextSpawnTime = Random.Range(minSpawnTime, maxSpawnTime) + Time.time;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tpublic GameObject SpawnBalloon(Balloon.BalloonColor color = Balloon.BalloonColor.Red)\\n\\t\\t{\\n\\t\\t\\tif (balloonPrefab == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t\\tGameObject balloon = GetPooledBalloon();\\n\\t\\t\\tballoon.transform.position = transform.position;\\n\\t\\t\\tballoon.transform.rotation = transform.rotation;\\n\\t\\t\\tballoon.transform.localScale = new Vector3(scale, scale, scale);\\n\\n\\t\\t\\tif (attachBalloon)\\n\\t\\t\\t{\\n\\t\\t\\t\\tballoon.transform.parent = transform;\\n\\t\\t\\t}\\n\\n\\t\\t\\tballoon.SetActive(true);\\n\\n\\t\\t\\tif (sendSpawnMessageToParent)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (transform.parent != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttransform.parent.SendMessage(\\\"OnBalloonSpawned\\\", balloon, SendMessageOptions.DontRequireReceiver);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (playSounds)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (inflateSound != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tinflateSound.Play();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (stretchSound != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstretchSound.Play();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tballoon.GetComponentInChildren<Balloon>().SetColor(color);\\n\\t\\t\\tif (spawnDirectionTransform != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tballoon.GetComponentInChildren<Rigidbody>().AddForce(spawnDirectionTransform.forward * spawnForce);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn balloon;\\n\\t\\t}\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752159441,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":3860,\"prompt_tokens\":1092,\"total_tokens\":4952,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"