"{\"id\":\"chatcmpl-B2U6ohbA2wVwv9HZH0HkiNOOPVhG5\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```c#\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.UI;\\nusing System;\\n\\nnamespace OculusSampleFramework\\n{\\n    public class OVROverlaySample : MonoBehaviour\\n    {\\n        bool inMenu;\\n        const string ovrOverlayID = \\\"OVROverlayID\\\";\\n        const string applicationID = \\\"ApplicationID\\\";\\n        const string noneID = \\\"NoneID\\\";\\n\\n        Toggle applicationRadioButton;\\n        Toggle noneRadioButton;\\n\\n        [Header(\\\"App vs Compositor Comparison Settings\\\")]\\n        public GameObject mainCamera;\\n        public GameObject uiCamera;\\n        public GameObject uiGeoParent;\\n        public GameObject worldspaceGeoParent;\\n        public OVROverlay cameraRenderOverlay;\\n        public OVROverlay renderingLabelOverlay;\\n        public Texture applicationLabelTexture;\\n        public Texture compositorLabelTexture;\\n\\n        [Header(\\\"Level Loading Sim Settings\\\")]\\n        public GameObject prefabForLevelLoadSim;\\n        public OVROverlay cubemapOverlay;\\n        public OVROverlay loadingTextQuadOverlay;\\n        public float distanceFromCamToLoadText;\\n        public float cubeSpawnRadius;\\n        public float heightBetweenItems;\\n        public int numObjectsPerLevel;\\n        public int numLevels;\\n        public int numLoopsTrigger = 500000000;\\n        List<GameObject> spawnedCubes = new List<GameObject>();\\n\\n        #region MonoBehaviour handler\\n\\n        void Start()\\n        {\\n            DebugUIBuilder.instance.AddLabel(\\\"OVROverlay Sample\\\");\\n            DebugUIBuilder.instance.AddDivider();\\n            DebugUIBuilder.instance.AddLabel(\\\"Level Loading Example\\\");\\n            DebugUIBuilder.instance.AddButton(\\\"Simulate Level Load\\\", TriggerLoad);\\n            DebugUIBuilder.instance.AddButton(\\\"Destroy Cubes\\\", TriggerUnload);\\n            DebugUIBuilder.instance.AddDivider();\\n            DebugUIBuilder.instance.AddLabel(\\\"OVROverlay vs. Application Render Comparison\\\");\\n            DebugUIBuilder.instance\\n                .AddRadio(\\\"OVROverlay\\\", \\\"group\\\", delegate (Toggle t) { RadioPressed(ovrOverlayID, \\\"group\\\", t); })\\n                .GetComponentInChildren<Toggle>();\\n            applicationRadioButton = DebugUIBuilder.instance\\n                .AddRadio(\\\"Application\\\", \\\"group\\\", delegate (Toggle t) { RadioPressed(applicationID, \\\"group\\\", t); })\\n                .GetComponentInChildren<Toggle>();\\n            noneRadioButton = DebugUIBuilder.instance\\n                .AddRadio(\\\"None\\\", \\\"group\\\", delegate (Toggle t) { RadioPressed(noneID, \\\"group\\\", t); })\\n                .GetComponentInChildren<Toggle>();\\n\\n            DebugUIBuilder.instance.Show();\\n\\n            CameraAndRenderTargetSetup();\\n            cameraRenderOverlay.enabled = true;\\n            cameraRenderOverlay.currentOverlayShape = OVROverlay.OverlayShape.Quad;\\n            spawnedCubes.Capacity = numObjectsPerLevel * numLevels;\\n        }\\n\\n        void Update()\\n        {\\n            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\\n            {\\n                if (inMenu) DebugUIBuilder.instance.Hide();\\n                else DebugUIBuilder.instance.Show();\\n                inMenu = !inMenu;\\n            }\\n\\n            if (Input.GetKeyDown(KeyCode.A))\\n            {\\n                TriggerLoad();\\n            }\\n        }\\n\\n        #endregion\\n\\n        #region Private Functions\\n\\n        void SimulateLevelLoad()\\n        {\\n            int numToPrint = 0;\\n            for (int p = 0; p < numLoopsTrigger; p++)\\n            {\\n                numToPrint++;\\n            }\\n\\n            Debug.Log(\\\"Finished \\\" + numToPrint + \\\" Loops\\\");\\n            Vector3 playerPos = mainCamera.transform.position;\\n            playerPos.y = 0.5f;\\n\\n            for (int j = 0; j < numLevels; j++)\\n            {\\n                for (var i = 0; i < numObjectsPerLevel; i++)\\n                {\\n                    var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\\n                    float stagger = (i % 2 == 0) ? 1.5f : 1.0f;\\n                    var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\\n                    pos.y = j * heightBetweenItems;\\n                    var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\\n                    var newObjTransform = newInst.transform;\\n                    newObjTransform.LookAt(playerPos);\\n                    Vector3 newAngle = newObjTransform.rotation.eulerAngles;\\n                    newAngle.x = 0.0f;\\n                    newObjTransform.rotation = Quaternion.Euler(newAngle);\\n                    spawnedCubes.Add(newInst);\\n                }\\n            }\\n        }\\n\\n        #endregion\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n        void Update()\\n        {\\n            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\\n            {\\n                if (inMenu) DebugUIBuilder.instance.Hide();\\n                else DebugUIBuilder.instance.Show();\\n                inMenu = !inMenu;\\n            }\\n\\n            if (Input.GetKeyDown(KeyCode.A))\\n            {\\n                TriggerLoad();\\n            }\\n        }\\n\\n        void SimulateLevelLoad()\\n        {\\n            StartCoroutine(SimulateLevelLoadCoroutine());\\n        }\\n\\n        IEnumerator SimulateLevelLoadCoroutine()\\n        {\\n            int numToPrint = 0;\\n            for (int p = 0; p < numLoopsTrigger; p++)\\n            {\\n                numToPrint++;\\n                if (p % 100000 == 0) yield return null; // Spread the computation over multiple frames\\n            }\\n\\n            Debug.Log(\\\"Finished \\\" + numToPrint + \\\" Loops\\\");\\n            Vector3 playerPos = mainCamera.transform.position;\\n            playerPos.y = 0.5f;\\n\\n            for (int j = 0; j < numLevels; j++)\\n            {\\n                for (var i = 0; i < numObjectsPerLevel; i++)\\n                {\\n                    var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\\n                    float stagger = (i % 2 == 0) ? 1.5f : 1.0f;\\n                    var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\\n                    pos.y = j * heightBetweenItems;\\n                    var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\\n                    var newObjTransform = newInst.transform;\\n                    newObjTransform.LookAt(playerPos);\\n                    Vector3 newAngle = newObjTransform.rotation.eulerAngles;\\n                    newAngle.x = 0.0f;\\n                    newObjTransform.rotation = Quaternion.Euler(newAngle);\\n                    spawnedCubes.Add(newInst);\\n                    yield return null; // Spread Instantiate calls over multiple frames\\n                }\\n            }\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\\n            {\\n                if (inMenu) DebugUIBuilder.instance.Hide();\\n                else DebugUIBuilder.instance.Show();\\n                inMenu = !inMenu;\\n            }\\n\\n            if (Input.GetKeyDown(KeyCode.A))\\n            {\\n                TriggerLoad();\\n            }\\n        }\\n\\n        void SimulateLevelLoad()\\n        {\\n            StartCoroutine(SimulateLevelLoadCoroutine());\\n        }\\n\\n        IEnumerator SimulateLevelLoadCoroutine()\\n        {\\n            int numToPrint = 0;\\n            for (int p = 0; p < numLoopsTrigger; p++)\\n            {\\n                numToPrint++;\\n                if (p % 100000 == 0) yield return null;  // Yield occasionally to avoid blocking the main thread\\n            }\\n\\n            Debug.Log(\\\"Finished \\\" + numToPrint + \\\" Loops\\\");\\n            Vector3 playerPos = mainCamera.transform.position;\\n            playerPos.y = 0.5f;\\n\\n            for (int j = 0; j < numLevels; j++)\\n            {\\n                for (var i = 0; i < numObjectsPerLevel; i++)\\n                {\\n                    var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\\n                    float stagger = (i % 2 == 0) ? 1.5f : 1.0f;\\n                    var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\\n                    pos.y = j * heightBetweenItems;\\n                    var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\\n                    var newObjTransform = newInst.transform;\\n                    newObjTransform.LookAt(playerPos);\\n                    Vector3 newAngle = newObjTransform.rotation.eulerAngles;\\n                    newAngle.x = 0.0f;\\n                    newObjTransform.rotation = Quaternion.Euler(newAngle);\\n                    spawnedCubes.Add(newInst);\\n                    yield return null;  // Yield to spread instantiation over multiple frames\\n                }\\n            }\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n        void Update()\\n        {\\n            // Check if OVRInput buttons or keyboard input is pressed\\n            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\\n            {\\n                // Toggle the debug menu visibility\\n                if (inMenu) \\n                    DebugUIBuilder.instance.Hide();\\n                else \\n                    DebugUIBuilder.instance.Show();\\n\\n                // Toggle inMenu state\\n                inMenu = !inMenu;\\n            }\\n\\n            // Trigger level load with 'A' key\\n            if (Input.GetKeyDown(KeyCode.A))\\n            {\\n                TriggerLoad();\\n            }\\n        }\\n\\n        void SimulateLevelLoad()\\n        {\\n            int numToPrint = 0;\\n\\n            // Execute the dummy loop\\n            for (int p = 0; p < numLoopsTrigger; p++)\\n            {\\n                numToPrint++;\\n            }\\n\\n            Debug.Log(\\\"Finished \\\" + numToPrint + \\\" Loops\\\");\\n\\n            // Position adjustment for spawned objects relative to the player\\n            Vector3 playerPos = mainCamera.transform.position;\\n            playerPos.y = 0.5f;\\n\\n            for (int j = 0; j < numLevels; j++)\\n            {\\n                for (int i = 0; i < numObjectsPerLevel; i++)\\n                {\\n                    // Calculate position and rotation for each new cube\\n                    var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\\n                    float stagger = (i % 2 == 0) ? 1.5f : 1.0f;\\n                    var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\\n                    pos.y = j * heightBetweenItems;\\n\\n                    var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\\n                    var newObjTransform = newInst.transform;\\n                    newObjTransform.LookAt(playerPos);\\n\\n                    // Adjust rotation to ensure proper orientation\\n                    Vector3 newAngle = newObjTransform.rotation.eulerAngles;\\n                    newAngle.x = 0.0f;\\n                    newObjTransform.rotation = Quaternion.Euler(newAngle);\\n\\n                    // Add the newly instantiated object to the list for future management\\n                    spawnedCubes.Add(newInst);\\n                }\\n            }\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```c#\\n        void Update()\\n        {\\n            if (OVRInput.GetDown(OVRInput.Button.Two) || OVRInput.GetDown(OVRInput.Button.Start))\\n            {\\n                if (inMenu) DebugUIBuilder.instance.Hide();\\n                else DebugUIBuilder.instance.Show();\\n                inMenu = !inMenu;\\n            }\\n\\n            if (Input.GetKeyDown(KeyCode.A))\\n            {\\n                TriggerLoad();\\n            }\\n        }\\n\\n        void SimulateLevelLoad()\\n        {\\n            StartCoroutine(SimulateLevelLoadCoroutine());\\n        }\\n\\n        IEnumerator SimulateLevelLoadCoroutine()\\n        {\\n            int numToPrint = 0;\\n            for (int p = 0; p < numLoopsTrigger; p++)\\n            {\\n                numToPrint++;\\n                // Yield occasionally to avoid freezing the main thread.\\n                if (p % 10000 == 0)\\n                {\\n                    yield return null;\\n                }\\n            }\\n\\n            Debug.Log(\\\"Finished \\\" + numToPrint + \\\" Loops\\\");\\n            Vector3 playerPos = mainCamera.transform.position;\\n            playerPos.y = 0.5f;\\n\\n            for (int j = 0; j < numLevels; j++)\\n            {\\n                for (var i = 0; i < numObjectsPerLevel; i++)\\n                {\\n                    var angle = i * Mathf.PI * 2 / numObjectsPerLevel;\\n                    float stagger = (i % 2 == 0) ? 1.5f : 1.0f;\\n                    var pos = new Vector3(Mathf.Cos(angle), 0, Mathf.Sin(angle)) * cubeSpawnRadius * stagger;\\n                    pos.y = j * heightBetweenItems;\\n                    var newInst = Instantiate(prefabForLevelLoadSim, pos + playerPos, Quaternion.identity);\\n                    var newObjTransform = newInst.transform;\\n                    newObjTransform.LookAt(playerPos);\\n                    Vector3 newAngle = newObjTransform.rotation.eulerAngles;\\n                    newAngle.x = 0.0f;\\n                    newObjTransform.rotation = Quaternion.Euler(newAngle);\\n                    spawnedCubes.Add(newInst);\\n\\n                    // Yield occasionally to avoid freezing the main thread.\\n                    if (i % 10 == 0)\\n                    {\\n                        yield return null;\\n                    }\\n                }\\n            }\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1739932094,\"model\":\"gpt-4o-2024-11-20\",\"object\":\"chat.completion\",\"service_tier\":null,\"system_fingerprint\":\"fp_f3927aa00d\",\"usage\":{\"completion_tokens\":2799,\"prompt_tokens\":2319,\"total_tokens\":5118,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"