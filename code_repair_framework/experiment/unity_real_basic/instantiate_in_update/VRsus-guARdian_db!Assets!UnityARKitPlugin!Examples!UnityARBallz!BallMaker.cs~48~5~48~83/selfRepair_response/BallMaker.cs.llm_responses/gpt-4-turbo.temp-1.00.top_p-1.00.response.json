"{\"id\":\"chatcmpl-BrJCVv9p9P3USF2aLCYaleVkVqvx8\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n\\tpublic GameObject ballPrefab;\\n\\tpublic float createHeight;\\n\\tpublic float maxRayDistance = 30.0f;\\n\\tpublic LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\\n\\tprivate MaterialPropertyBlock props;\\n\\tprivate Queue<GameObject> ballPool;\\n\\tpublic int poolSize = 20;\\n\\n\\tvoid Start () {\\n\\t\\tprops = new MaterialPropertyBlock ();\\n\\t\\tballPool = new Queue<GameObject>();\\n\\n\\t\\t// Initialize the object pool\\n\\t\\tfor (int i = 0; i < poolSize; i++) {\\n\\t\\t\\tGameObject ballGO = Instantiate(ballPrefab);\\n\\t\\t\\tballGO.SetActive(false);\\n\\t\\t\\tballPool.Enqueue(ballGO);\\n\\t\\t}\\n\\t}\\n\\n\\tvoid CreateBall(Vector3 atPosition)\\n\\t{\\n\\t\\tGameObject ballGO;\\n\\n\\t\\tif (ballPool.Count > 0) {\\n\\t\\t\\tballGO = ballPool.Dequeue();\\n\\t\\t\\tballGO.transform.position = atPosition;\\n\\t\\t\\tballGO.transform.rotation = Quaternion.identity;\\n\\t\\t\\tballGO.SetActive(true);\\n\\t\\t} else {\\n\\t\\t\\tballGO = Instantiate(ballPrefab, atPosition, Quaternion.identity);\\n\\t\\t}\\n\\n\\t\\tfloat r = Random.Range(0.0f, 1.0f);\\n\\t\\tfloat g = Random.Range(0.0f, 1.0f);\\n\\t\\tfloat b = Random.Range(0.0f, 1.0f);\\n\\n\\t\\tprops.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n\\t\\tMeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n\\t\\trenderer.SetPropertyBlock(props);\\n\\t}\\n\\n\\tvoid Update () {\\n\\t\\t#if UNITY_EDITOR\\n\\t\\tif (Input.GetMouseButtonDown (0)) \\n\\t\\t{\\n\\t\\t\\tRay ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n\\t\\t\\tRaycastHit hit;\\n\\n\\t\\t\\tif (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \\n\\t\\t\\t{\\n\\t\\t\\t\\tCreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\\n\\n\\t\\t\\t\\tDebug.Log (string.Format (\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t#else\\n\\t\\tif (Input.touchCount > 0 )\\n\\t\\t{\\n\\t\\t\\tvar touch = Input.GetTouch(0);\\n\\t\\t\\tif (touch.phase == TouchPhase.Began)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n\\t\\t\\t\\tARPoint point = new ARPoint {\\n\\t\\t\\t\\t\\tx = screenPosition.x,\\n\\t\\t\\t\\t\\ty = screenPosition.y\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tList<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \\n\\t\\t\\t\\t\\tARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n\\t\\t\\t\\tif (hitResults.Count > 0) {\\n\\t\\t\\t\\t\\tforeach (var hitResult in hitResults) {\\n\\t\\t\\t\\t\\t\\tVector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\\n\\t\\t\\t\\t\\t\\tCreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t#endif\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n\\tpublic GameObject ballPrefab;\\n\\tpublic float createHeight;\\n\\tpublic float maxRayDistance = 30.0f;\\n\\tpublic LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\\n\\tprivate MaterialPropertyBlock props;\\n\\tprivate Queue<GameObject> ballPool;\\n\\tpublic int poolSize = 10;\\n\\n\\n\\tvoid Start () {\\n\\t\\tprops = new MaterialPropertyBlock ();\\n\\t\\tInitializeBallPool();\\n\\t}\\n\\n\\tvoid InitializeBallPool() {\\n\\t\\tballPool = new Queue<GameObject>();\\n\\t\\tfor (int i = 0; i < poolSize; i++) {\\n\\t\\t\\tGameObject ball = Instantiate(ballPrefab);\\n\\t\\t\\tball.SetActive(false);\\n\\t\\t\\tballPool.Enqueue(ball);\\n\\t\\t}\\n\\t}\\n\\n\\tvoid CreateBall(Vector3 atPosition) {\\n\\t\\tGameObject ballGO = GetBallFromPool();\\n\\t\\tif (ballGO != null) {\\n\\t\\t\\tballGO.transform.position = atPosition;\\n\\t\\t\\tballGO.SetActive(true);\\n\\n\\t\\t\\tfloat r = Random.Range(0.0f, 1.0f);\\n\\t\\t\\tfloat g = Random.Range(0.0f, 1.0f);\\n\\t\\t\\tfloat b = Random.Range(0.0f, 1.0f);\\n\\n\\t\\t\\tprops.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n\\t\\t\\tMeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n\\t\\t\\trenderer.SetPropertyBlock(props);\\n\\t\\t}\\n\\t}\\n\\n\\tGameObject GetBallFromPool() {\\n\\t\\tif (ballPool.Count > 0) {\\n\\t\\t\\treturn ballPool.Dequeue();\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\n\\tvoid Update () {\\n\\t\\t#if UNITY_EDITOR\\n\\t\\tif (Input.GetMouseButtonDown(0)) {\\n\\t\\t\\tRay ray = Camera.main.ScreenPointToRay(Input.mousePosition);\\n\\t\\t\\tRaycastHit hit;\\n\\n\\t\\t\\tif (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer)) {\\n\\t\\t\\t\\tCreateBall(new Vector3(hit.point.x, hit.point.y + createHeight, hit.point.z));\\n\\t\\t\\t\\tDebug.Log(string.Format(\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t#else\\n\\t\\tif (Input.touchCount > 0 ) {\\n\\t\\t\\tvar touch = Input.GetTouch(0);\\n\\t\\t\\tif (touch.phase == TouchPhase.Began) {\\n\\t\\t\\t\\tvar screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n\\t\\t\\t\\tARPoint point = new ARPoint {\\n\\t\\t\\t\\t\\tx = screenPosition.x,\\n\\t\\t\\t\\t\\ty = screenPosition.y\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tList<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, \\n\\t\\t\\t\\t\\tARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n\\t\\t\\t\\tif (hitResults.Count > 0) {\\n\\t\\t\\t\\t\\tforeach (var hitResult in hitResults) {\\n\\t\\t\\t\\t\\t\\tVector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n\\t\\t\\t\\t\\t\\tCreateBall(new Vector3(position.x, position.y + createHeight, position.z));\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t#endif\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  // ARKitPlane layer\\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballPool;\\n    public int poolSize = 10;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        ballPool = new Queue<GameObject>();\\n\\n        for (int i = 0; i < poolSize; i++) {\\n            GameObject ballGO = Instantiate(ballPrefab);\\n            ballGO.SetActive(false);\\n            ballPool.Enqueue(ballGO);\\n        }\\n    }\\n\\n    void CreateBall(Vector3 atPosition) {\\n        GameObject ballGO = ballPool.Count > 0 ? ballPool.Dequeue() : Instantiate(ballPrefab);\\n        ballGO.transform.position = atPosition;\\n        ballGO.SetActive(true);\\n\\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n\\n    void Update () {\\n        #if UNITY_EDITOR\\n        if (Input.GetMouseButtonDown (0)) {\\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer)) {\\n                CreateBall(new Vector3(hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                Debug.Log(string.Format(\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0) {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began) {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n\\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point,\\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n                        CreateBall(new Vector3(position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n\\n    void DeactivateAndEnqueueBall(GameObject ball) {\\n        ball.SetActive(false);\\n        ballPool.Enqueue(ball);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\ufeffusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer\\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballPool;\\n    public int poolSize = 10;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        ballPool = new Queue<GameObject>();\\n        InitializePool(poolSize);\\n    }\\n\\n    void InitializePool(int size) {\\n        for (int i = 0; i < size; i++) {\\n            GameObject obj = Instantiate(ballPrefab);\\n            obj.SetActive(false);\\n            ballPool.Enqueue(obj);\\n        }\\n    }\\n\\n    GameObject GetBallFromPool() {\\n        if (ballPool.Count > 0) {\\n            GameObject obj = ballPool.Dequeue();\\n            obj.SetActive(true);\\n            return obj;\\n        } else {\\n            GameObject obj = Instantiate(ballPrefab);\\n            return obj;\\n        }\\n    }\\n\\n    void ReturnBallToPool(GameObject obj) {\\n        obj.SetActive(false);\\n        ballPool.Enqueue(obj);\\n    }\\n\\n    void CreateBall(Vector3 atPosition) {\\n        GameObject ballGO = GetBallFromPool();\\n        ballGO.transform.position = atPosition;\\n        ballGO.transform.rotation = Quaternion.identity;\\n        \\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n\\n    void Update () {\\n        #if UNITY_EDITOR\\n        if (Input.GetMouseButtonDown (0)) \\n        {\\n            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \\n            {\\n                CreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\\n                Debug.Log (string.Format (\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0 )\\n        {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began)\\n            {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n                        \\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, \\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);\\n                        CreateBall (new Vector3 (position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.XR.iOS;\\n\\npublic class BallMaker : MonoBehaviour {\\n\\n    public GameObject ballPrefab;\\n    public float createHeight;\\n    public float maxRayDistance = 30.0f;\\n    public LayerMask collisionLayer = 1 << 10;  // ARKitPlane layer\\n    private MaterialPropertyBlock props;\\n    private Queue<GameObject> ballPool;\\n\\n    void Start () {\\n        props = new MaterialPropertyBlock ();\\n        InitializeBallPool(10);  // Initialize the pool with 10 balls or as many as needed\\n    }\\n\\n    void InitializeBallPool(int count) {\\n        ballPool = new Queue<GameObject>();\\n        for (int i = 0; i < count; i++) {\\n            GameObject ball = Instantiate(ballPrefab);\\n            ball.SetActive(false);\\n            ballPool.Enqueue(ball);\\n        }\\n    }\\n\\n    GameObject GetPooledBall() {\\n        if (ballPool.Count > 0) {\\n            GameObject ball = ballPool.Dequeue();\\n            ball.SetActive(true);\\n            return ball;\\n        }\\n        return Instantiate(ballPrefab);  // Fallback in case pool is empty\\n    }\\n\\n    void ReleaseBall(GameObject ball) {\\n        ball.SetActive(false);\\n        ballPool.Enqueue(ball);\\n    }\\n\\n    void CreateBall(Vector3 atPosition) {\\n        GameObject ballGO = GetPooledBall();\\n        ballGO.transform.position = atPosition;\\n        ballGO.transform.rotation = Quaternion.identity;\\n        \\n        float r = Random.Range(0.0f, 1.0f);\\n        float g = Random.Range(0.0f, 1.0f);\\n        float b = Random.Range(0.0f, 1.0f);\\n\\n        props.SetColor(\\\"_InstanceColor\\\", new Color(r, g, b));\\n\\n        MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();\\n        renderer.SetPropertyBlock(props);\\n    }\\n\\n    void Update () {\\n        #if UNITY_EDITOR\\n        if (Input.GetMouseButtonDown (0)) \\n        {\\n            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);\\n            RaycastHit hit;\\n\\n            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) \\n            {\\n                CreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));\\n\\n                Debug.Log (string.Format (\\\"x:{0:0.######} y:{1:0.######} z:{2:0.######}\\\", hit.point.x, hit.point.y, hit.point.z));\\n            }\\n        }\\n        #else\\n        if (Input.touchCount > 0)\\n        {\\n            var touch = Input.GetTouch(0);\\n            if (touch.phase == TouchPhase.Began)\\n            {\\n                var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);\\n                ARPoint point = new ARPoint {\\n                    x = screenPosition.x,\\n                    y = screenPosition.y\\n                };\\n                        \\n                List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point,\\n                    ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);\\n                if (hitResults.Count > 0) {\\n                    foreach (var hitResult in hitResults) {\\n                        Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);\\n                        CreateBall(new Vector3(position.x, position.y + createHeight, position.z));\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        #endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752044891,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_a288987b44\",\"usage\":{\"completion_tokens\":3529,\"prompt_tokens\":887,\"total_tokens\":4416,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"