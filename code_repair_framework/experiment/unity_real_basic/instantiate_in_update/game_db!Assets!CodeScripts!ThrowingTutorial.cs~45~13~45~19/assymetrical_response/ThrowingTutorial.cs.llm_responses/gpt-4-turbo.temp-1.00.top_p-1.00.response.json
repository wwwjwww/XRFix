"{\"id\":\"chatcmpl-B4fk4SCdWo3JvoH81UNsEAqjRL6zH\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; //after each throw\\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n\\n    private int throwCounter = 0; // counts throws\\n    private bool inCollider = false; // tracks if player is in collider\\n\\n    AudioManager audioManager;\\n\\n    private Queue<GameObject> objectPool;\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n        \\n        // Initialize the object pool\\n        objectPool = new Queue<GameObject>();\\n        for (int i = 0; i < totalThrows; i++)\\n        {\\n            GameObject obj = Instantiate(objectToThrow);\\n            obj.SetActive(false);\\n            objectPool.Enqueue(obj);\\n        }\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n    }\\n\\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n\\n            if(objectPool.Count > 0)\\n            {\\n                GameObject thrownObject = objectPool.Dequeue();\\n                thrownObject.transform.position = attackPoint.position;\\n                thrownObject.transform.rotation = attackPoint.rotation;\\n                thrownObject.SetActive(true);\\n\\n                Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n                rb.velocity = Vector3.zero; // Reset velocity\\n                rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n                throwCounter++;\\n            }\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); // Make the armor disappear\\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); // Make the sword appear\\n        }\\n\\n        totalThrows--;\\n\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; // after each throw\\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n\\n    private int throwCounter = 0; // counts throws\\n    private bool inCollider = false; // tracks if player is in collider\\n\\n    AudioManager audioManager;\\n\\n    private List<GameObject> objectPool = new List<GameObject>();\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n        InitializeObjectPool();\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n    }\\n\\n    private void InitializeObjectPool()\\n    {\\n        for (int i = 0; i < totalThrows; i++)\\n        {\\n            GameObject obj = Instantiate(objectToThrow);\\n            obj.SetActive(false);\\n            objectPool.Add(obj);\\n        }\\n    }\\n\\n    private GameObject GetPooledObject()\\n    {\\n        foreach (var obj in objectPool)\\n        {\\n            if (!obj.activeInHierarchy)\\n            {\\n                return obj;\\n            }\\n        }\\n\\n        return null;\\n    }\\n\\n    private void Update()\\n    {\\n        if (inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n\\n            GameObject thrownObject = GetPooledObject();\\n            if (thrownObject != null)\\n            {\\n                thrownObject.transform.position = attackPoint.position;\\n                thrownObject.transform.rotation = attackPoint.rotation;\\n                thrownObject.SetActive(true);\\n\\n                Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n                rb.velocity = Vector3.zero;\\n                rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n\\n                throwCounter++;\\n            }\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); // Make the armor disappear\\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); // Make the sword appear\\n        }\\n\\n        totalThrows--;\\n\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; //after each throw\\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n    private int throwCounter = 0; // counts throws\\n    private bool inCollider = false; // tracks if player is in collider\\n\\n    AudioManager audioManager;\\n\\n    private Queue<GameObject> objectPool;\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n        InitializeObjectPool();\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n    }\\n\\n    private void InitializeObjectPool()\\n    {\\n        objectPool = new Queue<GameObject>();\\n\\n        for (int i = 0; i < totalThrows; i++)\\n        {\\n            GameObject pooledObject = Instantiate(objectToThrow);\\n            pooledObject.SetActive(false);\\n            objectPool.Enqueue(pooledObject);\\n        }\\n    }\\n\\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n\\n            GameObject thrownObject = objectPool.Dequeue();\\n            thrownObject.transform.position = attackPoint.position;\\n            thrownObject.transform.rotation = attackPoint.rotation;\\n            thrownObject.SetActive(true);\\n            Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n            rb.velocity = Vector3.zero; // Reset velocity before applying force\\n            rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n            throwCounter++;\\n\\n            objectPool.Enqueue(thrownObject); // Recycle object back to pool after use\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); // Make the armor disappear\\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); // Make the sword appear\\n        }\\n\\n        totalThrows--;\\n\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing TMPro;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; //after each throw\\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    bool readyToThrow;\\n\\n    private int throwCounter = 0; // counts throws\\n    private bool inCollider = false; // tracks if player is in collider\\n\\n    AudioManager audioManager;\\n    private Queue<GameObject> objectPool;\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n        InitializeObjectPool();\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n    }\\n    \\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void InitializeObjectPool()\\n    {\\n        objectPool = new Queue<GameObject>();\\n\\n        for (int i = 0; i < totalThrows; i++)\\n        {\\n            GameObject obj = Instantiate(objectToThrow);\\n            obj.SetActive(false);\\n            objectPool.Enqueue(obj);\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        if (throwCounter < totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n\\n            GameObject thrownObject = objectPool.Dequeue();\\n            thrownObject.transform.position = attackPoint.position;\\n            thrownObject.transform.rotation = attackPoint.rotation;\\n            thrownObject.SetActive(true);\\n\\n            Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n            rb.velocity = Vector3.zero; // Reset velocity\\n            rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n\\n            objectPool.Enqueue(thrownObject);\\n            throwCounter++;\\n        }\\n        else if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); // Make the armor disappear\\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); // Make the sword appear\\n        }\\n\\n        totalThrows--;\\n\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class ThrowingTutorial : MonoBehaviour\\n{\\n    [Header(\\\"References\\\")]\\n    public Transform cam;\\n    public Transform attackPoint;\\n    public GameObject objectToThrow;\\n    public GameObject armorObject;\\n    public GameObject swordObject;\\n    public GameObject player;\\n\\n    [Header(\\\"Settings\\\")]\\n    public int totalThrows;\\n    public float throwCooldown; \\n\\n    [Header(\\\"Throwing\\\")]\\n    public KeyCode throwKey = KeyCode.K;\\n    public float throwForce;\\n\\n    private bool readyToThrow;\\n\\n    private int throwCounter = 0; \\n    private bool inCollider = false; \\n\\n    private List<GameObject> objectPool;\\n\\n    AudioManager audioManager;\\n\\n    private void Awake()\\n    {\\n        audioManager = GameObject.FindGameObjectWithTag(\\\"Audio\\\").GetComponent<AudioManager>();\\n    }\\n\\n    private void Start()\\n    {\\n        readyToThrow = true;\\n        InitializeObjectPool();\\n    }\\n\\n    private void Update()\\n    {\\n        if(inCollider && Input.GetKeyDown(throwKey) && readyToThrow && totalThrows > 0)\\n        {\\n            Throw();\\n        }\\n    }\\n\\n    private void InitializeObjectPool()\\n    {\\n        objectPool = new List<GameObject>();\\n        for (int i = 0; i < totalThrows; i++)\\n        {\\n            GameObject obj = Instantiate(objectToThrow, attackPoint.position, attackPoint.rotation);\\n            obj.SetActive(false);\\n            objectPool.Add(obj);\\n        }\\n    }\\n\\n    private void Throw()\\n    {\\n        readyToThrow = false;\\n\\n        GameObject thrownObject = GetPooledObject();\\n        if (thrownObject != null)\\n        {\\n            audioManager.PlaySFX(audioManager.axeSound);\\n\\n            thrownObject.SetActive(true);\\n            thrownObject.transform.position = attackPoint.position;\\n            thrownObject.transform.rotation = attackPoint.rotation;\\n\\n            Rigidbody rb = thrownObject.GetComponent<Rigidbody>();\\n            rb.velocity = Vector3.zero; // Reset any existing velocity\\n            rb.AddForce(cam.forward * throwForce, ForceMode.VelocityChange);\\n            throwCounter++;\\n        }\\n\\n        if (throwCounter == totalThrows)\\n        {\\n            audioManager.PlaySFX(audioManager.disappearSound);\\n            armorObject.SetActive(false); \\n            audioManager.PlaySFX(audioManager.appearSound);\\n            swordObject.SetActive(true); \\n        }\\n\\n        totalThrows--;\\n\\n        Invoke(nameof(ResetThrow), throwCooldown);\\n    }\\n\\n    private GameObject GetPooledObject()\\n    {\\n        foreach (GameObject obj in objectPool)\\n        {\\n            if (!obj.activeInHierarchy)\\n            {\\n                return obj;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    private void ResetThrow()\\n    {\\n        readyToThrow = true;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740453468,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":2832,\"prompt_tokens\":603,\"total_tokens\":3435,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"