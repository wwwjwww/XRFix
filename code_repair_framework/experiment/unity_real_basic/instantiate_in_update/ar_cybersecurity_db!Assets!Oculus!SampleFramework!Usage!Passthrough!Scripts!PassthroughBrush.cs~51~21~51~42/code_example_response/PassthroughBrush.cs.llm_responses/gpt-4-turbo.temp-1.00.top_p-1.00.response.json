"{\"id\":\"chatcmpl-BrmiyNUFrd0phUfh2tcEALrC9hFik\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        currentLineSegment = GetPooledLineRenderer();\\n        currentLineSegment.transform.position = inkPos;\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        currentLineSegment.transform.parent = lineContainer.transform;\\n    }\\n\\n    LineRenderer GetPooledLineRenderer()\\n    {\\n        for (int i = 0; i < lineContainer.transform.childCount; i++)\\n        {\\n            LineRenderer line = lineContainer.transform.GetChild(i).GetComponent<LineRenderer>();\\n            if (!line.gameObject.activeInHierarchy)\\n            {\\n                line.gameObject.SetActive(true);\\n                return line;\\n            }\\n        }\\n\\n        GameObject newLine = Instantiate(lineSegmentPrefab, Vector3.zero, Quaternion.identity);\\n        newLine.SetActive(true);\\n        newLine.transform.parent = lineContainer.transform;\\n        return newLine.GetComponent<LineRenderer>();\\n    }\\n\\n    void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            currentLineSegment.gameObject.SetActive(false);\\n        }\\n    }\\n\\n    void UpdateLine(Vector3 newPoint)\\n    {\\n        if (Vector3.Distance(inkPositions[inkPositions.Count - 1], newPoint) > minInkDist)\\n        {\\n            inkPositions.Add(newPoint);\\n            currentLineSegment.positionCount = inkPositions.Count;\\n            currentLineSegment.SetPosition(inkPositions.Count - 1, newPoint);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    private List<GameObject> linePool;\\n    private const int poolSize = 10;\\n    private LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void Start()\\n    {\\n        InitializePool();\\n    }\\n\\n    private void InitializePool()\\n    {\\n        linePool = new List<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(lineSegmentPrefab);\\n            obj.SetActive(false);\\n            linePool.Add(obj);\\n        }\\n    }\\n\\n    private GameObject GetPooledObject()\\n    {\\n        foreach (var line in linePool)\\n        {\\n            if (!line.activeInHierarchy)\\n                return line;\\n        }\\n\\n        GameObject newLine = Instantiate(lineSegmentPrefab);\\n        newLine.SetActive(false);\\n        linePool.Add(newLine);\\n        Debug.LogWarning(\\\"Expanded line pool. Consider increasing initial pool size.\\\");\\n        return newLine;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetPooledObject();\\n        newLine.transform.position = inkPos;\\n        newLine.SetActive(true);\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void Update()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetPooledLineSegment(); // Utilize object pool\\n        newLine.transform.position = inkPos;\\n        newLine.transform.rotation = Quaternion.identity;\\n        newLine.SetActive(true);\\n\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n    \\n    // Assume an object pool system is used for line segments\\n    private GameObject GetPooledLineSegment()\\n    {\\n        // Implement your own pooling logic here\\n        // Or use a pooling framework to manage availability of GameObjects\\n    }\\n\\n    private void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            ReturnToPool(currentLineSegment.gameObject); // Use pooling\\n            currentLineSegment = null;\\n        }\\n    }\\n\\n    private void UpdateLine(Vector3 tipPosition)\\n    {\\n        if (currentLineSegment != null && inkPositions.Count > 0)\\n        {\\n            float dist = Vector3.Distance(inkPositions[inkPositions.Count - 1], tipPosition);\\n            if (dist >= minInkDist)\\n            {\\n                strokeLength += dist;\\n                inkPositions.Add(tipPosition);\\n                currentLineSegment.positionCount++;\\n                currentLineSegment.SetPosition(currentLineSegment.positionCount - 1, tipPosition);\\n            }\\n        }\\n    }\\n\\n    private void ReturnToPool(GameObject obj)\\n    {\\n        obj.SetActive(false);\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n\\n    public int linePoolSize = 10;\\n    private List<GameObject> linePool;\\n\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void Start()\\n    {\\n        linePool = new List<GameObject>();\\n        for (int i = 0; i < linePoolSize; i++)\\n        {\\n            GameObject obj = Instantiate(lineSegmentPrefab);\\n            obj.SetActive(false);\\n            linePool.Add(obj);\\n        }\\n    }\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n\\n                break;\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetPooledLine();\\n        newLine.transform.position = inkPos;\\n        newLine.transform.rotation = Quaternion.identity;\\n        newLine.SetActive(true);\\n\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n        newLine.transform.parent = lineContainer.transform;\\n    }\\n\\n    private GameObject GetPooledLine()\\n    {\\n        for (int i = 0; i < linePool.Count; i++)\\n        {\\n            if (!linePool[i].activeInHierarchy)\\n            {\\n                return linePool[i];\\n            }\\n        }\\n\\n        GameObject obj = Instantiate(lineSegmentPrefab);\\n        obj.SetActive(false);\\n        linePool.Add(obj);\\n        Debug.LogWarning(\\\"Expanded line pool. Consider increasing initial pool size.\\\");\\n        return obj;\\n    }\\n\\n    private void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            currentLineSegment.gameObject.SetActive(false);\\n            currentLineSegment = null;\\n        }\\n    }\\n\\n    private void UpdateLine(Vector3 newInkPos)\\n    {\\n        if (currentLineSegment == null)\\n            return;\\n\\n        if (inkPositions.Count > 0 && Vector3.Distance(inkPositions[inkPositions.Count - 1], newInkPos) >= minInkDist)\\n        {\\n            inkPositions.Add(newInkPos);\\n            currentLineSegment.positionCount = inkPositions.Count;\\n            currentLineSegment.SetPositions(inkPositions.ToArray());\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class PassthroughBrush : MonoBehaviour\\n{\\n    public OVRInput.Controller controllerHand = OVRInput.Controller.None;\\n    public GameObject lineSegmentPrefab;\\n    public GameObject lineContainer;\\n    public bool forceActive = true;\\n    LineRenderer currentLineSegment = null;\\n    List<Vector3> inkPositions = new List<Vector3>();\\n    float minInkDist = 0.01f;\\n    float strokeWidth = 0.1f;\\n    float strokeLength = 0.0f;\\n    private Queue<GameObject> lineSegmentPool;\\n    public int poolSize = 10;\\n\\n    public enum BrushState\\n    {\\n        Idle,\\n        Inking\\n    };\\n\\n    BrushState brushStatus = BrushState.Idle;\\n\\n    private void OnEnable()\\n    {\\n        InitializeLineSegmentPool();\\n    }\\n\\n    private void OnDisable()\\n    {\\n        brushStatus = BrushState.Idle;\\n    }\\n\\n    void LateUpdate()\\n    {\\n        transform.rotation = Quaternion.LookRotation(transform.position - Camera.main.transform.position);\\n\\n        if (!(controllerHand == OVRInput.Controller.LTouch || controllerHand == OVRInput.Controller.RTouch))\\n        {\\n            return;\\n        }\\n\\n        Vector3 tipPosition = transform.position;\\n        switch (brushStatus)\\n        {\\n            case BrushState.Idle:\\n                if (OVRInput.GetUp(OVRInput.Button.One, controllerHand))\\n                {\\n                    UndoInkLine();\\n                }\\n\\n                if (OVRInput.GetDown(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    StartLine(tipPosition);\\n                    brushStatus = BrushState.Inking;\\n                }\\n\\n                break;\\n            case BrushState.Inking:\\n                UpdateLine(tipPosition);\\n                if (OVRInput.GetUp(OVRInput.Button.PrimaryIndexTrigger, controllerHand))\\n                {\\n                    brushStatus = BrushState.Idle;\\n                }\\n                break;\\n        }\\n    }\\n\\n    void InitializeLineSegmentPool()\\n    {\\n        lineSegmentPool = new Queue<GameObject>();\\n        for (int i = 0; i < poolSize; i++)\\n        {\\n            GameObject obj = Instantiate(lineSegmentPrefab);\\n            obj.SetActive(false);\\n            obj.transform.parent = lineContainer.transform;\\n            lineSegmentPool.Enqueue(obj);\\n        }\\n    }\\n\\n    void StartLine(Vector3 inkPos)\\n    {\\n        GameObject newLine = GetPooledLineSegment();\\n        newLine.transform.position = inkPos;\\n        newLine.SetActive(true);\\n        currentLineSegment = newLine.GetComponent<LineRenderer>();\\n        currentLineSegment.positionCount = 1;\\n        currentLineSegment.SetPosition(0, inkPos);\\n        strokeWidth = currentLineSegment.startWidth;\\n        strokeLength = 0.0f;\\n        inkPositions.Clear();\\n        inkPositions.Add(inkPos);\\n    }\\n\\n    GameObject GetPooledLineSegment()\\n    {\\n        if (lineSegmentPool.Count > 0)\\n        {\\n            return lineSegmentPool.Dequeue();\\n        }\\n\\n        GameObject newObj = Instantiate(lineSegmentPrefab);\\n        newObj.SetActive(false);\\n        newObj.transform.parent = lineContainer.transform;\\n        Debug.LogWarning(\\\"Expanded line segment pool. Consider increasing initial pool size.\\\");\\n        return newObj;\\n    }\\n\\n    void UndoInkLine()\\n    {\\n        if (currentLineSegment != null)\\n        {\\n            currentLineSegment.gameObject.SetActive(false);\\n            lineSegmentPool.Enqueue(currentLineSegment.gameObject);\\n            currentLineSegment = null;\\n        }\\n    }\\n    \\n    void UpdateLine(Vector3 tipPosition)\\n    {\\n        // Add your existing UpdateLine implementation here\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752158380,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":null,\"usage\":{\"completion_tokens\":3655,\"prompt_tokens\":976,\"total_tokens\":4631,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"