"{\"id\":\"chatcmpl-B4fbVxwrEkw5EeNB0sU68BYqQjmWt\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections.Generic;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        private Queue<GameObject> fireObjectPool = new Queue<GameObject>();\\n        private int poolSize = 10;\\n\\n        void Start()\\n        {\\n            for (int i = 0; i < poolSize; i++)\\n            {\\n                GameObject obj = Instantiate(fireParticlePrefab);\\n                obj.SetActive(false);\\n                fireObjectPool.Enqueue(obj);\\n            }\\n\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                isBurning = false;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Stop();\\n                }\\n                else\\n                {\\n                    ReturnFireObjectToPool(fireObject);\\n                    fireObject = null;\\n                }\\n            }\\n        }\\n\\n        private void StartBurning()\\n        {\\n            if (fireObjectPool.Count > 0)\\n            {\\n                fireObject = fireObjectPool.Dequeue();\\n                fireObject.SetActive(true);\\n                isBurning = true;\\n                ignitionTime = Time.time;\\n                if (ignitionSound != null)\\n                {\\n                    ignitionSound.Play();\\n                }\\n            }\\n        }\\n\\n        private void ReturnFireObjectToPool(GameObject obj)\\n        {\\n            obj.SetActive(false);\\n            fireObjectPool.Enqueue(obj);\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        private bool fireObjectMarkedForDestruction = false;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                isBurning = false;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Stop();\\n                }\\n                else\\n                {\\n                    if (!fireObjectMarkedForDestruction)\\n                    {\\n                        fireObjectMarkedForDestruction = true;\\n                        Destroy(fireObject);\\n                    }\\n                }\\n            }\\n        }\\n\\n        void StartBurning()\\n        {\\n            isBurning = true;\\n            ignitionTime = Time.time + ignitionDelay;\\n            \\n            if (fireParticlePrefab != null && fireObject == null)\\n            {\\n                fireObject = Instantiate(fireParticlePrefab, transform.position, transform.rotation);\\n            }\\n            \\n            if (customParticles != null)\\n            {\\n                customParticles.Play();\\n            }\\n\\n            if (ignitionSound != null)\\n            {\\n                ignitionSound.Play();\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                isBurning = false;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Stop();\\n                }\\n                else if (fireObject != null)\\n                {\\n                    fireObject.SetActive(false);\\n                }\\n            }\\n        }\\n\\n        public void StartBurning()\\n        {\\n            if (customParticles != null)\\n            {\\n                customParticles.Play();\\n            }\\n            else if (fireParticlePrefab != null)\\n            {\\n                if (fireObject == null)\\n                {\\n                    fireObject = Instantiate(fireParticlePrefab, transform.position, Quaternion.identity);\\n                }\\n                else\\n                {\\n                    fireObject.SetActive(true);\\n                }\\n            }\\n\\n            if (ignitionSound != null)\\n            {\\n                ignitionSound.Play();\\n            }\\n\\n            isBurning = true;\\n            ignitionTime = Time.time;\\n        }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n        public ParticleSystem customParticles;\\n        public bool isBurning;\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n        private Hand hand;\\n        public AudioSource ignitionSound;\\n        public bool canSpreadFromThisSource = true;\\n        private Queue<GameObject> firePool = new Queue<GameObject>();\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n            CreateFirePool(10);  // Create a pool of 10 fire objects initially\\n        }\\n\\n        void Update()\\n        {\\n            if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n            {\\n                isBurning = false;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Stop();\\n                }\\n                else if (fireObject != null)\\n                {\\n                    ReturnFireToPool(fireObject);  // Return the fire object to the pool\\n                }\\n            }\\n        }\\n        \\n        private void CreateFirePool(int poolSize)\\n        {\\n            for (int i = 0; i < poolSize; i++)\\n            {\\n                GameObject obj = Instantiate(fireParticlePrefab);\\n                obj.SetActive(false);\\n                firePool.Enqueue(obj);\\n            }\\n        }\\n\\n        private GameObject GetFireFromPool()\\n        {\\n            if (firePool.Count > 0)\\n            {\\n                GameObject obj = firePool.Dequeue();\\n                obj.SetActive(true);\\n                return obj;\\n            }\\n            else\\n            {\\n                GameObject obj = Instantiate(fireParticlePrefab);\\n                return obj;\\n            }\\n        }\\n\\n        private void ReturnFireToPool(GameObject obj)\\n        {\\n            obj.SetActive(false);\\n            firePool.Enqueue(obj);\\n        }\\n\\n        void StartBurning()\\n        {\\n            isBurning = true;\\n            ignitionTime = Time.time + ignitionDelay;\\n\\n            if (customParticles != null)\\n            {\\n                customParticles.Play();\\n            }\\n            else\\n            {\\n                fireObject = GetFireFromPool();\\n                fireObject.transform.position = transform.position;\\n            }\\n\\n            if (ignitionSound != null)\\n            {\\n                ignitionSound.Play();\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n\\n\\tpublic class FireSource : MonoBehaviour\\n\\t{\\n\\t\\tpublic GameObject fireParticlePrefab;\\n\\t\\tpublic bool startActive;\\n\\t\\tprivate GameObject fireObject;\\n\\n\\t\\tpublic ParticleSystem customParticles;\\n\\n\\t\\tpublic bool isBurning;\\n\\n\\t\\tpublic float burnTime;\\n\\t\\tpublic float ignitionDelay = 0;\\n\\t\\tprivate float ignitionTime;\\n\\n\\t\\tprivate Hand hand;\\n\\n\\t\\tpublic AudioSource ignitionSound;\\n\\n\\t\\tpublic bool canSpreadFromThisSource = true;\\n\\n\\t\\tprivate bool isUpdateScheduledForDestroy = false;\\n\\n\\t\\tvoid Start()\\n\\t\\t{\\n\\t\\t\\tif (startActive)\\n\\t\\t\\t{\\n\\t\\t\\t\\tStartBurning();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid Update()\\n\\t\\t{\\n\\t\\t\\tif ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n\\t\\t\\t{\\n\\t\\t\\t\\tisBurning = false;\\n\\t\\t\\t\\tisUpdateScheduledForDestroy = true;\\n\\n\\t\\t\\t\\tif (customParticles != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tcustomParticles.Stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (fireObject != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tScheduleDestroy(fireObject);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (isUpdateScheduledForDestroy && fireObject != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tDestroy(fireObject);\\n\\t\\t\\t\\tisUpdateScheduledForDestroy = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tprivate void ScheduleDestroy(GameObject obj)\\n\\t\\t{\\n\\t\\t\\tfireObject = obj;  // Store reference for scheduled destroy\\n\\t\\t}\\n\\n\\t\\tprivate void StartBurning()\\n\\t\\t{\\n\\t\\t\\t// Method Body not provided\\n\\t\\t}\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null}}],\"created\":1740452937,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_eb9dce56a8\",\"usage\":{\"completion_tokens\":1816,\"prompt_tokens\":383,\"total_tokens\":2199,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"