"{\"id\":\"chatcmpl-BrmehQYWYejFwSMcdBiRB0U7tIi7i\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        private IEnumerator ManageFire()\\n        {\\n            while (isBurning && burnTime != 0)\\n            {\\n                if (Time.time > (ignitionTime + burnTime))\\n                {\\n                    isBurning = false;\\n                    if (customParticles != null)\\n                    {\\n                        customParticles.Stop();\\n                    }\\n                    else\\n                    {\\n                        Destroy(fireObject);\\n                    }\\n                }\\n                yield return new WaitForSeconds(0.1f);\\n            }\\n        }\\n\\n        public void StartBurning()\\n        {\\n            if (!isBurning)\\n            {\\n                isBurning = true;\\n                ignitionTime = Time.time;\\n                if (customParticles != null)\\n                {\\n                    customParticles.Play();\\n                }\\n                else\\n                {\\n                    fireObject = Instantiate(fireParticlePrefab, transform.position, Quaternion.identity, transform);\\n                }\\n                ignitionSound?.Play();\\n                StartCoroutine(ManageFire());\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\ufeff//======= Copyright (c) Valve Corporation, All rights reserved. ===============\\n\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n\\n\\tpublic class FireSource : MonoBehaviour\\n\\t{\\n\\t\\tpublic GameObject fireParticlePrefab;\\n\\t\\tpublic bool startActive;\\n\\t\\tprivate GameObject fireObject;\\n\\n\\t\\tpublic ParticleSystem customParticles;\\n\\n\\t\\tpublic bool isBurning;\\n\\n\\t\\tpublic float burnTime;\\n\\t\\tpublic float ignitionDelay = 0;\\n\\t\\tprivate float ignitionTime;\\n\\n\\t\\tprivate Hand hand;\\n\\n\\t\\tpublic AudioSource ignitionSound;\\n\\n\\t\\tpublic bool canSpreadFromThisSource = true;\\n\\n\\t\\tvoid Start()\\n\\t\\t{\\n\\t\\t\\tif (startActive)\\n\\t\\t\\t{\\n\\t\\t\\t\\tStartBurning();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid Update()\\n\\t\\t{\\n\\t\\t\\tif ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n\\t\\t\\t{\\n\\t\\t\\t\\tisBurning = false;\\n\\t\\t\\t\\tif (customParticles != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tcustomParticles.Stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (fireObject != null)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfireObject.SetActive(false);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n \\t\\tvoid Update()\\n\\t\\t{\\n\\t\\t\\tif ( ( burnTime != 0 ) && ( Time.time > ( ignitionTime + burnTime ) ) && isBurning )\\n\\t\\t\\t{\\n\\t\\t\\t\\tisBurning = false;\\n\\t\\t\\t\\tif ( customParticles != null )\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tcustomParticles.Stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t// Set the fireObject to inactive instead of destroying it\\n\\t\\t\\t\\t\\tif (fireObject != null)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfireObject.SetActive(false);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n\\t\\t// FIXED CODE:\\n\\t\\tvoid Update()\\n\\t\\t{\\n\\t\\t\\tif ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)) && isBurning)\\n\\t\\t\\t{\\n\\t\\t\\t\\tisBurning = false;\\n\\t\\t\\t\\tif (customParticles != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tcustomParticles.Stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (fireObject != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tStartCoroutine(DestroyFireObject());\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tprivate IEnumerator DestroyFireObject()\\n\\t\\t{\\n\\t\\t\\tyield return null; // Wait for one frame before destroying\\n\\t\\t\\tDestroy(fireObject);\\n\\t\\t}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace Valve.VR.InteractionSystem\\n{\\n    public class FireSource : MonoBehaviour\\n    {\\n        public GameObject fireParticlePrefab;\\n        public bool startActive;\\n        private GameObject fireObject;\\n\\n        public ParticleSystem customParticles;\\n\\n        public bool isBurning;\\n\\n        public float burnTime;\\n        public float ignitionDelay = 0;\\n        private float ignitionTime;\\n\\n        private Hand hand;\\n\\n        public AudioSource ignitionSound;\\n\\n        public bool canSpreadFromThisSource = true;\\n\\n        void Start()\\n        {\\n            if (startActive)\\n            {\\n                StartBurning();\\n            }\\n        }\\n\\n        // Replaces the Update method to avoid using Destroy every frame\\n        IEnumerator RemoveFireAfterBurnTime()\\n        {\\n            while (isBurning)\\n            {\\n                if ((burnTime != 0) && (Time.time > (ignitionTime + burnTime)))\\n                {\\n                    isBurning = false;\\n                    if (customParticles != null)\\n                    {\\n                        customParticles.Stop();\\n                    }\\n                    else if (fireObject != null)\\n                    {\\n                        Destroy(fireObject);\\n                    }\\n                    yield break;\\n                }\\n                yield return null; // Wait for the next frame\\n            }\\n        }\\n\\n        void StartBurning()\\n        {\\n            isBurning = true;\\n            ignitionTime = Time.time;\\n\\n            if (fireParticlePrefab != null && fireObject == null)\\n            {\\n                fireObject = Instantiate(fireParticlePrefab, transform.position, transform.rotation);\\n                fireObject.transform.SetParent(transform);\\n            }\\n\\n            if (ignitionSound != null && !ignitionSound.isPlaying)\\n            {\\n                ignitionSound.Play();\\n            }\\n\\n            if (customParticles != null && !customParticles.isPlaying)\\n            {\\n                customParticles.Play();\\n            }\\n\\n            // Start the coroutine to manage burn time\\n            StartCoroutine(RemoveFireAfterBurnTime());\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752158115,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":1230,\"prompt_tokens\":701,\"total_tokens\":1931,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"