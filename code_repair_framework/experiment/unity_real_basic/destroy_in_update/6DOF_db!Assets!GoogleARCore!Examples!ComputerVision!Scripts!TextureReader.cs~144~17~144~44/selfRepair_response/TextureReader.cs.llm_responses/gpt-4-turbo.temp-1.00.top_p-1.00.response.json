"{\"id\":\"chatcmpl-Bpk5ojyUJiNsfQUTSm38VzruAQc8q\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nnamespace GoogleARCore.Examples.ComputerVision\\n{\\n    using System;\\n    using GoogleARCore;\\n    using UnityEngine;\\n\\n    public class TextureReader : MonoBehaviour\\n    {\\n        public int ImageWidth = k_ARCoreTextureWidth;\\n        public int ImageHeight = k_ARCoreTextureHeight;\\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\\n\\n        private const int k_ARCoreTextureWidth = 1920;\\n        private const int k_ARCoreTextureHeight = 1080;\\n\\n        private TextureReaderApi m_TextureReaderApi = null;\\n        private CommandType m_Command = CommandType.None;\\n        private int m_ImageBufferIndex = -1;\\n\\n        public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\\n\\n        public enum SampleMode\\n        {\\n            KeepAspectRatio,\\n            CoverFullViewport\\n        }\\n\\n        private enum CommandType\\n        {\\n            None,\\n            ProcessNextFrame,\\n            Create,\\n            Reset,\\n            ReleasePreviousBuffer\\n        }\\n\\n        public void Start()\\n        {\\n            if (m_TextureReaderApi == null)\\n            {\\n                m_TextureReaderApi = new TextureReaderApi();\\n                m_Command = CommandType.Create;\\n                m_ImageBufferIndex = -1;\\n            }\\n        }\\n\\n        public void Apply()\\n        {\\n            m_Command = CommandType.Reset;\\n        }\\n\\n        public void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    break;\\n\\n                case CommandType.Reset:\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_Command = CommandType.Create; // Re-create in next frame update\\n                    break;\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n\\n                case CommandType.ProcessNextFrame:\\n                    if (m_ImageBufferIndex >= 0)\\n                    {\\n                        int bufferSize = 0;\\n                        IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                        if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                        {\\n                            OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                        }\\n\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    }\\n                    break;\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex = m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Fixed Update method with object pooling for the TextureReaderApi instance\\n\\nprivate void Awake()\\n{\\n    if (m_TextureReaderApi == null)\\n    {\\n        m_TextureReaderApi = new TextureReaderApi();\\n        m_Command = CommandType.Create;\\n    }\\n}\\n\\nprivate Queue<TextureReaderApi> m_Pool = new Queue<TextureReaderApi>();\\n\\nprivate void ReleaseApiInstance(TextureReaderApi apiInstance)\\n{\\n    if (apiInstance != null)\\n    {\\n        m_Pool.Enqueue(apiInstance);\\n    }\\n}\\n\\npublic void Update()\\n{\\n    if (!enabled)\\n    {\\n        return;\\n    }\\n\\n    switch (m_Command)\\n    {\\n        case CommandType.Create:\\n            {\\n                if (m_Pool.Count > 0)\\n                {\\n                    m_TextureReaderApi = m_Pool.Dequeue();\\n                }\\n                else\\n                {\\n                    m_TextureReaderApi = new TextureReaderApi();\\n                }\\n                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                break;\\n            }\\n\\n        case CommandType.Reset:\\n            {\\n                if (m_ImageBufferIndex >= 0)\\n                {\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                }\\n                ReleaseApiInstance(m_TextureReaderApi);\\n                m_TextureReaderApi = null;\\n                m_Command = CommandType.Create;\\n                m_ImageBufferIndex = -1;\\n                break;\\n            }\\n\\n        case CommandType.ReleasePreviousBuffer:\\n            {\\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                m_ImageBufferIndex = -1;\\n                break;\\n            }\\n\\n        case CommandType.ProcessNextFrame:\\n            {\\n                if (m_ImageBufferIndex >= 0)\\n                {\\n                    int bufferSize = 0;\\n                    IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                    if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                    {\\n                        OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                    }\\n\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                }\\n\\n                break;\\n            }\\n\\n        case CommandType.None:\\n        default:\\n            break;\\n    }\\n\\n    if (Frame.CameraImage.Texture != null)\\n    {\\n        int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n        m_ImageBufferIndex = m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n    }\\n\\n    m_Command = CommandType.ProcessNextFrame;\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nnamespace GoogleARCore.Examples.ComputerVision\\n{\\n    using System;\\n    using GoogleARCore;\\n    using UnityEngine;\\n\\n    public class TextureReader : MonoBehaviour\\n    {\\n        public int ImageWidth = k_ARCoreTextureWidth;\\n        public int ImageHeight = k_ARCoreTextureHeight;\\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\\n\\n        private const int k_ARCoreTextureWidth = 1920;\\n        private const int k_ARCoreTextureHeight = 1080;\\n\\n        private TextureReaderApi m_TextureReaderApi = null;\\n        private CommandType m_Command = CommandType.None;\\n        private int m_ImageBufferIndex = -1;\\n\\n        public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\\n\\n        public enum SampleMode\\n        {\\n            KeepAspectRatio,\\n            CoverFullViewport\\n        }\\n\\n        private enum CommandType\\n        {\\n            None,\\n            ProcessNextFrame,\\n            Create,\\n            Reset,\\n            ReleasePreviousBuffer\\n        }\\n\\n        public void Start()\\n        {\\n            if (m_TextureReaderApi == null)\\n            {\\n                m_TextureReaderApi = new TextureReaderApi();\\n                m_Command = CommandType.Create;\\n                m_ImageBufferIndex = -1;\\n            }\\n        }\\n\\n        public void Apply()\\n        {\\n            m_Command = CommandType.Reset;\\n        }\\n\\n        private void LateUpdate()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n            switch (m_Command)\\n            {\\n                case CommandType.Create:\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    break;\\n\\n                case CommandType.Reset:\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_TextureReaderApi.Destroy();\\n                    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n\\n                case CommandType.ReleasePreviousBuffer:\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    m_ImageBufferIndex = -1;\\n                    break;\\n\\n                case CommandType.ProcessNextFrame:\\n                    if (m_ImageBufferIndex >= 0)\\n                    {\\n                        int bufferSize = 0;\\n                        IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                        if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                        {\\n                            OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                        }\\n\\n                        m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                    }\\n                    break;\\n\\n                case CommandType.None:\\n                default:\\n                    break;\\n            }\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex = m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n// Moved m_TextureReaderApi.Destroy() out of the Update method to be called elsewhere.\\npublic void ResetTextureReader()\\n{\\n    m_TextureReaderApi.Destroy();\\n    m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n    m_ImageBufferIndex = -1;\\n}\\n\\npublic void Update()\\n{\\n    if (!enabled)\\n    {\\n        return;\\n    }\\n\\n    switch (m_Command)\\n    {\\n        case CommandType.Create:\\n        {\\n            m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n            break;\\n        }\\n\\n        // Removed m_TextureReaderApi.Destroy() from the Reset case\\n        case CommandType.Reset:\\n        {\\n            m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n            ResetTextureReader();\\n            break;\\n        }\\n\\n        case CommandType.ReleasePreviousBuffer:\\n        {\\n            m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n            m_ImageBufferIndex = -1;\\n            break;\\n        }\\n\\n        case CommandType.ProcessNextFrame:\\n        {\\n            if (m_ImageBufferIndex >= 0)\\n            {\\n                int bufferSize = 0;\\n                IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                {\\n                    OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                }\\n\\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n            }\\n\\n            break;\\n        }\\n\\n        case CommandType.None:\\n        default:\\n            break;\\n    }\\n\\n    if (Frame.CameraImage.Texture != null)\\n    {\\n        int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n        m_ImageBufferIndex =\\n            m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n    }\\n\\n    m_Command = CommandType.ProcessNextFrame;\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nnamespace GoogleARCore.Examples.ComputerVision\\n{\\n    using System;\\n    using GoogleARCore;\\n    using UnityEngine;\\n\\n    public class TextureReader : MonoBehaviour\\n    {\\n        public int ImageWidth = k_ARCoreTextureWidth;\\n        public int ImageHeight = k_ARCoreTextureHeight;\\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\\n\\n        private const int k_ARCoreTextureWidth = 1920;\\n        private const int k_ARCoreTextureHeight = 1080;\\n\\n        private TextureReaderApi m_TextureReaderApi = null;\\n        private CommandType m_Command = CommandType.None;\\n        private int m_ImageBufferIndex = -1;\\n\\n        public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\\n\\n        public enum SampleMode\\n        {\\n            KeepAspectRatio,\\n            CoverFullViewport\\n        }\\n\\n        private enum CommandType\\n        {\\n            None,\\n            ProcessNextFrame,\\n            Create,\\n            Reset,\\n            ReleasePreviousBuffer\\n        }\\n\\n        public void Start()\\n        {\\n            if (m_TextureReaderApi == null)\\n            {\\n                m_TextureReaderApi = new TextureReaderApi();\\n                m_Command = CommandType.Create;\\n                m_ImageBufferIndex = -1;\\n            }\\n        }\\n\\n        public void Apply()\\n        {\\n            m_Command = CommandType.Reset;\\n        }\\n\\n        private void Update()\\n        {\\n            if (!enabled)\\n            {\\n                return;\\n            }\\n\\n            switch (m_Command)\\n            {\\n            case CommandType.Create:\\n                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\\n                break;\\n\\n            case CommandType.Reset:\\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                m_Command = CommandType.Create; // Set command to create without destroying the whole object\\n                break;\\n\\n            case CommandType.ReleasePreviousBuffer:\\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                m_ImageBufferIndex = -1;\\n                break;\\n\\n            case CommandType.ProcessNextFrame:\\n                if (m_ImageBufferIndex >= 0)\\n                {\\n                    int bufferSize = 0;\\n                    IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\\n\\n                    if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\\n                    {\\n                        OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\\n                    }\\n\\n                    m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\\n                }\\n\\n                break;\\n\\n            case CommandType.None:\\n            default:\\n                break;\\n            }\\n\\n            if (Frame.CameraImage.Texture != null)\\n            {\\n                int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\\n                m_ImageBufferIndex = m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\\n            }\\n\\n            m_Command = CommandType.ProcessNextFrame;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751671608,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":2945,\"prompt_tokens\":936,\"total_tokens\":3881,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"