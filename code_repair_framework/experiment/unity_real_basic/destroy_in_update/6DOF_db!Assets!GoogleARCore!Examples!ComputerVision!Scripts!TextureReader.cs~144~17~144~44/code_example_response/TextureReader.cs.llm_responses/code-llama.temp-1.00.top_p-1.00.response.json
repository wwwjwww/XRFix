{
    "code_repairing_0": "namespace GoogleARCore.Examples.ComputerVision\n {\n    using System;\n    using GoogleARCore;\n    using UnityEngine;\n\n\n\n\n    public class TextureReader : MonoBehaviour\n    {\n\n\n\n        public int ImageWidth = k_ARCoreTextureWidth;\n\n\n\n\n        public int ImageHeight = k_ARCoreTextureHeight;\n\n\n\n\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\n\n\n\n\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\n\n        private const int k_ARCoreTextureWidth = 1920;\n        private const int k_ARCoreTextureHeight = 1080;\n\n        private TextureReaderApi m_TextureReaderApi = null;\n\n        private CommandType m_Command = CommandType.None;\n\n        private int m_ImageBufferIndex = -1;\n\n\n\n\n\n\n\n\n\n        public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\n\n\n\n\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\n\n\n\n\n        public enum SampleMode\n        {\n\n\n\n            KeepAspectRatio,\n\n\n\n\n            CoverFullViewport\n        }\n\n        private enum CommandType\n        {\n            None,\n            ProcessNextFrame,\n            Create,\n            Reset,\n            ReleasePreviousBuffer\n        }\n\n\n\n\n\n        public void Start()\n        {\n            if (m_TextureReaderApi == null)\n            {\n                m_TextureReaderApi = new TextureReaderApi();\n                m_Command = CommandType.Create;\n                m_ImageBufferIndex = -1;\n            }\n        }\n\n\n\n\n        public void Apply()\n        {\n            m_Command = CommandType.Reset;\n        }\n\n\n\n/// \n        public void FixedUpdate()\n        {\n            if (!enabled)\n            {\n                return;\n            }\n\n\n            switch (m_Command)\n            {\n            case CommandType.Create:\n            {\n                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n                break;\n            }\n\n            case CommandType.Reset:\n            {\n                m_TextureReaderApi.Reset();\n                m_ImageBufferIndex = -1;\n                break;\n            }\n\n            case CommandType.ProcessNextFrame:\n            {\n                if (m_ImageBufferIndex >= 0)\n                {\n\n                    int bufferSize = 0;\n                    IntPtr pixelBuffer = m_TextureReaderApi.AcquireLatestFrame(ref bufferSize);\n\n                    if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\n                    {\n                        OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\n                    }\n\n\n                    m_TextureReaderApi.ReleaseBuffer(m_ImageBufferIndex);\n                }\n\n                break;\n            }\n\n            case CommandType.None:\n            default:\n                break;\n            }\n\n            {\n                if (Frame.CameraImage.Texture != null)\n                {\n                    int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\n                    m_ImageBufferIndex =\n                        m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\n                }\n\n\n                m_Command = CommandType.ProcessNextFrame;\n            }\n        }",
    "code_repairing_1": "namespace GoogleARCore.Examples.ComputerVision\n{\n    using System;\n    using GoogleARCore;\n    using UnityEngine;\n\n\n\n\n    public class TextureReader : MonoBehaviour\n    {\n\n\n\n        public int ImageWidth = k_ARCoreTextureWidth;\n\n\n\n\n        public int ImageHeight = k_ARCoreTextureHeight;\n\n\n\n\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\n\n\n\n\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\n\n        private const int k_ARCoreTextureWidth = 1920;\n        private const int k_ARCoreTextureHeight = 1080;\n\n        private TextureReaderApi m_TextureReaderApi = null;\n\n        private CommandType m_Command = CommandType.None;\n\n        private int m_ImageBufferIndex = -1;\n\n\n\n\n\n\n\n\n\n        public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\n\n\n\n\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\n\n\n\n\n        public enum SampleMode\n        {\n\n\n\n            KeepAspectRatio,\n\n\n\n\n            CoverFullViewport\n        }\n\n        private enum CommandType\n        {\n            None,\n            ProcessNextFrame,\n            Create,\n            Reset,\n            ReleasePreviousBuffer\n        }\n\n\n\n\n\n        public void Start()\n        {\n            if (m_TextureReaderApi == null)\n            {\n                m_TextureReaderApi = new TextureReaderApi();\n                m_Command = CommandType.Create;\n                m_ImageBufferIndex = -1;\n            }\n        }\n\n\n\n\n        public void Apply()\n        {\n            m_Command = CommandType.Reset;\n        }\n\n\n\n///         public void Update()\n//         {\n//             if (!enabled)\n//             {\n//                 return;\n//             }\n// \n// \n//             switch (m_Command)\n//             {\n//             case CommandType.Create:\n//             {\n//                 m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n//                 break;\n//             }\n// \n//             case CommandType.Reset:\n//             {\n//                 m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n                // BUG: Destroy in Update() method\n                // MESSAGE: Update() method is called each frame. It's inefficient to use Destroy() in Update() method.\n                //                 m_TextureReaderApi.Destroy();\n                //                 m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n                //                 m_ImageBufferIndex = -1;\n                //                 break;\n                //             }\n                // \n                //             case CommandType.ReleasePreviousBuffer:\n                //             {\n                // \n                //                 m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n                //                 m_ImageBufferIndex = -1;\n                //                 break;\n                //             }\n                // \n                //             case CommandType.ProcessNextFrame:\n                //             {\n                //                 if (m_ImageBufferIndex >= 0)\n                //                 {\n                // \n                //                     int bufferSize = 0;\n                //                     IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\n                // \n                //                     if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\n                //                     {\n                //                         OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\n                //                     }\n                // \n                // \n                //                     m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n                //                 }\n                // \n                //                 break;\n                //             }\n                // \n                //             case CommandType.None:\n                //             default:\n                //                 break;\n                //             }\n                // \n                // \n                //             if (Frame.CameraImage.Texture != null)\n                //             {\n                //                 int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\n                //                 m_ImageBufferIndex =\n                //                     m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\n                //             }\n                // \n                // \n                //             m_Command = CommandType.ProcessNextFrame;\n                //         }\n\n                // FIXED CODE:\n\n\n\npublic void DestroyTextureReaderApi()\n        {\n            m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n            m_Command = CommandType.Reset;\n        }\n    }",
    "code_repairing_2": "```\n\n\n\n\n\n\nusing System;\nusing GoogleARCore;\nusing UnityEngine;\n\n\n\n\npublic class TextureReader : MonoBehaviour\n{\n\n\n\n    public int ImageWidth = k_ARCoreTextureWidth;\n\n\n\n\n    public int ImageHeight = k_ARCoreTextureHeight;\n\n\n\n\n    public TextureReaderApi.ImageFormatType ImageFormat =\n    TextureReaderApi.ImageFormatType.ImageFormatUndefined;\n\n\n\n\n\n    private const int k_ARCoreTextureWidth = 1920;\n    private const int k_ARCoreTextureHeight = 1080;\n\n    private TextureReaderApi m_TextureReaderApi = new TextureReaderApi();\n\n    private CommandType m_Command = CommandType.None;\n\n    private int m_ImageBufferIndex = -1;\n\n\n\n\n\n\n\n\n\n    public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width,\n    int height, IntPtr pixelBuffer, int bufferSize);\n\n\n\n\n\n    public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\n\n\n\n\n    public enum SampleMode\n    {\n\n\n\n        KeepAspectRatio,\n\n\n\n\n        CoverFullViewport\n    }\n\n    private enum CommandType\n    {\n        None,\n        ProcessNextFrame,\n        Create,\n        Reset,\n        ReleasePreviousBuffer\n    }\n\n\n\n\n\n    public void Start()\n    {\n        m_TextureReaderApi = new TextureReaderApi();\n        m_Command = CommandType.Create;\n        m_ImageBufferIndex = -1;\n    }\n\n\n\n\n    public void Apply()\n    {\n        m_Command = CommandType.Reset;\n    }\n\n\n\n\n\n    public void Update()\n    {\n        if (!enabled)\n        {\n            return;\n        }\n\n        switch (m_Command)\n        {\n            case CommandType.Create:\n            {\n                m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n                break;\n            }\n            case CommandType.Reset:\n            {\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n                m_ImageBufferIndex = -1;\n                break;\n            }\n            case CommandType.ReleasePreviousBuffer:\n            {\n                m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n                m_ImageBufferIndex = -1;\n                break;\n            }\n            case CommandType.ProcessNextFrame:\n            {\n                if (m_ImageBufferIndex >= 0)\n                {\n                    int bufferSize = 0;\n                    IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\n\n                    if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\n                    {\n                        OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\n                    }\n                }\n\n                break;\n            }\n            case CommandType.None:\n            default:\n            {\n                break;\n            }\n        }\n\n\n        if (Frame.CameraImage.Texture != null)\n        {\n            int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\n            m_ImageBufferIndex = \n            m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\n        }\n\n\n        m_Command = CommandType.ProcessNextFrame;\n    }\n```",
    "code_repairing_3": "namespace GoogleARCore.Examples.ComputerVision\n{\n    using System;\n    using GoogleARCore;\n    using UnityEngine;\n\n\n\n\n    public class TextureReader : MonoBehaviour\n    {\n\n\n\n        public int ImageWidth = k_ARCoreTextureWidth;\n\n\n\n\n        public int ImageHeight = k_ARCoreTextureHeight;\n\n\n\n\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\n\n\n\n\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\n\n        private const int k_ARCoreTextureWidth = 1920;\n        private const int k_ARCoreTextureHeight = 1080;\n\n        private TextureReaderApi m_TextureReaderApi = null;\n\n        private CommandType m_Command = CommandType.None;\n\n        private int m_ImageBufferIndex = -1;\n\n\n\n\n\n\n\n\n\n        public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\n\n\n\n\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\n\n\n\n\n        public enum SampleMode\n        {\n\n\n\n            KeepAspectRatio,\n\n\n\n\n            CoverFullViewport\n        }\n\n        private enum CommandType\n        {\n            None,\n            ProcessNextFrame,\n            Create,\n            Reset,\n            ReleasePreviousBuffer\n        }\n\n\n\n\n\n        public void Start()\n        {\n            if (m_TextureReaderApi == null)\n            {\n                m_TextureReaderApi = new TextureReaderApi();\n                m_Command = CommandType.Create;\n                m_ImageBufferIndex = -1;\n            }\n        }\n\n\n\n\n        public void Apply()\n        {\n            m_Command = CommandType.Reset;\n        }\n\n\n\n///         public void Update()\n//         {\n//             if (!enabled)\n//             {\n//                 return;\n//             }\n// \n// \n//             switch (m_Command)\n//             {\n//             case CommandType.Create:\n//             {\n//                 m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n//                 break;\n//             }\n// \n//             case CommandType.Reset:\n//             {\n//                 m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n//                 // BUG: Destroy in Update() method\n//                 // MESSAGE: Update() method is called each frame. It's inefficient to use Destroy() in Update() method.\n//                 //                 m_TextureReaderApi.Destroy();\n//                 //                 m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n//                 //                 m_ImageBufferIndex = -1;\n//                 //                 break;\n//             }\n// \n//             case CommandType.ReleasePreviousBuffer:\n//             {\n//                 m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n//                 m_ImageBufferIndex = -1;\n//                 break;\n//             }\n// \n//             case CommandType.ProcessNextFrame:\n//             {\n//                 if (m_ImageBufferIndex >= 0)\n//                 {\n// \n//                     int bufferSize = 0;\n//                     IntPtr pixelBuffer = m_TextureReaderApi.AcquireFrame(m_ImageBufferIndex, ref bufferSize);\n// \n//                     if (pixelBuffer != IntPtr.Zero && OnImageAvailableCallback != null)\n//                     {\n//                         OnImageAvailableCallback(ImageFormat, ImageWidth, ImageHeight, pixelBuffer, bufferSize);\n//                     }\n// \n// \n//                     m_TextureReaderApi.ReleaseFrame(m_ImageBufferIndex);\n//                 }\n// \n//                 break;\n//             }\n// \n//             case CommandType.None:\n//             default:\n//                 break;\n//             }\n// \n// \n//             if (Frame.CameraImage.Texture != null)\n//             {\n//                 int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\n//                 m_ImageBufferIndex =\n//                     m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\n//             }\n// \n// \n//             m_Command = CommandType.ProcessNextFrame;\n//         }\n\n }",
    "code_repairing_4": "namespace GoogleARCore.Examples.ComputerVision\n{\n    using System;\n    using GoogleARCore;\n    using UnityEngine;\n\n\n\n\n    public class TextureReader : MonoBehaviour\n    {\n\n\n\n        public int ImageWidth = k_ARCoreTextureWidth;\n\n\n\n\n        public int ImageHeight = k_ARCoreTextureHeight;\n\n\n\n\n        public SampleMode ImageSampleMode = SampleMode.CoverFullViewport;\n\n\n\n\n        public TextureReaderApi.ImageFormatType ImageFormat = TextureReaderApi.ImageFormatType.ImageFormatGrayscale;\n\n        private const int k_ARCoreTextureWidth = 1920;\n        private const int k_ARCoreTextureHeight = 1080;\n\n        private TextureReaderApi m_TextureReaderApi = null;\n\n        private CommandType m_Command = CommandType.None;\n\n        private int m_ImageBufferIndex = -1;\n\n\n\n\n\n\n\n\n\n        public delegate void OnImageAvailableCallbackFunc(TextureReaderApi.ImageFormatType format, int width, int height, IntPtr pixelBuffer, int bufferSize);\n\n\n\n\n        public event OnImageAvailableCallbackFunc OnImageAvailableCallback = null;\n\n\n\n\n        public enum SampleMode\n        {\n\n\n\n            KeepAspectRatio,\n\n\n\n\n            CoverFullViewport\n        }\n\n        private enum CommandType\n        {\n            None,\n            ProcessNextFrame,\n            Create,\n            Reset,\n            ReleasePreviousBuffer\n        }\n\n\n\n\n\n        public void Start()\n        {\n            if (m_TextureReaderApi == null)\n            {\n                m_TextureReaderApi = new TextureReaderApi();\n                m_Command = CommandType.Create;\n                m_ImageBufferIndex = -1;\n            }\n        }\n\n\n\n\n        public void Apply()\n        {\n            m_Command = CommandType.Reset;\n        }\n\n\n\n///         public void Update()\n//         {\n//             if (!enabled)\n//             {\n//                 return;\n//             }\n// \n// \n//             switch (m_Command)\n//             {\n//             case CommandType.Create:\n//             {\n//                 m_TextureReaderApi.Create(ImageFormat, ImageWidth, ImageHeight, ImageSampleMode == SampleMode.KeepAspectRatio);\n//                 break;\n//             }\n// \n//             case CommandType.Reset:\n//             case CommandType.ReleasePreviousBuffer:\n//             case CommandType.None:\n//             case CommandType.ProcessNextFrame:\n                // BUG: Destroy in Update() method\n                // MESSAGE: Update() method is called each frame. It's inefficient to use Destroy() in Update() method.\n//                 if (m_TextureReaderApi != null)\n//                 {\n//                     m_TextureReaderApi.Destroy();\n//                 }\n//                 m_TextureReaderApi = new TextureReaderApi();\n//                 m_Command = CommandType.Create;\n//                 m_ImageBufferIndex = -1;\n//                 break;\n//             }\n// \n// \n//             if (Frame.CameraImage.Texture != null)\n//             {\n//                 int textureId = Frame.CameraImage.Texture.GetNativeTexturePtr().ToInt32();\n//                 m_ImageBufferIndex =\n//                     m_TextureReaderApi.SubmitFrame(textureId, k_ARCoreTextureWidth, k_ARCoreTextureHeight);\n//             }\n// \n// \n//             m_Command = CommandType.ProcessNextFrame;\n//         }\n\n                // FIXED CODE:"
}