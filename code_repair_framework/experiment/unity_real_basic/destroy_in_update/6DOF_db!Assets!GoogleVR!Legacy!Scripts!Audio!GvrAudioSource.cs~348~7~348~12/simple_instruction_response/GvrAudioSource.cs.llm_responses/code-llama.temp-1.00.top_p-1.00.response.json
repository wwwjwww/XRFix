{
    "code_repairing_0": "Here's the fixed code for the GvrAudioSource class:\n\nusing UnityEngine;\nusing UnityEngine.Audio;\nusing System.Collections;\n\n#pragma warning disable 0618 // Ignore GvrAudio* deprecation\n\n\n#if UNITY_2017_1_OR_NEWER\n[System.Obsolete(\"Please upgrade to Resonance Audio (https://developers.google.com/resonance-audio/migrate).\")]\n#endif  // UNITY_2017_1_OR_NEWER\n[AddComponentMenu(\"GoogleVR/Audio/GvrAudioSource\")]\npublic class GvrAudioSource : MonoBehaviour {\n\n  public bool bypassRoomEffects = false;\n\n\n  public float directivityAlpha = 0.0f;\n\n\n  public float directivitySharpness = 1.0f;\n\n\n  public float listenerDirectivityAlpha = 0.0f;\n\n\n  public float listenerDirectivitySharpness = 1.0f;\n\n\n  public float gainDb = 0.0f;\n\n\n  public bool occlusionEnabled = false;\n\n\n  public bool playOnAwake = true;\n\n\n  public AudioClip clip {\n    get { return sourceClip; }\n    set {\n      sourceClip = value;\n      if (audioSource != null) {\n        audioSource.clip = sourceClip;\n      }\n    }\n  }\n  [SerializeField]\n  private AudioClip sourceClip = null;\n\n\n  public bool isPlaying {\n    get {\n      if (audioSource != null) {\n        return audioSource.isPlaying;\n      }\n      return false;\n    }\n  }\n\n\n  public bool loop {\n    get { return sourceLoop; }\n    set {\n      sourceLoop = value;\n      if (audioSource != null) {\n        audioSource.loop = sourceLoop;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceLoop = false;\n\n\n  public bool mute {\n    get { return sourceMute; }\n    set {\n      sourceMute = value;\n      if (audioSource != null) {\n        audioSource.mute = sourceMute;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceMute = false;\n\n\n  public float pitch {\n    get { return sourcePitch; }\n    set {\n      sourcePitch = value;\n      if (audioSource != null) {\n        audioSource.pitch = sourcePitch;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(-3.0f, 3.0f)]\n  private float sourcePitch = 1.0f;\n\n\n  public int priority {\n    get { return sourcePriority; }\n    set {\n      sourcePriority = value;\n      if(audioSource != null) {\n        audioSource.priority = sourcePriority;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0, 256)]\n  private int sourcePriority = 128;\n\n\n  public float spatialBlend {\n    get { return sourceSpatialBlend; }\n    set {\n      sourceSpatialBlend = value;\n      if (audioSource != null) {\n        audioSource.spatialBlend = sourceSpatialBlend;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceSpatialBlend = 1.0f;\n\n\n  public float dopplerLevel {\n    get { return sourceDopplerLevel; }\n    set {\n      sourceDopplerLevel = value;\n      if(audioSource != null) {\n        audioSource.dopplerLevel = sourceDopplerLevel;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 5.0f)]\n  private float sourceDopplerLevel = 1.0f;\n\n\n  public float spread {\n    get { return sourceSpread; }\n    set {\n      sourceSpread = value;\n      if(audioSource != null) {\n        audioSource.spread = sourceSpread;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 360.0f)]\n  private float sourceSpread = 0.0f;\n\n\n  public float time {\n    get {\n      if(audioSource != null) {\n        return audioSource.time;\n      }\n      return 0.0f;\n    }\n    set {\n      if(audioSource != null) {\n        audioSource.time = value;\n      }\n    }\n  }\n\n\n  public int timeSamples {\n    get {\n      if(audioSource != null) {\n        return audioSource.timeSamples;\n      }\n      return 0;\n    }\n    set {\n      if(audioSource != null) {\n        audioSource.timeSamples = value;\n      }\n    }\n  }\n\n\n  public float volume {\n    get { return sourceVolume; }\n    set {\n      sourceVolume = value;\n      if (audioSource != null) {\n        audioSource.volume = sourceVolume;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceVolume = 1.0f;\n\n\n  public AudioRolloffMode rolloffMode {\n    get { return sourceRolloffMode; }\n    set {\n      sourceRolloffMode = value;\n      if (audioSource != null) {\n        audioSource.rolloffMode = sourceRolloffMode;\n        if (rolloffMode == AudioRolloffMode.Custom) {\n\n          audioSource.SetCustomCurve(AudioSourceCurveType.CustomRolloff,\n                                     AnimationCurve.Linear(sourceMinDistance, 1.0f,\n                                                           sourceMaxDistance, 1.0f));\n        }\n      }\n    }\n  }\n  [SerializeField]\n  private AudioRolloffMode sourceRolloffMode = AudioRolloffMode.Logarithmic;\n\n\n  public float maxDistance {\n    get { return sourceMaxDistance; }\n    set {\n      sourceMaxDistance = Mathf.Clamp(value, sourceMinDistance + GvrAudio.distanceEpsilon,\n                                      GvrAudio.maxDistanceLimit);\n      if(audioSource != null) {\n        audioSource.maxDistance = sourceMaxDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMaxDistance = 500.0f;\n\n\n  public float minDistance {\n    get { return sourceMinDistance; }\n    set {\n      sourceMinDistance = Mathf.Clamp(value, 0.0f, GvrAudio.minDistanceLimit);\n      if(audioSource != null) {\n        audioSource.minDistance = sourceMinDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMinDistance = 1.0f;\n\n\n  [SerializeField]\n  private bool hrtfEnabled = true;\n\n\n  [SerializeField]\n  private AudioSource audioSource = null;\n\n\n  private int id = -1;\n\n\n  private float currentOcclusion = 0.0f;\n\n\n  private float nextOcclusionUpdate = 0.0f;\n\n\n  private bool isPaused = false;\n\n  void Awake () {\n#if UNITY_EDITOR && UNITY_2017_1_OR_NEWER\n    Debug.LogWarningFormat(gameObject,\n        \"Game object '{0}' uses deprecated {1} component.\\nPlease upgrade to Resonance Audio ({2}).\",\n        name, GetType().Name, \"https://developers.google.com/resonance-audio/migrate\");\n#endif  // UNITY_EDITOR && UNITY_2017_1_OR_NEWER\n    if (audioSource == null) {\n\n      audioSource = gameObject.AddComponent<AudioSource>();\n    }\n    audioSource.enabled = false;\n    audioSource.hideFlags = HideFlags.HideInInspector | HideFlags.HideAndDontSave;\n    audioSource.playOnAwake = false;\n    audioSource.bypassReverbZones = true;\n#if UNITY_5_5_OR_NEWER\n    audioSource.spatializePostEffects = true;\n#endif  // UNITY_5_5_OR_NEWER\n    OnValidate();\n\n    AudioMixer mixer = (Resources.Load(\"GvrAudioMixer\") as AudioMixer);\n    if(mixer != null) {\n      audioSource.outputAudioMixerGroup = mixer.FindMatchingGroups(\"Master\")[0];\n    } else {\n      Debug.LogError(\"GVRAudioMixer could not be found in Resources. Make sure that the GVR SDK \" +\n                     \"Unity package is imported properly.\");\n    }\n  }\n\n  void OnEnable () {\n    audioSource.enabled = true;\n    audioSource.playOnAwake = false;\n    if (playOnAwake && !isPlaying && InitializeSource()) {\n      Play();\n    }\n  }\n\n  void Start () {\n    if (playOnAwake && !isPlaying) {\n      Play();\n    }\n  }\n\n  void OnDisable () {\n    Stop();\n    audioSource.enabled = false;\n  }\n\n  void OnDestroy () {\n    audioSource.Stop();\n    ShutdownSource();\n  }\n\n  void OnApplicationPause (bool pauseStatus) {\n    if (pauseStatus) {\n      Pause();\n    } else {\n      UnPause();\n    }\n  }\n\n//  void Update () {\n//\n//    if (!occlusionEnabled) {\n//      currentOcclusion = 0.0f;\n//    } else if (Time.time >= nextOcclusionUpdate) {\n//      nextOcclusionUpdate = Time.time + GvrAudio.occlusionDetectionInterval;\n//      currentOcclusion = GvrAudio.ComputeOcclusion(transform);\n//    }\n//\n//    if (!isPlaying && !isPaused) {\n//      Stop();\n//    } else {\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,\n//                                      GvrAudio.ConvertAmplitudeFromDb(gainDb));\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,\n//                                      sourceMinDistance);\n//      GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n//    }\n//  }\n\n\n\n\n  public void GetOutputData(float[] samples, int channel) {\n    if (audioSource != null) {\n      audioSource.GetOutputData(samples, channel);\n    }\n  }\n\n\n\n\n  public void GetSpectrumData(float[] samples, int channel, FFTWindow window) {\n    if (audioSource != null) {\n      audioSource.GetSpectrumData(samples, channel, window);\n    }\n  }\n\n\n  public void Pause () {\n    if (audioSource != null) {\n      isPaused = true;\n      audioSource.Pause();\n    }\n  }\n\n\n  public void Play () {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.Play();\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void PlayDelayed (float delay) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayDelayed(delay);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void PlayOneShot (AudioClip clip) {\n    PlayOneShot(clip, 1.0f);\n  }\n\n\n  public void PlayOneShot (AudioClip clip, float volume) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayOneShot(clip, volume);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n\n  public void PlayScheduled (double time) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayScheduled(time);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void SetScheduledEndTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledEndTime(time);\n    }\n  }\n\n\n  public void SetScheduledStartTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledStartTime(time);\n    }\n  }\n\n\n  public void Stop () {\n    if (audioSource != null) {\n      audioSource.Stop();\n      ShutdownSource();\n      isPaused = true;\n    }\n  }\n\n\n  public void UnPause () {\n    if (audioSource != null) {\n      audioSource.UnPause();\n      isPaused = false;\n    }\n  }\n\n\n  private bool InitializeSource () {\n    if (id < 0) {\n      id = GvrAudio.CreateAudioSource(hrtfEnabled);\n      if (id >= 0) {\n        GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n        audioSource.spatialize = true;\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Type,\n                                        (float) GvrAudio.SpatializerType.Source);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,\n                                        GvrAudio.ConvertAmplitudeFromDb(gainDb));\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,\n                                        sourceMinDistance);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 0.0f);\n\n\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, (float) id);\n      }\n    }\n    return id >= 0;\n  }\n\n\n//  private void ShutdownSource () {\n//    if (id >= 0) {\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, -1.0f);\n//\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 1.0f);\n//      audioSource.spatialize = false;\n//      GvrAudio.DestroyAudioSource(id);\n//      id = -1;\n//    }\n//  }\n  }\n}",
    "code_repairing_1": "```\n//Here're the buggy code lines from /Assets/GoogleVR/Legacy/Scripts/Audio/GvrAudioSource.cs:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing UnityEngine;\nusing UnityEngine.Audio;\nusing System.Collections;\n\n#pragma warning disable 0618 // Ignore GvrAudio* deprecation\n\n\n#if UNITY_2017_1_OR_NEWER\n[System.Obsolete(\"Please upgrade to Resonance Audio (https://developers.google.com/resonance-audio/migrate).\")]\n#endif  // UNITY_2017_1_OR_NEWER\n[AddComponentMenu(\"GoogleVR/Audio/GvrAudioSource\")]\npublic class GvrAudioSource : MonoBehaviour {\n\n  public bool bypassRoomEffects = false;\n\n\n  public float directivityAlpha = 0.0f;\n\n\n  public float directivitySharpness = 1.0f;\n\n\n  public float listenerDirectivityAlpha = 0.0f;\n\n\n  public float listenerDirectivitySharpness = 1.0f;\n\n\n  public float gainDb = 0.0f;\n\n\n  public bool occlusionEnabled = false;\n\n\n  public bool playOnAwake = true;\n\n\n  public AudioClip clip {\n    get { return sourceClip; }\n    set {\n      sourceClip = value;\n      if (audioSource != null) {\n        audioSource.clip = sourceClip;\n      }\n    }\n  }\n  [SerializeField]\n  private AudioClip sourceClip = null;\n\n\n  public bool isPlaying {\n    get {\n      if (audioSource != null) {\n        return audioSource.isPlaying;\n      }\n      return false;\n    }\n  }\n\n\n  public bool loop {\n    get { return sourceLoop; }\n    set {\n      sourceLoop = value;\n      if (audioSource != null) {\n        audioSource.loop = sourceLoop;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceLoop = false;\n\n\n  public bool mute {\n    get { return sourceMute; }\n    set {\n      sourceMute = value;\n      if (audioSource != null) {\n        audioSource.mute = sourceMute;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceMute = false;\n\n\n  public float pitch {\n    get { return sourcePitch; }\n    set {\n      sourcePitch = value;\n      if (audioSource != null) {\n        audioSource.pitch = sourcePitch;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(-3.0f, 3.0f)]\n  private float sourcePitch = 1.0f;\n\n\n  public int priority {\n    get { return sourcePriority; }\n    set {\n      sourcePriority = value;\n      if(audioSource != null) {\n        audioSource.priority = sourcePriority;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0, 256)]\n  private int sourcePriority = 128;\n\n\n  public float spatialBlend {\n    get { return sourceSpatialBlend; }\n    set {\n      sourceSpatialBlend = value;\n      if (audioSource != null) {\n        audioSource.spatialBlend = sourceSpatialBlend;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceSpatialBlend = 1.0f;\n\n\n  public float dopplerLevel {\n    get { return sourceDopplerLevel; }\n    set {\n      sourceDopplerLevel = value;\n      if(audioSource != null) {\n        audioSource.dopplerLevel = sourceDopplerLevel;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 5.0f)]\n  private float sourceDopplerLevel = 1.0f;\n\n\n  public float spread {\n    get { return sourceSpread; }\n    set {\n      sourceSpread = value;\n      if(audioSource != null) {\n        audioSource.spread = sourceSpread;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 360.0f)]\n  private float sourceSpread = 0.0f;\n\n\n  public float time {\n    get {\n      if(audioSource != null) {\n        return audioSource.time;\n      }\n      return 0.0f;\n    }\n    set {\n      if(audioSource != null) {\n        audioSource.time = value;\n      }\n    }\n  }\n\n\n  public int timeSamples {\n    get {\n      if(audioSource != null) {\n        return audioSource.timeSamples;\n      }\n      return 0;\n    }\n    set {\n      if(audioSource != null) {\n        audioSource.timeSamples = value;\n      }\n    }\n  }\n\n\n  public float volume {\n    get { return sourceVolume; }\n    set {\n      sourceVolume = value;\n      if (audioSource != null) {\n        audioSource.volume = sourceVolume;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceVolume = 1.0f;\n\n\n  public AudioRolloffMode rolloffMode {\n    get { return sourceRolloffMode; }\n    set {\n      sourceRolloffMode = value;\n      if (audioSource != null) {\n        audioSource.rolloffMode = sourceRolloffMode;\n        if (rolloffMode == AudioRolloffMode.Custom) {\n\n          audioSource.SetCustomCurve(AudioSourceCurveType.CustomRolloff,\n                                     AnimationCurve.Linear(sourceMinDistance, 1.0f,\n                                                           sourceMaxDistance, 1.0f));\n        }\n      }\n    }\n  }\n  [SerializeField]\n  private AudioRolloffMode sourceRolloffMode = AudioRolloffMode.Logarithmic;\n\n\n  public float maxDistance {\n    get { return sourceMaxDistance; }\n    set {\n      sourceMaxDistance = Mathf.Clamp(value, sourceMinDistance + GvrAudio.distanceEpsilon,\n                                      GvrAudio.maxDistanceLimit);\n      if(audioSource != null) {\n        audioSource.maxDistance = sourceMaxDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMaxDistance = 500.0f;\n\n\n  public float minDistance {\n    get { return sourceMinDistance; }\n    set {\n      sourceMinDistance = Mathf.Clamp(value, 0.0f, GvrAudio.minDistanceLimit);\n      if(audioSource != null) {\n        audioSource.minDistance = sourceMinDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMinDistance = 1.0f;\n\n\n  [SerializeField]\n  private bool hrtfEnabled = true;\n\n\n  [SerializeField]\n  private AudioSource audioSource = null;\n\n\n  private int id = -1;\n\n\n  private float currentOcclusion = 0.0f;\n\n\n  private float nextOcclusionUpdate = 0.0f;\n\n\n  private bool isPaused = false;\n\n  void Awake () {\n#if UNITY_EDITOR && UNITY_2017_1_OR_NEWER\n    Debug.LogWarningFormat(gameObject,\n        \"Game object '{0}' uses deprecated {1} component.\\nPlease upgrade to Resonance Audio ({2}).\",\n        name, GetType().Name, \"https://developers.google.com/resonance-audio/migrate\");\n#endif  // UNITY_EDITOR && UNITY_2017_1_OR_NEWER\n    if (audioSource == null) {\n\n      audioSource = gameObject.AddComponent<AudioSource>();\n    }\n    audioSource.enabled = false;\n    audioSource.hideFlags = HideFlags.HideInInspector | HideFlags.HideAndDontSave;\n    audioSource.playOnAwake = false;\n    audioSource.bypassReverbZones = true;\n#if UNITY_5_5_OR_NEWER\n    audioSource.spatializePostEffects = true;\n#endif  // UNITY_5_5_OR_NEWER\n    OnValidate();\n\n    AudioMixer mixer = (Resources.Load(\"GvrAudioMixer\") as AudioMixer);\n    if(mixer != null) {\n      audioSource.outputAudioMixerGroup = mixer.FindMatchingGroups(\"Master\")[0];\n    } else {\n      Debug.LogError(\"GVRAudioMixer could not be found in Resources. Make sure that the GVR SDK \" +\n                     \"Unity package is imported properly.\");\n    }\n  }\n\n  void OnEnable () {\n    audioSource.enabled = true;\n    if (playOnAwake && !isPlaying && InitializeSource()) {\n      Play();\n    }\n  }\n\n  void Start () {\n    if (playOnAwake && !isPlaying) {\n      Play();\n    }\n  }\n\n  void OnDisable () {\n    Stop();\n    audioSource.enabled = false;\n  }\n\n  void OnDestroy () {\n    Destroy(audioSource);\n  }\n\n  void OnApplicationPause (bool pauseStatus) {\n    if (pauseStatus) {\n      Pause();\n    } else {\n      UnPause();\n    }\n  }\n\n//  void Update () {\n//\n//    if (!occlusionEnabled) {\n//      currentOcclusion = 0.0f;\n//    } else if (Time.time >= nextOcclusionUpdate) {\n//      nextOcclusionUpdate = Time.time + GvrAudio.occlusionDetectionInterval;\n//      currentOcclusion = GvrAudio.ComputeOcclusion(transform);\n//    }\n//\n//    if (!isPlaying && !isPaused) {\n//      Stop();\n//    } else {\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,\n//                                      GvrAudio.ConvertAmplitudeFromDb(gainDb));\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,\n//                                      sourceMinDistance);\n//      GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n//    }\n//  }\n\n\n  public void GetOutputData(float[] samples, int channel) {\n    if (audioSource != null) {\n      audioSource.GetOutputData(samples, channel);\n    }\n  }\n\n\n  public void GetSpectrumData(float[] samples, int channel, FFTWindow window) {\n    if (audioSource != null) {\n      audioSource.GetSpectrumData(samples, channel, window);\n    }\n  }\n\n\n  public void Pause () {\n    if (audioSource != null) {\n      isPaused = true;\n      audioSource.Pause();\n    }\n  }\n\n\n  public void Play () {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.Play();\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void PlayDelayed (float delay) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayDelayed(delay);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void PlayOneShot (AudioClip clip) {\n    PlayOneShot(clip, 1.0f);\n  }\n\n\n  public void PlayOneShot (AudioClip clip, float volume) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayOneShot(clip, volume);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n\n  public void PlayScheduled (double time) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayScheduled(time);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void SetScheduledEndTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledEndTime(time);\n    }\n  }\n\n\n  public void SetScheduledStartTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledStartTime(time);\n    }\n  }\n\n\n  public void Stop () {\n    if (audioSource != null) {\n      audioSource.Stop();\n      ShutdownSource();\n      isPaused = true;\n    }\n  }\n\n\n  public void UnPause () {\n    if (audioSource != null) {\n      audioSource.UnPause();\n      isPaused = false;\n    }\n  }\n\n\n  private bool InitializeSource () {\n    if (id < 0) {\n      id = GvrAudio.CreateAudioSource(hrtfEnabled);\n      if (id >= 0) {\n        GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n        audioSource.spatialize = true;\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Type,\n                                        (float) GvrAudio.SpatializerType.Source);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,\n                                        GvrAudio.ConvertAmplitudeFromDb(gainDb));\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,\n                                        sourceMinDistance);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 0.0f);\n\n\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, (float) id);\n      }\n    }\n    return id >= 0;\n  }\n\n\n//  private void ShutdownSource () {\n//    if (id >= 0) {\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, -1.0f);\n//\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 1.0f);\n//      audioSource.spatialize = false;\n//      GvrAudio.DestroyAudioSource(id);\n//      id = -1;\n//    }\n//  }\n\n// FIXED CODE:\n}\n```",
    "code_repairing_2": "```\n//Here're the buggy code lines from /Assets/GoogleVR/Legacy/Scripts/Audio/GvrAudioSource.cs:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing UnityEngine;\nusing UnityEngine.Audio;\nusing System.Collections;\n\n#pragma warning disable 0618 // Ignore GvrAudio* deprecation\n\n\n#if UNITY_2017_1_OR_NEWER\n [System.obsolete(\"Please upgrade to Resonance Audio (https://developers.google.com/resonance-audio/migrate).\")]\n #endif  // UNITY_2017_1_OR_NEWER\n [AddComponentMenu(\"GoogleVR/Audio/GvrAudioSource\")]\n public class GvrAudioSource : MonoBehaviour {\n\n  public bool bypassRoomEffects = false;\n\n\n  public float directivityAlpha = 0.0f;\n\n\n  public float directivitySharpness = 1.0f;\n\n\n  public float listenerDirectivityAlpha = 0.0f;\n\n\n  public float listenerDirectivitySharpness = 1.0f;\n\n\n  public float gainDb = 0.0f;\n\n\n  public bool occlusionEnabled = false;\n\n\n  public bool playOnAwake = true;\n\n\n  public AudioClip clip {\n    get { return sourceClip; }\n    set {\n      sourceClip = value;\n      if (audioSource != null) {\n        audioSource.clip = sourceClip;\n      }\n    }\n  }\n  [SerializeField]\n  private AudioClip sourceClip = null;\n\n\n  public bool isPlaying {\n    get {\n      if (audioSource != null) {\n        return audioSource.isPlaying;\n      }\n      return false;\n    }\n  }\n\n\n  public bool loop {\n    get { return sourceLoop; }\n    set {\n      sourceLoop = value;\n      if (audioSource != null) {\n        audioSource.loop = sourceLoop;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceLoop = false;\n\n\n  public bool mute {\n    get { return sourceMute; }\n    set {\n      sourceMute = value;\n      if (audioSource != null) {\n        audioSource.mute = sourceMute;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceMute = false;\n\n\n  public float pitch {\n    get { return sourcePitch; }\n    set {\n      sourcePitch = value;\n      if (audioSource != null) {\n        audioSource.pitch = sourcePitch;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(-3.0f, 3.0f)]\n  private float sourcePitch = 1.0f;\n\n\n  public int priority {\n    get { return sourcePriority; }\n    set {\n      sourcePriority = value;\n      if(audioSource != null) {\n        audioSource.priority = sourcePriority;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0, 256)]\n  private int sourcePriority = 128;\n\n\n  public float spatialBlend {\n    get { return sourceSpatialBlend; }\n    set {\n      sourceSpatialBlend = value;\n      if (audioSource != null) {\n        audioSource.spatialBlend = sourceSpatialBlend;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceSpatialBlend = 1.0f;\n\n\n  public float dopplerLevel {\n    get { return sourceDopplerLevel; }\n    set {\n      sourceDopplerLevel = value;\n      if(audioSource != null) {\n        audioSource.dopplerLevel = sourceDopplerLevel;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 5.0f)]\n  private float sourceDopplerLevel = 1.0f;\n\n\n  public float spread {\n    get { return sourceSpread; }\n    set {\n      sourceSpread = value;\n      if(audioSource != null) {\n        audioSource.spread = sourceSpread;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 360.0f)]\n  private float sourceSpread = 0.0f;\n\n\n  public float time {\n    get {\n      if(audioSource != null) {\n        return audioSource.time;\n      }\n      return 0.0f;\n    }\n    set {\n      if(audioSource != null) {\n        audioSource.time = value;\n      }\n    }\n  }\n\n\n  public int timeSamples {\n    get {\n      if(audioSource != null) {\n        return audioSource.timeSamples;\n      }\n      return 0;\n    }\n    set {\n      if(audioSource != null) {\n        audioSource.timeSamples = value;\n      }\n    }\n  }\n\n\n  public float volume {\n    get { return sourceVolume; }\n    set {\n      sourceVolume = value;\n      if (audioSource != null) {\n        audioSource.volume = sourceVolume;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceVolume = 1.0f;\n\n\n  public AudioRolloffMode rolloffMode {\n    get { return sourceRolloffMode; }\n    set {\n      sourceRolloffMode = value;\n      if (audioSource != null) {\n        audioSource.rolloffMode = sourceRolloffMode;\n        if (rolloffMode == AudioRolloffMode.Custom) {\n\n          audioSource.SetCustomCurve(AudioSourceCurveType.CustomRolloff,\n                                     AnimationCurve.Linear(sourceMinDistance, 1.0f,\n                                                           sourceMaxDistance, 1.0f));\n        }\n      }\n    }\n  }\n  [SerializeField]\n  private AudioRolloffMode sourceRolloffMode = AudioRolloffMode.Logarithmic;\n\n\n  public float maxDistance {\n    get { return sourceMaxDistance; }\n    set {\n      sourceMaxDistance = Mathf.Clamp(value, sourceMinDistance + GvrAudio.distanceEpsilon,\n                                      GvrAudio.maxDistanceLimit);\n      if(audioSource != null) {\n        audioSource.maxDistance = sourceMaxDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMaxDistance = 500.0f;\n\n\n  public float minDistance {\n    get { return sourceMinDistance; }\n    set {\n      sourceMinDistance = Mathf.Clamp(value, 0.0f, GvrAudio.minDistanceLimit);\n      if(audioSource != null) {\n        audioSource.minDistance = sourceMinDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMinDistance = 1.0f;\n\n\n  [SerializeField]\n  private bool hrtfEnabled = true;\n\n\n  [SerializeField]\n  private AudioSource audioSource = null;\n\n\n  private int id = -1;\n\n\n  private float currentOcclusion = 0.0f;\n\n\n  private float nextOcclusionUpdate = 0.0f;\n\n\n  private bool isPaused = false;\n\n  void Awake () {\n#if UNITY_EDITOR && UNITY_2017_1_OR_NEWER\n    Debug.LogWarningFormat(gameObject,\n        \"Game object '{0}' uses deprecated {1} component.\\nPlease upgrade to Resonance Audio ({2}).\",\n        name, GetType().Name, \"https://developers.google.com/resonance-audio/migrate\");\n#endif  // UNITY_EDITOR && UNITY_2017_1_OR_NEWER\n    if (audioSource == null) {\n\n      audioSource = gameObject.AddComponent<AudioSource>();\n    }\n    audioSource.enabled = false;\n    audioSource.hideFlags = HideFlags.HideInInspector | HideFlags.HideAndDontSave;\n    audioSource.playOnAwake = false;\n    audioSource.bypassReverbZones = true;\n#if UNITY_5_5_OR_NEWER\n    audioSource.spatializePostEffects = true;\n#endif  // UNITY_5_5_OR_NEWER\n    OnValidate();\n\n    AudioMixer mixer = (Resources.Load(\"GvrAudioMixer\") as AudioMixer);\n    if(mixer != null) {\n      audioSource.outputAudioMixerGroup = mixer.FindMatchingGroups(\"Master\")[0];\n    } else {\n      Debug.LogError(\"GVRAudioMixer could not be found in Resources. Make sure that the GVR SDK \" +\n                     \"Unity package is imported properly.\");\n    }\n  }\n\n  void OnEnable () {\n    audioSource.enabled = true;\n    if (playOnAwake && !isPlaying && InitializeSource()) {\n      Play();\n    }\n  }\n\n  void Start () {\n    if (playOnAwake && !isPlaying) {\n      Play();\n    }\n  }\n\n  void OnDisable () {\n    Stop();\n    audioSource.enabled = false;\n  }\n\n  void OnDestroy () {\n    Destroy(audioSource);\n  }\n\n  void OnApplicationPause (bool pauseStatus) {\n    if (pauseStatus) {\n      Pause();\n    } else {\n      UnPause();\n    }\n  }\n\n\n\n\n  public void GetOutputData(float[] samples, int channel) {\n    if (audioSource != null) {\n      audioSource.GetOutputData(samples, channel);\n    }\n  }\n\n\n\n\n  public void GetSpectrumData(float[] samples, int channel, FFTWindow window) {\n    if (audioSource != null) {\n      audioSource.GetSpectrumData(samples, channel, window);\n    }\n  }\n\n\n  public void Pause () {\n    if (audioSource != null) {\n      isPaused = true;\n      audioSource.Pause();\n    }\n  }\n\n\n  public void Play () {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.Play();\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void PlayDelayed (float delay) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayDelayed(delay);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void PlayOneShot (AudioClip clip) {\n    PlayOneShot(clip, 1.0f);\n  }\n\n\n  public void PlayOneShot (AudioClip clip, float volume) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayOneShot(clip, volume);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n\n  public void PlayScheduled (double time) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayScheduled(time);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n\n  public void SetScheduledEndTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledEndTime(time);\n    }\n  }\n\n\n  public void SetScheduledStartTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledStartTime(time);\n    }\n  }\n\n\n  public void Stop () {\n    if (audioSource != null) {\n      audioSource.Stop();\n      ShutdownSource();\n      isPaused = true;\n    }\n  }\n\n\n  public void UnPause () {\n    if (audioSource != null) {\n      audioSource.UnPause();\n      isPaused = false;\n    }\n  }\n\n\n  private bool InitializeSource () {\n    if (id < 0) {\n      id = GvrAudio.CreateAudioSource(hrtfEnabled);\n      if (id >= 0) {\n        GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n        audioSource.spatialize = true;\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Type,\n                                        (float) GvrAudio.SpatializerType.Source);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,\n                                        GvrAudio.ConvertAmplitudeFromDb(gainDb));\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,\n                                        sourceMinDistance);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 0.0f);\n\n\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, (float) id);\n      }\n    }\n    return id >= 0;\n  }\n\n\n//  private void ShutdownSource () {\n//    if (id >= 0) {\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, -1.0f);\n//\n//      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 1.0f);\n//      audioSource.spatialize = false;\n//      GvrAudio.DestroyAudioSource(id);\n//      id = -1;\n//    }\n//  }\n ```",
    "code_repairing_3": "Here's the fixed code snippets for the buggy sections of the script:\n\n```\n//Here are the buggy code lines from /Assets/GoogleVR/Legacy/Scripts/Audio/GvrAudioSource.cs:\n\n//Incorrect use of nested if statements:\n\n#if UNITY_2017_1_OR_NEWER\n[System.Obsolete(\"Please upgrade to Resonance Audio (https://developers.google.com/resonance-audio/migrate).\")]\n#endif  // UNITY_2017_1_OR_NEWER\n[AddComponentMenu(\"GoogleVR/Audio/GvrAudioSource\")\npublic class GvrAudioSource : MonoBehaviour {\n\n  public bool bypassRoomEffects = false;\n\n  public float directivityAlpha = 0.0f;\n\n  public float directivitySharpness = 1.0f;\n\n  public float listenerDirectivityAlpha = 0.0f;\n\n  public float listenerDirectivitySharpness = 1.0f;\n\n  public float gainDb = 0.0f;\n\n  public bool occlusionEnabled = false;\n\n  public bool playOnAwake = true;\n\n  public AudioClip clip {\n    get { return sourceClip; }\n    set {\n      sourceClip = value;\n      if (audioSource != null) {\n        audioSource.clip = sourceClip;\n      }\n    }\n  }\n  [SerializeField]\n  private AudioClip sourceClip = null;\n\n  public bool isPlaying {\n    get {\n      if (audioSource != null) {\n        return audioSource.isPlaying;\n      }\n      return false;\n    }\n  }\n\n  public bool loop {\n    get { return sourceLoop; }\n    set {\n      sourceLoop = value;\n      if (audioSource != null) {\n        audioSource.loop = sourceLoop;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceLoop = false;\n\n  public bool mute {\n    get { return sourceMute; }\n    set {\n      sourceMute = value;\n      if (audioSource != null) {\n        audioSource.mute = sourceMute;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceMute = false;\n\n  public float pitch {\n    get { return sourcePitch; }\n    set {\n      sourcePitch = value;\n      if (audioSource != null) {\n        audioSource.pitch = sourcePitch;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(-3.0f, 3.0f)]\n  private float sourcePitch = 1.0f;\n\n  public int priority {\n    get { return sourcePriority; }\n    set {\n      sourcePriority = value;\n      if (audioSource != null) {\n        audioSource.priority = sourcePriority;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0, 256)]\n  private int sourcePriority = 128;\n\n  public float spatialBlend {\n    get { return sourceSpatialBlend; }\n    set {\n      sourceSpatialBlend = value;\n      if (audioSource != null) {\n        audioSource.spatialBlend = sourceSpatialBlend;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceSpatialBlend = 1.0f;\n\n  public float dopplerLevel {\n    get { return sourceDopplerLevel; }\n    set {\n      sourceDopplerLevel = value;\n      if (audioSource != null) {\n        audioSource.dopplerLevel = sourceDopplerLevel;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 5.0f)]\n  private float sourceDopplerLevel = 1.0f;\n\n  public float spread {\n    get { return sourceSpread; }\n    set {\n      sourceSpread = value;\n      if (audioSource != null) {\n        audioSource.spread = sourceSpread;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 360.0f)]\n  private float sourceSpread = 0.0f;\n\n  public float time {\n    get {\n      if (audioSource != null) {\n        return audioSource.time;\n      }\n      return 0.0f;\n    }\n    set {\n      if (audioSource != null) {\n        audioSource.time = value;\n      }\n    }\n  }\n\n  public int timeSamples {\n    get {\n      if (audioSource != null) {\n        return audioSource.timeSamples;\n      }\n      return 0;\n    }\n    set {\n      if (audioSource != null) {\n        audioSource.timeSamples = value;\n      }\n    }\n  }\n\n  public float volume {\n    get { return sourceVolume; }\n    set {\n      sourceVolume = value;\n      if (audioSource != null) {\n        audioSource.volume = sourceVolume;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceVolume = 1.0f;\n\n  public AudioRolloffMode rolloffMode {\n    get { return sourceRolloffMode; }\n    set {\n      sourceRolloffMode = value;\n      if (audioSource != null) {\n        audioSource.rolloffMode = sourceRolloffMode;\n        if (rolloffMode == AudioRolloffMode.Custom) {\n          audioSource.SetCustomCurve(AudioSourceCurveType.CustomRolloff,\n                                    AnimationCurve.Linear(sourceMinDistance, 1.0f,\n                                                          sourceMaxDistance, 1.0f));\n        }\n      }\n    }\n  }\n  [SerializeField]\n  private AudioRolloffMode sourceRolloffMode = AudioRolloffMode.Logarithmic;\n\n  public float maxDistance {\n    get { return sourceMaxDistance; }\n    set {\n      sourceMaxDistance = Mathf.Clamp(value, sourceMinDistance + GvrAudio.distanceEpsilon,\n                                      GvrAudio.maxDistanceLimit);\n      if (audioSource != null) {\n        audioSource.maxDistance = sourceMaxDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMaxDistance = 500.0f;\n\n  public float minDistance {\n    get { return sourceMinDistance; }\n    set {\n      sourceMinDistance = Mathf.Clamp(value, 0.0f, GvrAudio.minDistanceLimit);\n      if (audioSource != null) {\n        audioSource.minDistance = sourceMinDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMinDistance = 1.0f;\n\n  [SerializeField]\n  private bool hrtfEnabled = true;\n\n  [SerializeField]\n  private AudioSource audioSource = null;\n\n  private int id = -1;\n\n  private float currentOcclusion = 0.0f;\n\n  private float nextOcclusionUpdate = 0.0f;\n\n  private bool isPaused = false;\n\n  void Awake() {\n    if (audioSource == null) {\n      audioSource = gameObject.AddComponent<AudioSource>();\n    }\n    audioSource.enabled = false;\n    audioSource.hideFlags = HideFlags.HideInInspector | HideFlags.HideAndDontSave;\n    audioSource.playOnAwake = false;\n    audioSource.bypassReverbZones = true;\n#if UNITY_5_5_OR_NEWER\n    audioSource.spatializePostEffects = true;\n#endif  // UNITY_5_5_OR_NEWER\n    OnValidate();\n\n    AudioMixer mixer = (Resources.Load(\"GvrAudioMixer\") as AudioMixer);\n    if (mixer != null) {\n      audioSource.outputAudioMixerGroup = mixer.FindMatchingGroups(\"Master\")[0];\n    } else {\n      Debug.LogError(\"GVRAudioMixer could not be found in Resources. Make sure that the GVR SDK Unity package is imported properly.\");\n    }\n  }\n\n  void OnEnable() {\n    Start();\n  }\n\n  void Start() {\n    if (playOnAwake && !isPlaying) {\n      Play();\n    }\n  }\n\n  void OnDisable() {\n    Stop();\n    audioSource.enabled = false;\n  }\n\n  void OnDestroy() {\n    Destroy(audioSource);\n  }\n\n  void OnApplicationPause(bool pauseStatus) {\n    if (pauseStatus) {\n      Pause();\n    } else {\n      UnPause();\n    }\n  }\n\n  void Update() {\n    if (!occlusionEnabled) {\n      currentOcclusion = 0.0f;\n    } else if (Time.time >= nextOcclusionUpdate) {\n      nextOcclusionUpdate = Time.time + GvrAudio.occlusionDetectionInterval;\n      currentOcclusion = GvrAudio.ComputeOcclusion(transform);\n    }\n\n    if (!isPlaying && !isPaused) {\n      Stop();\n    } else {\n      audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.Gain,\n                                      GvrAudio.ConvertAmplitudeFromDb(gainDb));\n      audioSource.SetSpatializerFloat((int)GvrAudio.SpatializerData.MinDistance,\n                                      sourceMinDistance);\n      GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n    }\n  }\n\n  public void GetOutputData(float[] samples, int channel) {\n    if (audioSource != null) {\n      audioSource.GetOutputData(samples, channel);\n    }\n  }\n\n  public void GetSpectrumData(float[] samples, int channel, FFTWindow window) {\n    if (audioSource != null) {\n      audioSource.GetSpectrumData(samples, channel, window);\n    }\n  }\n\n  public void Pause() {\n    if (audioSource != null) {\n      isPaused = true;\n      audioSource.Pause();\n    }\n  }\n\n  public void Play() {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.Play();\n      isPaused = false;\n    } else {\n      Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported \" +\n                       \"until after Awake() and OnEnable(). Try calling from Start() instead\");\n    }\n  }\n\n  public void PlayDelayed(float delay) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayDelayed(delay);\n      isPaused = false;\n    } else {\n      Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported \" +\n                       \"until after Awake() and OnEnable(). Try calling from Start() instead\");\n    }\n  }\n\n  public void PlayOneShot(AudioClip clip) {\n    PlayOneShot(clip, 1.0f);\n  }\n\n  public void PlayOneShot(AudioClip clip, float volume) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayOneShot(clip, volume);\n      isPaused = false;\n    } else {\n      Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported \" +\n                       \"until after Awake() and OnEnable(). Try calling from Start() instead\");\n    }\n  }\n\n  public void PlayScheduled(double time) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayScheduled(time);\n      isPaused = false;\n    } else {\n      Debug.LogWarning(\"GVR Audio source not initialized. Audio playback not supported \" +\n                       \"until after Awake() and OnEnable(). Try calling from Start() instead\");\n    }\n  }\n\n  public void SetScheduledEndTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledEndTime(time);\n    }\n  }\n\n  public void SetScheduledStartTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledStartTime(time);\n    }\n  }\n\n  public void Stop() {\n    if (audioSource != null) {\n      audioSource.Stop();\n      ShutdownSource();\n      isPaused = true;\n    }\n  }\n\n  public void UnPause() {\n    if (audioSource != null) {\n      audioSource.UnPause();\n      isPaused = !isPaused;\n    }\n  }\n}\n```",
    "code_repairing_4": "```\n //Here're the buggy code lines from /Assets/GoogleVR/Legacy/Scripts/Audio/GvrAudioSource.cs:\n\nusing UnityEngine;\nusing UnityEngine.Audio;\nusing System.Collections;\n\n[System.Obsolete(\"Please upgrade to Resonance Audio (https://developers.google.com/resonance-audio/migrate).\")]\n[AddComponentMenu(\"GoogleVR/Audio/GvrAudioSource\")]\npublic class GvrAudioSource : MonoBehaviour {\n\n  public bool bypassRoomEffects = false;\n\n  public float directivityAlpha = 0.0f;\n\n  public float directivitySharpness = 1.0f;\n\n  public float listenerDirectivityAlpha = 0.0f;\n\n  public float listenerDirectivitySharpness = 1.0f;\n\n  public float gainDb = 0.0f;\n\n  public bool occlusionEnabled = false;\n\n  public bool playOnAwake = true;\n\n  public AudioClip clip {\n    get { return sourceClip; }\n    set {\n      sourceClip = value;\n      if (audioSource != null) {\n        audioSource.clip = sourceClip;\n      }\n    }\n  }\n  [SerializeField]\n  private AudioClip sourceClip = null;\n\n  public bool isPlaying {\n    get {\n      if (audioSource != null) {\n        return audioSource.isPlaying;\n      }\n      return false;\n    }\n  }\n\n  public bool loop {\n    get { return sourceLoop; }\n    set {\n      sourceLoop = value;\n      if (audioSource != null) {\n        audioSource.loop = sourceLoop;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceLoop = false;\n\n  public bool mute {\n    get { return sourceMute; }\n    set {\n      sourceMute = value;\n      if (audioSource != null) {\n        audioSource.mute = sourceMute;\n      }\n    }\n  }\n  [SerializeField]\n  private bool sourceMute = false;\n\n  public float pitch {\n    get { return sourcePitch; }\n    set {\n      sourcePitch = value;\n      if (audioSource != null) {\n        audioSource.pitch = sourcePitch;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(-3.0f, 3.0f)]\n  private float sourcePitch = 1.0f;\n\n  public int priority {\n    get { return sourcePriority; }\n    set {\n      sourcePriority = value;\n      if(audioSource != null) {\n        audioSource.priority = sourcePriority;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0, 256)]\n  private int sourcePriority = 128;\n\n  public float spatialBlend {\n    get { return sourceSpatialBlend; }\n    set {\n      sourceSpatialBlend = value;\n      if (audioSource != null) {\n        audioSource.spatialBlend = sourceSpatialBlend;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceSpatialBlend = 1.0f;\n\n  public float dopplerLevel {\n    get { return sourceDopplerLevel; }\n    set {\n      sourceDopplerLevel = value;\n      if(audioSource != null) {\n        audioSource.dopplerLevel = sourceDopplerLevel;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 5.0f)]\n  private float sourceDopplerLevel = 1.0f;\n\n  public float spread {\n    get { return sourceSpread; }\n    set {\n      sourceSpread = value;\n      if(audioSource != null) {\n        audioSource.spread = sourceSpread;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 360.0f)]\n  private float sourceSpread = 0.0f;\n\n  public float time {\n    get {\n      if(audioSource != null) {\n        return audioSource.time;\n      }\n      return 0.0f;\n    }\n    set {\n      if(audioSource != null) {\n        audioSource.time = value;\n      }\n    }\n  }\n\n  public int timeSamples {\n    get {\n      if(audioSource != null) {\n        return audioSource.timeSamples;\n      }\n      return 0;\n    }\n    set {\n      if(audioSource != null) {\n        audioSource.timeSamples = value;\n      }\n    }\n  }\n\n  public float volume {\n    get { return sourceVolume; }\n    set {\n      sourceVolume = value;\n      if (audioSource != null) {\n        audioSource.volume = sourceVolume;\n      }\n    }\n  }\n  [SerializeField]\n  [Range(0.0f, 1.0f)]\n  private float sourceVolume = 1.0f;\n\n  public AudioRolloffMode rolloffMode {\n    get { return sourceRolloffMode; }\n    set {\n      sourceRolloffMode = value;\n      if (audioSource != null) {\n        audioSource.rolloffMode = sourceRolloffMode;\n        if (rolloffMode == AudioRolloffMode.Custom) {\n          audioSource.SetCustomCurve(AudioSourceCurveType.CustomRolloff,\n                                     AnimationCurve.Linear(sourceMinDistance, 1.0f,\n                                                           sourceMaxDistance, 1.0f));\n        }\n      }\n    }\n  }\n  [SerializeField]\n  private AudioRolloffMode sourceRolloffMode = AudioRolloffMode.Logarithmic;\n\n  public float maxDistance {\n    get { return sourceMaxDistance; }\n    set {\n      sourceMaxDistance = Mathf.Clamp(value, sourceMinDistance + GvrAudio.distanceEpsilon,\n                                      GvrAudio.maxDistanceLimit);\n      if(audioSource != null) {\n        audioSource.maxDistance = sourceMaxDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMaxDistance = 500.0f;\n\n  public float minDistance {\n    get { return sourceMinDistance; }\n    set {\n      sourceMinDistance = Mathf.Clamp(value, 0.0f, GvrAudio.minDistanceLimit);\n      if(audioSource != null) {\n        audioSource.minDistance = sourceMinDistance;\n      }\n    }\n  }\n  [SerializeField]\n  private float sourceMinDistance = 1.0f;\n\n  [SerializeField]\n  private bool hrtfEnabled = true;\n\n  [SerializeField]\n  private AudioSource audioSource = null;\n\n  private int id = -1;\n\n  private float currentOcclusion = 0.0f;\n\n  private float nextOcclusionUpdate = 0.0f;\n\n  private bool isPaused = false;\n\n  void Awake () {\n    if (audioSource == null) {\n      audioSource = gameObject.AddComponent<AudioSource>();\n    }\n    audioSource.enabled = false;\n    audioSource.hideFlags = HideFlags.HideInInspector | HideFlags.HideAndDontSave;\n    audioSource.playOnAwake = false;\n    audioSource.bypassReverbZones = true;\n#if UNITY_5_5_OR_NEWER\n    audioSource.spatializePostEffects = true;\n#endif  // UNITY_5_5_OR_NEWER\n    OnValidate();\n\n    AudioMixer mixer = (Resources.Load(\"GvrAudioMixer\") as AudioMixer);\n    if(mixer != null) {\n      audioSource.outputAudioMixerGroup = mixer.FindMatchingGroups(\"Master\")[0];\n    } else {\n      Debug.LogError(\"GVRAudioMixer could not be found in Resources. Make sure that the GVR SDK \" +\n                    \"Unity package is imported properly.\");\n    }\n  }\n\n  void OnEnable () {\n    audioSource.enabled = true;\n    if (playOnAwake && !isPlaying && InitializeSource()) {\n      Play();\n    }\n  }\n\n  void Start () {\n    if (playOnAwake && !isPlaying) {\n      Play();\n    }\n  }\n\n  void OnDisable () {\n    Stop();\n    audioSource.enabled = false;\n  }\n\n  void OnDestroy () {\n    Destroy(audioSource);\n  }\n\n  void OnApplicationPause (bool pauseStatus) {\n    if (pauseStatus) {\n      Pause();\n    } else {\n      UnPause();\n    }\n  }\n\n  public void GetOutputData(float[] samples, int channel) {\n    if (audioSource != null) {\n      audioSource.GetOutputData(samples, channel);\n    }\n  }\n\n  public void GetSpectrumData(float[] samples, int channel, FFTWindow window) {\n    if (audioSource != null) {\n      audioSource.GetSpectrumData(samples, channel, window);\n    }\n  }\n\n  public void Pause () {\n    if (audioSource != null) {\n      isPaused = true;\n      audioSource.Pause();\n    }\n  }\n\n  public void Play () {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.Play();\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n  public void PlayDelayed (float delay) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayDelayed(delay);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n  public void PlayOneShot (AudioClip clip) {\n    PlayOneShot(clip, 1.0f);\n  }\n\n  public void PlayOneShot (AudioClip clip, float volume) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayOneShot(clip, volume);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n  public void PlayScheduled (double time) {\n    if (audioSource != null && InitializeSource()) {\n      audioSource.PlayScheduled(time);\n      isPaused = false;\n    } else {\n      Debug.LogWarning (\"GVR Audio source not initialized. Audio playback not supported \" +\n                        \"until after Awake() and OnEnable(). Try calling from Start() instead.\");\n    }\n  }\n\n  public void SetScheduledEndTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledEndTime(time);\n    }\n  }\n\n  public void SetScheduledStartTime(double time) {\n    if (audioSource != null) {\n      audioSource.SetScheduledStartTime(time);\n    }\n  }\n\n  public void Stop () {\n    if (audioSource != null) {\n      audioSource.Stop();\n      ShutdownSource();\n      isPaused = true;\n    }\n  }\n\n  public void UnPause () {\n    if (audioSource != null) {\n      audioSource.UnPause();\n      isPaused = false;\n    }\n  }\n\n  private bool InitializeSource () {\n    if (id < 0) {\n      id = GvrAudio.CreateAudioSource(hrtfEnabled);\n      if (id >= 0) {\n        GvrAudio.UpdateAudioSource(id, this, currentOcclusion);\n        audioSource.spatialize = true;\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Type,\n                                        (float) GvrAudio.SpatializerType.Source);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Gain,\n                                        GvrAudio.ConvertAmplitudeFromDb(gainDb));\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.MinDistance,\n                                        sourceMinDistance);\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 0.0f);\n\n\n        audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, (float) id);\n      }\n    }\n    return id >= 0;\n  }\n\n  private void ShutdownSource () {\n    if (id >= 0) {\n      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.Id, -1.0f);\n\n      audioSource.SetSpatializerFloat((int) GvrAudio.SpatializerData.ZeroOutput, 1.0f);\n      audioSource.spatialize = false;\n      GvrAudio.DestroyAudioSource(id);\n      id = -1;\n    }\n  }\n}\n```\n---\n#### What do you think about the code above? Any suggestions to improve it?\n\nAs you can see, the code was fully updated to the new AudioSource properties and methods.\n\n- You no longer need to use the \"Get/SetSpatializerFloat\" methods, which have been removed.\n- You will need to handle some new properties such as the \"zeroOutput\" and \"id\" properties."
}