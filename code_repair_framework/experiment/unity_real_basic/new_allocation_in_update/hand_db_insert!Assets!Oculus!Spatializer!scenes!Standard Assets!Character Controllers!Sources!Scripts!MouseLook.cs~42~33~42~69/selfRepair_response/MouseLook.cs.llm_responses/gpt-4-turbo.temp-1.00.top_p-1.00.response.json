"{\"id\":\"chatcmpl-BrLDvdXfd8AR8iCPj4PQ9DTVXiHqv\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\n[AddComponentMenu(\\\"Camera-Control/Mouse Look\\\")]\\npublic class MouseLook : MonoBehaviour {\\n\\n\\tpublic enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }\\n\\tpublic RotationAxes axes = RotationAxes.MouseXAndY;\\n\\tpublic float sensitivityX = 15F;\\n\\tpublic float sensitivityY = 15F;\\n\\n\\tpublic float minimumX = -360F;\\n\\tpublic float maximumX = 360F;\\n\\n\\tpublic float minimumY = -60F;\\n\\tpublic float maximumY = 60F;\\n\\n\\tfloat rotationY = 0F;\\n\\n\\tprivate Vector3 newEulerAngles = Vector3.zero; // Reuse vector for calculations\\n\\n\\tvoid Update () {\\n\\t\\tif (axes == RotationAxes.MouseXAndY) {\\n\\t\\t\\tfloat rotationX = transform.localEulerAngles.y + Input.GetAxis(\\\"Mouse X\\\") * sensitivityX;\\n\\t\\t\\t\\n\\t\\t\\trotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n\\t\\t\\trotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\\n\\t\\t\\t\\n\\t\\t\\tnewEulerAngles.Set(-rotationY, rotationX, 0);\\n\\t\\t\\ttransform.localEulerAngles = newEulerAngles;\\n\\t\\t}\\n\\t\\telse if (axes == RotationAxes.MouseX) {\\n\\t\\t\\ttransform.Rotate(0, Input.GetAxis(\\\"Mouse X\\\") * sensitivityX, 0);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\trotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n\\t\\t\\trotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\\n\\t\\t\\t\\n\\t\\t\\tnewEulerAngles.Set(-rotationY, transform.localEulerAngles.y, 0);\\n\\t\\t\\ttransform.localEulerAngles = newEulerAngles;\\n\\t\\t}\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\n[AddComponentMenu(\\\"Camera-Control/Mouse Look\\\")]\\npublic class MouseLook : MonoBehaviour {\\n\\n\\tpublic enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }\\n\\tpublic RotationAxes axes = RotationAxes.MouseXAndY;\\n\\tpublic float sensitivityX = 15F;\\n\\tpublic float sensitivityY = 15F;\\n\\n\\tpublic float minimumX = -360F;\\n\\tpublic float maximumX = 360F;\\n\\n\\tpublic float minimumY = -60F;\\n\\tpublic float maximumY = 60F;\\n\\n\\tfloat rotationY = 0F;\\n    Vector3 eulerAngles = Vector3.zero; // Cache the vector to avoid new allocation\\n\\n\\tvoid Update ()\\n\\t{\\n\\t\\tif (axes == RotationAxes.MouseXAndY)\\n\\t\\t{\\n\\t\\t\\tfloat rotationX = transform.localEulerAngles.y + Input.GetAxis(\\\"Mouse X\\\") * sensitivityX;\\n\\t\\t\\t\\n\\t\\t\\trotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n\\t\\t\\trotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\\n\\t\\t\\t\\n\\t\\t\\teulerAngles.Set(-rotationY, rotationX, 0); // Reuse the cached vector\\n\\t\\t\\ttransform.localEulerAngles = eulerAngles;\\n\\t\\t}\\n\\t\\telse if (axes == RotationAxes.MouseX)\\n\\t\\t{\\n\\t\\t\\ttransform.Rotate(0, Input.GetAxis(\\\"Mouse X\\\") * sensitivityX, 0);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\trotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n\\t\\t\\trotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\\n\\n\\t\\t\\teulerAngles.Set(-rotationY, transform.localEulerAngles.y, 0); // Reuse the cached vector\\n\\t\\t\\ttransform.localEulerAngles = eulerAngles;\\n\\t\\t}\\n\\t}\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\n[AddComponentMenu(\\\"Camera-Control/Mouse Look\\\")]\\npublic class MouseLook : MonoBehaviour {\\n\\n    public enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }\\n    public RotationAxes axes = RotationAxes.MouseXAndY;\\n    public float sensitivityX = 15F;\\n    public float sensitivityY = 15F;\\n\\n    public float minimumX = -360F;\\n    public float maximumX = 360F;\\n\\n    public float minimumY = -60F;\\n    public float maximumY = 60F;\\n\\n    float rotationY = 0F;\\n\\n    void Update ()\\n    {\\n        if (axes == RotationAxes.MouseXAndY)\\n        {\\n            float rotationX = transform.localEulerAngles.y + Input.GetAxis(\\\"Mouse X\\\") * sensitivityX;\\n\\n            rotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n            rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);\\n\\n            Vector3 newEulerAngles = transform.localEulerAngles;\\n            newEulerAngles.x = -rotationY;\\n            newEulerAngles.y = rotationX;\\n            transform.localEulerAngles = newEulerAngles;\\n        }\\n        else if (axes == RotationAxes.MouseX)\\n        {\\n            transform.Rotate(0, Input.GetAxis(\\\"Mouse X\\\") * sensitivityX, 0);\\n        }\\n        else\\n        {\\n            rotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n            rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);\\n\\n            Vector3 newEulerAngles = transform.localEulerAngles;\\n            newEulerAngles.x = -rotationY;\\n            transform.localEulerAngles = newEulerAngles;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\n[AddComponentMenu(\\\"Camera-Control/Mouse Look\\\")]\\npublic class MouseLook : MonoBehaviour {\\n\\n    public enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }\\n    public RotationAxes axes = RotationAxes.MouseXAndY;\\n    public float sensitivityX = 15F;\\n    public float sensitivityY = 15F;\\n\\n    public float minimumX = -360F;\\n    public float maximumX = 360F;\\n\\n    public float minimumY = -60F;\\n    public float maximumY = 60F;\\n\\n    float rotationY = 0F;\\n    Vector3 newEulerAngles = Vector3.zero; // Allocate vector3 once to avoid new allocation in Update()\\n\\n    void Update()\\n    {\\n        if (axes == RotationAxes.MouseXAndY)\\n        {\\n            float rotationX = transform.localEulerAngles.y + Input.GetAxis(\\\"Mouse X\\\") * sensitivityX;\\n\\n            rotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n            rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);\\n\\n            // Reuse existing Vector3 allocation instead of creating a new one\\n            newEulerAngles.Set(-rotationY, rotationX, 0);\\n            transform.localEulerAngles = newEulerAngles;\\n        }\\n        else if (axes == RotationAxes.MouseX)\\n        {\\n            transform.Rotate(0, Input.GetAxis(\\\"Mouse X\\\") * sensitivityX, 0);\\n        }\\n        else\\n        {\\n            rotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n            rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);\\n\\n            // Reuse existing Vector3 allocation instead of creating a new one\\n            newEulerAngles.Set(-rotationY, transform.localEulerAngles.y, 0);\\n            transform.localEulerAngles = newEulerAngles;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\n[AddComponentMenu(\\\"Camera-Control/Mouse Look\\\")]\\npublic class MouseLook : MonoBehaviour {\\n\\n    public enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }\\n    public RotationAxes axes = RotationAxes.MouseXAndY;\\n    public float sensitivityX = 15F;\\n    public float sensitivityY = 15F;\\n\\n    public float minimumX = -360F;\\n    public float maximumX = 360F;\\n\\n    public float minimumY = -60F;\\n    public float maximumY = 60F;\\n\\n    float rotationY = 0F;\\n\\n    private Vector3 tempEulerAngles;\\n\\n    void Start() {\\n        tempEulerAngles = transform.localEulerAngles;\\n    }\\n\\n    void Update () {\\n        if (axes == RotationAxes.MouseXAndY) {\\n            float rotationX = transform.localEulerAngles.y + Input.GetAxis(\\\"Mouse X\\\") * sensitivityX;\\n            \\n            rotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n            rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);\\n            \\n            tempEulerAngles.Set(-rotationY, rotationX, 0);\\n            transform.localEulerAngles = tempEulerAngles;\\n        }\\n        else if (axes == RotationAxes.MouseX) {\\n            transform.Rotate(0, Input.GetAxis(\\\"Mouse X\\\") * sensitivityX, 0);\\n        }\\n        else {\\n            rotationY += Input.GetAxis(\\\"Mouse Y\\\") * sensitivityY;\\n            rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);\\n            \\n            tempEulerAngles.Set(-rotationY, transform.localEulerAngles.y, 0);\\n            transform.localEulerAngles = tempEulerAngles;\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752052667,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":1859,\"prompt_tokens\":512,\"total_tokens\":2371,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"