using UnityEngine;

namespace Crest
{
    public class VisualiseCollisionArea : MonoBehaviour
    {
        [SerializeField]
        float _objectWidth = 0f;
        
        static readonly int s_steps = 10; // Declare this before using it to initialize arrays
        static readonly float s_radius = 5f;

        float[] _resultHeights;
        Vector3[] _samplePositions;

        protected GameObject gobj8;
        protected GameObject a8;

        private float timeLimit = 5f;
        private float timer = 0f;
        private bool instantiate_gobj = false;

        void Start()
        {
            _resultHeights = new float[s_steps * s_steps];
            _samplePositions = new Vector3[s_steps * s_steps];
        }

        void Update()
        {
            timer += Time.deltaTime;

            if (!instantiate_gobj && timer >= timeLimit)
            {
                a8 = Instantiate(gobj8);
                timer = 0;
                instantiate_gobj = true;
            }
            if (instantiate_gobj && timer >= timeLimit)
            {
                var obj8 = a8.AddComponent<VisualiseRayTrace>();
                obj8.FreeObject();
                timer = 0;
                instantiate_gobj = false;
            }

            if (OceanRenderer.Instance == null || OceanRenderer.Instance.CollisionProvider == null)
            {
                return;
            }

            var collProvider = OceanRenderer.Instance.CollisionProvider;

            for (int i = 0; i < s_steps; i++)
            {
                for (int j = 0; j < s_steps; j++)
                {
                    int index = j * s_steps + i;
                    _samplePositions[index] = new Vector3(((i + 0.5f) - s_steps / 2f) * s_radius, 0f, ((j + 0.5f) - s_steps / 2f) * s_radius)
                    {
                        x = transform.position.x,
                        z = transform.position.z
                    };
                }
            }

            if (collProvider.RetrieveSucceeded(collProvider.Query(GetHashCode(), _objectWidth, _samplePositions, _resultHeights, null, null)))
            {
                for (int i = 0; i < s_steps; i++)
                {
                    for (int j = 0; j < s_steps; j++)
                    {
                        int index = j * s_steps + i;
                        var result = _samplePositions[index];
                        result.y = _resultHeights[index];
                        DebugDrawCross(result, 1f, Color.green);
                    }
                }
            }
        }
    }
}
