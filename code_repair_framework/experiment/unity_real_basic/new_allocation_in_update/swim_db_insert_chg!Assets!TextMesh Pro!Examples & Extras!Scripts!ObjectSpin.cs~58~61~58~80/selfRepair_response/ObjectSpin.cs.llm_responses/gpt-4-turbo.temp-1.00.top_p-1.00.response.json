"{\"id\":\"chatcmpl-BqA1UzpMEibITOlEf9fjgS2G8MEpC\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace TMPro.Examples\\n{\\n    public class ObjectSpin : MonoBehaviour\\n    {\\n#pragma warning disable 0414\\n\\n        public float SpinSpeed = 5;\\n        public int RotationRange = 15;\\n        private Transform m_transform;\\n\\n        private float m_time;\\n        private Vector3 m_prevPOS;\\n        private Vector3 m_initial_Rotation;\\n        private Vector3 m_initial_Position;\\n        private Color32 m_lightColor;\\n        private int frames = 0;\\n        private Vector3 offset; // Reused Vector3 allocation\\n\\n        public enum MotionType { Rotation, BackAndForth, Translation };\\n        public MotionType Motion;\\n\\n        void Awake()\\n        {\\n            m_transform = transform;\\n            m_initial_Rotation = m_transform.rotation.eulerAngles;\\n            m_initial_Position = m_transform.position;\\n\\n            Light light = GetComponent<Light>();\\n            m_lightColor = light != null ? light.color : Color.black;\\n\\n            // Initialize offset to reuse in Update\\n            offset = new Vector3();\\n        }\\n\\n        void Update()\\n        {\\n            if (Motion == MotionType.Rotation)\\n            {\\n                m_transform.Rotate(0, SpinSpeed * Time.deltaTime, 0);\\n            }\\n            else if (Motion == MotionType.BackAndForth)\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n                m_transform.rotation = Quaternion.Euler(m_initial_Rotation.x, Mathf.Sin(m_time) * RotationRange + m_initial_Rotation.y, m_initial_Rotation.z);\\n            }\\n            else\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n\\n                float x = 15 * Mathf.Cos(m_time * .95f);\\n                float y = 10;\\n                float z = 0f;\\n\\n                // Reuse the offset vector to avoid allocations\\n                offset.Set(x, z, y);\\n                m_transform.position = m_initial_Position + offset;\\n\\n                m_prevPOS = m_transform.position;\\n                frames += 1;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace TMPro.Examples\\n{\\n    public class ObjectSpin : MonoBehaviour\\n    {\\n#pragma warning disable 0414\\n\\n        public float SpinSpeed = 5;\\n        public int RotationRange = 15;\\n        private Transform m_transform;\\n\\n        private float m_time;\\n        private Vector3 m_prevPOS;\\n        private Vector3 m_initial_Rotation;\\n        private Vector3 m_initial_Position;\\n        private Color32 m_lightColor;\\n        private int frames = 0;\\n        private Vector3 offset; // Reuse this vector\\n\\n        public enum MotionType { Rotation, BackAndForth, Translation };\\n        public MotionType Motion;\\n\\n        void Awake()\\n        {\\n            m_transform = transform;\\n            m_initial_Rotation = m_transform.rotation.eulerAngles;\\n            m_initial_Position = m_transform.position;\\n\\n            Light light = GetComponent<Light>();\\n            m_lightColor = light != null ? light.color : Color.black;\\n\\n            // Initialize the offset vector\\n            offset = new Vector3(0, 0, 0);\\n        }\\n\\n        void Update()\\n        {\\n            if (Motion == MotionType.Rotation)\\n            {\\n                m_transform.Rotate(0, SpinSpeed * Time.deltaTime, 0);\\n            }\\n            else if (Motion == MotionType.BackAndForth)\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n                m_transform.rotation = Quaternion.Euler(m_initial_Rotation.x, Mathf.Sin(m_time) * RotationRange + m_initial_Rotation.y, m_initial_Rotation.z);\\n            }\\n            else\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n\\n                float x = 15 * Mathf.Cos(m_time * .95f);\\n                float y = 10;\\n                float z = 0f;\\n\\n                // Reuse the offset vector instead of allocating a new one each frame\\n                offset.Set(x, z, y);\\n                m_transform.position = m_initial_Position + offset;\\n\\n                m_prevPOS = m_transform.position;\\n                frames += 1;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace TMPro.Examples\\n{\\n    public class ObjectSpin : MonoBehaviour\\n    {\\n#pragma warning disable 0414\\n\\n        public float SpinSpeed = 5;\\n        public int RotationRange = 15;\\n        private Transform m_transform;\\n\\n        private float m_time;\\n        private Vector3 m_prevPOS;\\n        private Vector3 m_initial_Rotation;\\n        private Vector3 m_initial_Position;\\n        private Color32 m_lightColor;\\n        private int frames = 0;\\n\\n        private Vector3 m_translationVector;\\n\\n        public enum MotionType { Rotation, BackAndForth, Translation };\\n        public MotionType Motion;\\n\\n        void Awake()\\n        {\\n            m_transform = transform;\\n            m_initial_Rotation = m_transform.rotation.eulerAngles;\\n            m_initial_Position = m_transform.position;\\n            m_translationVector = Vector3.zero; // Initialized only once\\n\\n            Light light = GetComponent<Light>();\\n            m_lightColor = light != null ? light.color : Color.black;\\n        }\\n\\n        void Update()\\n        {\\n            if (Motion == MotionType.Rotation)\\n            {\\n                m_transform.Rotate(0, SpinSpeed * Time.deltaTime, 0);\\n            }\\n            else if (Motion == MotionType.BackAndForth)\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n                m_transform.rotation = Quaternion.Euler(m_initial_Rotation.x, Mathf.Sin(m_time) * RotationRange + m_initial_Rotation.y, m_initial_Rotation.z);\\n            }\\n            else\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n\\n                float x = 15 * Mathf.Cos(m_time * .95f);\\n                float y = 10;\\n                float z = 0f;\\n\\n                m_translationVector.Set(x, z, y);\\n                m_transform.position = m_initial_Position + m_translationVector;\\n\\n                m_prevPOS = m_transform.position;\\n                frames += 1;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace TMPro.Examples\\n{\\n    public class ObjectSpin : MonoBehaviour\\n    {\\n#pragma warning disable 0414\\n\\n        public float SpinSpeed = 5;\\n        public int RotationRange = 15;\\n        private Transform m_transform;\\n\\n        private float m_time;\\n        private Vector3 m_prevPOS;\\n        private Vector3 m_initial_Rotation;\\n        private Vector3 m_initial_Position;\\n        private Color32 m_lightColor;\\n        private int frames = 0;\\n        private Vector3 m_offset; // Reusable Vector3 allocation for position changes\\n\\n        public enum MotionType { Rotation, BackAndForth, Translation };\\n        public MotionType Motion;\\n\\n        void Awake()\\n        {\\n            m_transform = transform;\\n            m_initial_Rotation = m_transform.rotation.eulerAngles;\\n            m_initial_Position = m_transform.position;\\n\\n            Light light = GetComponent<Light>();\\n            m_lightColor = light != null ? light.color : Color.black;\\n\\n            m_offset = new Vector3(); // Initialize the reusable Vector3\\n        }\\n\\n        void Update()\\n        {\\n            if (Motion == MotionType.Rotation)\\n            {\\n                m_transform.Rotate(0, SpinSpeed * Time.deltaTime, 0);\\n            }\\n            else if (Motion == MotionType.BackAndForth)\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n                m_transform.rotation = Quaternion.Euler(m_initial_Rotation.x, Mathf.Sin(m_time) * RotationRange + m_initial_Rotation.y, m_initial_Rotation.z);\\n            }\\n            else\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n\\n                m_offset.x = 15 * Mathf.Cos(m_time * .95f);\\n                m_offset.y = 0f;\\n                m_offset.z = 10;\\n\\n                m_transform.position = m_initial_Position + m_offset;\\n\\n                m_prevPOS = m_transform.position;\\n                frames += 1;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\n\\nnamespace TMPro.Examples\\n{\\n    public class ObjectSpin : MonoBehaviour\\n    {\\n#pragma warning disable 0414\\n\\n        public float SpinSpeed = 5;\\n        public int RotationRange = 15;\\n        private Transform m_transform;\\n\\n        private float m_time;\\n        private Vector3 m_prevPOS;\\n        private Vector3 m_initial_Rotation;\\n        private Vector3 m_initial_Position;\\n        private Color32 m_lightColor;\\n        private int frames = 0;\\n        private Vector3 m_currentPositionOffset;\\n\\n        public enum MotionType { Rotation, BackAndForth, Translation };\\n        public MotionType Motion;\\n\\n        void Awake()\\n        {\\n            m_transform = transform;\\n            m_initial_Rotation = m_transform.rotation.eulerAngles;\\n            m_initial_Position = m_transform.position;\\n\\n            Light light = GetComponent<Light>();\\n            m_lightColor = light != null ? light.color : Color.black;\\n\\n            m_currentPositionOffset = new Vector3(0, 0, 0); // Pre-allocate the Vector3\\n        }\\n\\n        void Update()\\n        {\\n            if (Motion == MotionType.Rotation)\\n            {\\n                m_transform.Rotate(0, SpinSpeed * Time.deltaTime, 0);\\n            }\\n            else if (Motion == MotionType.BackAndForth)\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n                m_transform.rotation = Quaternion.Euler(m_initial_Rotation.x, Mathf.Sin(m_time) * RotationRange + m_initial_Rotation.y, m_initial_Rotation.z);\\n            }\\n            else\\n            {\\n                m_time += SpinSpeed * Time.deltaTime;\\n\\n                float x = 15 * Mathf.Cos(m_time * .95f);\\n                float y = 10; // *Mathf.Sin(m_time * 1f) * Mathf.Cos(m_time * 1f);\\n                float z = 0f; // *Mathf.Sin(m_time * .9f);\\n\\n                // Reuse the pre-allocated Vector3\\n                m_currentPositionOffset.Set(x, z, y);\\n                m_transform.position = m_initial_Position + m_currentPositionOffset;\\n\\n                m_prevPOS = m_transform.position;\\n                frames += 1;\\n            }\\n        }\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751771284,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":2114,\"prompt_tokens\":561,\"total_tokens\":2675,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"