using UnityEngine;
using System.Collections;

namespace CustomNamespace // Ensure this namespace does not conflict with existing ones
{
    public class ObjectSpin : MonoBehaviour
    {
        public float SpinSpeed = 5;
        public int RotationRange = 15;
        private Transform m_transform;

        private float m_time;
        private Vector3 m_prevPOS;
        private Vector3 m_initial_Rotation;
        private Vector3 m_initial_Position;
        private Color32 m_lightColor;
        private int frames = 0;
        private Vector3 offset; // Reused Vector3 allocation

        public enum MotionType { Rotation, BackAndForth, Translation };
        public MotionType Motion;

        void Awake()
        {
            m_transform = transform;
            m_initial_Rotation = m_transform.rotation.eulerAngles;
            m_initial_Position = m_transform.position;

            Light light = GetComponent<Light>();
            m_lightColor = light != null ? light.color : new Color32(0, 0, 0, 255); // Use Color32 for consistency

            // Initialize offset to reuse in Update
            offset = Vector3.zero; // Ensure proper initialization
        }

        void Update()
        {
            if (Motion == MotionType.Rotation)
            {
                m_transform.Rotate(0, SpinSpeed * Time.deltaTime, 0);
            }
            else if (Motion == MotionType.BackAndForth)
            {
                m_time += SpinSpeed * Time.deltaTime;
                m_transform.rotation = Quaternion.Euler(m_initial_Rotation.x, Mathf.Sin(m_time) * RotationRange + m_initial_Rotation.y, m_initial_Rotation.z);
            }
            else if (Motion == MotionType.Translation)
            {
                m_time += SpinSpeed * Time.deltaTime;

                float x = 15 * Mathf.Cos(m_time * .95f);
                float y = 10;
                float z = 0f;

                // Reuse the offset vector to avoid allocations
                offset.Set(x, z, y);
                m_transform.position = m_initial_Position + offset;

                m_prevPOS = m_transform.position;
                frames++;
            }
        }
    }
}
