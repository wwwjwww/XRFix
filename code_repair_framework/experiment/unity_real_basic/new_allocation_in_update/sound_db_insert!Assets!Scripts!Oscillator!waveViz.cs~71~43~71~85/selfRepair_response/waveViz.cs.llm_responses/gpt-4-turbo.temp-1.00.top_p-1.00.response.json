"{\"id\":\"chatcmpl-Bq9c3kled5fiEALji443Vfo4nUZ1b\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Awake() {\\n    bufferDrawList = new List<float>();\\n    tex = new Texture2D(wavewidth, waveheight, TextureFormat.RGBA32, false);\\n    wavepixels = new Color32[wavewidth * waveheight];\\n\\n    for (int i = 0; i < wavewidth; i++) {\\n        for (int i2 = 0; i2 < waveheight; i2++) {\\n            wavepixels[i2 * wavewidth + i] = waveBG;\\n        }\\n    }\\n\\n    m_WavePixelsHandle = GCHandle.Alloc(wavepixels, GCHandleType.Pinned);\\n    waverend.material.mainTextureOffset = Vector2.zero;\\n}\\n\\nvoid FixedUpdate() {\\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    waverend.material.mainTextureOffset = new Vector2((float)curWaveW / wavewidth, 0);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing System.Runtime.InteropServices;\\n\\npublic class waveViz : MonoBehaviour {\\n  Texture2D tex;\\n  public Renderer waverend;\\n  int wavewidth = 512;\\n  int waveheight = 64;\\n  public int period = 512;\\n  Color32[] wavepixels;\\n  int curWaveW = 0;\\n  int lastWaveH = 0;\\n  public Color32 waveBG = Color.black;\\n  public Color32 waveLine = Color.white;\\n\\n  [DllImport(\\\"SoundStageNative\\\")]\\n  public static extern void ProcessWaveTexture(float[] buffer, int length, System.IntPtr pixels, byte Ra, byte Ga, byte Ba, byte Rb, byte Gb, byte Bb,\\n    int period, int waveheight, int wavewidth, ref int lastWaveH, ref int curWaveW);\\n\\n  List<float> bufferDrawList;\\n\\n  GCHandle m_WavePixelsHandle;\\n  Vector2 textureOffset = Vector2.zero;\\n\\n  void Awake() {\\n    bufferDrawList = new List<float>();\\n    tex = new Texture2D(wavewidth, waveheight, TextureFormat.RGBA32, false);\\n    wavepixels = new Color32[wavewidth * waveheight];\\n\\n    for (int i = 0; i < wavewidth; i++) {\\n      for (int i2 = 0; i2 < waveheight; i2++) {\\n        wavepixels[i2 * wavewidth + i] = waveBG;\\n      }\\n    }\\n\\n    m_WavePixelsHandle = GCHandle.Alloc(wavepixels, GCHandleType.Pinned);\\n  }\\n\\n  void OnDestroy() {\\n    m_WavePixelsHandle.Free();\\n  }\\n\\n  void Start() {\\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    waverend.material.mainTexture = tex;\\n  }\\n\\n  public void UpdateViz(float[] buffer) {\\n    ProcessWaveTexture(buffer, buffer.Length, m_WavePixelsHandle.AddrOfPinnedObject(), waveLine.r, waveLine.g, waveLine.b, waveBG.r, waveBG.g, waveBG.b, period, waveheight, wavewidth, ref lastWaveH, ref curWaveW);\\n    \\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    textureOffset.x = (float)curWaveW / wavewidth;\\n    waverend.material.mainTextureOffset = textureOffset;\\n  }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing System.Runtime.InteropServices;\\n\\npublic class waveViz : MonoBehaviour {\\n  Texture2D tex;\\n  public Renderer waverend;\\n  int wavewidth = 512;\\n  int waveheight = 64;\\n  public int period = 512;\\n  Color32[] wavepixels;\\n  int curWaveW = 0;\\n  int lastWaveH = 0;\\n  public Color32 waveBG = Color.black;\\n  public Color32 waveLine = Color.white;\\n\\n  [DllImport(\\\"SoundStageNative\\\")]\\n  public static extern void ProcessWaveTexture(float[] buffer, int length, System.IntPtr pixels, byte Ra, byte Ga, byte Ba, byte Rb, byte Gb, byte Bb,\\n    int period, int waveheight, int wavewidth, ref int lastWaveH, ref int curWaveW);\\n\\n  List<float> bufferDrawList;\\n\\n  GCHandle m_WavePixelsHandle;\\n  Vector2 mainTextureOffset;\\n\\n  void Awake() {\\n    bufferDrawList = new List<float>();\\n    tex = new Texture2D(wavewidth, waveheight, TextureFormat.RGBA32, false);\\n    wavepixels = new Color32[wavewidth * waveheight];\\n\\n    for (int i = 0; i < wavewidth; i++) {\\n      for (int i2 = 0; i2 < waveheight; i2++) {\\n        wavepixels[i2 * wavewidth + i] = waveBG;\\n      }\\n    }\\n\\n    m_WavePixelsHandle = GCHandle.Alloc(wavepixels, GCHandleType.Pinned);\\n    mainTextureOffset = new Vector2(0, 0);\\n  }\\n\\n  void OnDestroy() {\\n    m_WavePixelsHandle.Free();\\n  }\\n\\n  void Start() {\\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    waverend.material.mainTexture = tex;\\n  }\\n\\n  public void UpdateViz(float[] buffer) {\\n    ProcessWaveTexture(buffer, buffer.Length, m_WavePixelsHandle.AddrOfPinnedObject(), waveLine.r, waveLine.g, waveLine.b, waveBG.r, waveBG.g, waveBG.b, period, waveheight, wavewidth, ref lastWaveH, ref curWaveW);\\n  }\\n\\n  void Update() {\\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    mainTextureOffset.x = (float)curWaveW / wavewidth;\\n    waverend.material.mainTextureOffset = mainTextureOffset;\\n  }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\nusing System.Collections;\\nusing System.Collections.Generic;\\nusing System.Runtime.InteropServices;\\n\\npublic class waveViz : MonoBehaviour {\\n  Texture2D tex;\\n  public Renderer waverend;\\n  int wavewidth = 512;\\n  int waveheight = 64;\\n  public int period = 512;\\n  Color32[] wavepixels;\\n  int curWaveW = 0;\\n  int lastWaveH = 0;\\n  public Color32 waveBG = Color.black;\\n  public Color32 waveLine = Color.white;\\n  private Vector2 waveOffset = Vector2.zero;\\n\\n  [DllImport(\\\"SoundStageNative\\\")]\\n  public static extern void ProcessWaveTexture(float[] buffer, int length, System.IntPtr pixels, byte Ra, byte Ga, byte Ba, byte Rb, byte Gb, byte Bb,\\n    int period, int waveheight, int wavewidth, ref int lastWaveH, ref int curWaveW);\\n\\n  List<float> bufferDrawList;\\n\\n  GCHandle m_WavePixelsHandle;\\n\\n  void Awake() {\\n    bufferDrawList = new List<float>();\\n    tex = new Texture2D(wavewidth, waveheight, TextureFormat.RGBA32, false);\\n    wavepixels = new Color32[wavewidth * waveheight];\\n\\n    for (int i = 0; i < wavewidth; i++) {\\n      for (int i2 = 0; i2 < waveheight; i2++) {\\n        wavepixels[i2 * wavewidth + i] = waveBG;\\n      }\\n    }\\n\\n    m_WavePixelsHandle = GCHandle.Alloc(wavepixels, GCHandleType.Pinned);\\n  }\\n\\n  void OnDestroy() {\\n    m_WavePixelsHandle.Free();\\n  }\\n\\n  void Start() {\\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    waverend.material.mainTexture = tex;\\n  }\\n\\n  public void UpdateViz(float[] buffer) {\\n    ProcessWaveTexture(buffer, buffer.Length, m_WavePixelsHandle.AddrOfPinnedObject(), waveLine.r, waveLine.g, waveLine.b, waveBG.r, waveBG.g, waveBG.b, period, waveheight, wavewidth, ref lastWaveH, ref curWaveW);\\n  }\\n\\n  void Update() {\\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    waveOffset.x = (float)curWaveW / wavewidth;\\n    waverend.material.mainTextureOffset = waveOffset;\\n  }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nvoid Start() {\\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    waverend.material.mainTexture = tex;\\n    waverend.material.mainTextureOffset = Vector2.zero; // Initialize texture offset\\n}\\n\\nvoid Update() {\\n    tex.SetPixels32(wavepixels);\\n    tex.Apply(false);\\n    waverend.material.mainTextureOffset = new Vector2((float)curWaveW / wavewidth, 0);\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1751769707,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_07871e2ad8\",\"usage\":{\"completion_tokens\":1834,\"prompt_tokens\":629,\"total_tokens\":2463,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"