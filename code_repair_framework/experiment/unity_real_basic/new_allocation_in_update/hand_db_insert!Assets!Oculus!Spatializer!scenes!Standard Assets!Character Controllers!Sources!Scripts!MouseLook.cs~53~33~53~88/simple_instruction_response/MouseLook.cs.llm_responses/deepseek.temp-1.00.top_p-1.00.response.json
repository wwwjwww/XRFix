{
    "code_repairing_0": "You are seeing some repetitive empty lines and the code you posted is incomplete. It seems you might have cut off the code somewhere. However, if you have questions about the code or want to continue building it, please provide the missing part or ask a specific question. I'm here to assist you.",
    "code_repairing_1": "You've pasted the code for a Unity script to control camera rotation, which is almost correct. It looks like you might have forgotten to add the final part of the code for the Y-axis rotation. Here's the remaining part of the code:\n\n```csharp\n            // FIXED CODE:\n\n            // apply rotation to the transform\n            transform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.y, 0);\n\t\t}\n\t}\n}\n```\nThis code will ensure that the Y-axis rotation is updated every frame, but it doesn't limit the X-axis rotation like the clamping code in the original code. Here's a version that includes that as well:\n\n```csharp\n        float rotationX = transform.localEulerAngles.y + Input.GetAxis(\"Mouse X\") * sensitivityX;\n\n        // clamp rotationX to avoid going beyond 360 degree\n        if (rotationX > 180) rotationX -= 360;\n        else if (rotationX < -180) rotationX += 360;\n        rotationX = Mathf.Clamp(rotationX, minimumX, maximumX);\n\n        rotationY += Input.GetAxis(\"Mouse Y\") * sensitivityY;\n        rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);\n\n        transform.localEulerAngles = new Vector3(-rotationY, rotationX, 0);\n```\nThis adjusted code will ensure that the X-axis rotation is clamped to between -180 and 180 degrees.",
    "code_repairing_2": "It seems like your code was cut off before the end. However, based on the information provided, it appears you might be trying to complete the MouseLook script. Here is the continuation of your code.\n\n```csharp\n\t\t\ttransform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.y, 0);\n\t\t}\n\t}\n\n\tvoid Start ()\n\t{\n\t\tif (GetComponent<Rigidbody>())\n\t\t{\n\t\t\tGetComponent<Rigidbody>().freezeRotation = true;\n\t\t}\n\t}\n}\n```\n\nIn this code, the MouseLook script is attached to a GameObject to control its rotation. The axes variable determines how much control the camera has, with options for both X and Y, only X, or only Y. The sensitivity variables control the speed at which the camera reacts to mouse movement. The minimum and maximum variables control the range of angles the camera can rotate beyond the raw input from the mouse. \n\nThe Update function checks which axes are enabled, and applies the necessary rotations accordingly. The Start function is used to prevent the Rigidbody component from influencing the camera's rotation (since the camera doesn't move with the physics simulation). \n\nThe commented line in the Update function is left as is based on context provided in your code. It seems to be part of the code for only the X-axis rotation. The commented line is a backup for when the rotation is locked to the Y-axis only.",
    "code_repairing_3": "\u60a8\u7684\u4ee3\u7801\u4e2d\u5b58\u5728\u7f16\u7a0b\u9519\u8bef\u3002\u5f53\u9f20\u6807\u53ea\u5728Y\u8f74\u4e0a\u79fb\u52a8\u65f6\uff0c\u60a8\u5e94\u8be5\u7ed5\u7740\u5f53\u524d\u6e38\u620f\u5bf9\u8c61\u7684Y\u8f74\u65cb\u8f6c\uff0c\u800c\u4e0d\u662f\u5f53\u524d\u6e38\u620f\u5bf9\u8c61\u672c\u8eab\u3002\u4ee5\u4e0b\u662f\u4fee\u590d\u540e\u7684\u4ee3\u7801\uff1a\n\n```csharp\nvoid Update ()\n{\n    if (axes == RotationAxes.MouseXAndY)\n    {\n        float rotationX = transform.localEulerAngles.y + Input.GetAxis(\"Mouse X\") * sensitivityX;\n\n        rotationY += Input.GetAxis(\"Mouse Y\") * sensitivityY;\n        rotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\n\n        transform.localEulerAngles = new Vector3(-rotationY, rotationX, 0);\n    }\n    else if (axes == RotationAxes.MouseX)\n    {\n        transform.Rotate(0, Input.GetAxis(\"Mouse X\") * sensitivityX, 0);\n    }\n    else\n    {\n        rotationY += Input.GetAxis(\"Mouse Y\") * sensitivityY;\n        rotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\n\n        transform.Rotate(-rotationY, 0, 0);\n    }\n}\n```\n\n\u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\u5728X\u548cY\u8f74\u4e0a\u81ea\u7531\u65cb\u8f6c\u4e86\u3002\u5982\u679c\u53ea\u5728X\u8f74\u4e0a\u65cb\u8f6c\uff0c\u90a3\u4e48\u5728Y\u8f74\u4e0a\u79fb\u52a8\u9f20\u6807\u5c06\u7ed5\u7740\u5f53\u524d\u6e38\u620f\u5bf9\u8c61\u7684Y\u8f74\u65cb\u8f6c\u3002\u5982\u679c\u53ea\u5728Y\u8f74\u4e0a\u65cb\u8f6c\uff0c\u90a3\u4e48\u5728X\u8f74\u4e0a\u79fb\u52a8\u9f20\u6807\u5c06\u7ed5\u7740\u5f53\u524d\u6e38\u620f\u5bf9\u8c61\u7684X\u8f74\u65cb\u8f6c\u3002\u5982\u679c\u540c\u65f6\u5728\u4e24\u8f74\u4e0a\u65cb\u8f6c\uff0c\u90a3\u4e48\u5728X\u548cY\u8f74\u4e0a\u79fb\u52a8\u9f20\u6807\u5c06\u5206\u522b\u6cbf\u7740\u5f53\u524d\u6e38\u620f\u5bf9\u8c61\u7684X\u548cY\u8f74\u65cb\u8f6c\u3002",
    "code_repairing_4": "In its current state, your code appears to be incomplete. However, I can help you complete it with a line that rotates the object along the X-axis. Here is the full script:\n\n```csharp\nusing UnityEngine;\nusing System.Collections;\n\n[AddComponentMenu(\"Camera-Control/Mouse Look\")]\npublic class MouseLook : MonoBehaviour {\n\n    public enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }\n    public RotationAxes axes = RotationAxes.MouseXAndY;\n    public float sensitivityX = 15F;\n    public float sensitivityY = 15F;\n\n    public float minimumX = -360F;\n    public float maximumX = 360F;\n\n    public float minimumY = -60F;\n    public float maximumY = 60F;\n\n    float rotationY = 0F;\n\n    void Update () {\n        if (axes == RotationAxes.MouseXAndY) {\n            float rotationX = transform.localEulerAngles.y + Input.GetAxis(\"Mouse X\") * sensitivityX;\n\n            rotationY += Input.GetAxis(\"Mouse Y\") * sensitivityY;\n            rotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\n\n            transform.localEulerAngles = new Vector3(-rotationY, rotationX, 0);\n        }\n        else if (axes == RotationAxes.MouseX) {\n            transform.Rotate(0, Input.GetAxis(\"Mouse X\") * sensitivityX, 0);\n        }\n        else {\n            rotationY += Input.GetAxis(\"Mouse Y\") * sensitivityY;\n            rotationY = Mathf.Clamp (rotationY, minimumY, maximumY);\n\n            transform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.y, 0);\n        }\n    }\n}\n```\n\nIn this script, `MouseXAndY` will rotate the camera around both axes. `MouseX` will only rotate around the Y axis, and `MouseY` will only rotate around the X axis. You can adjust `sensitivityX` and `sensitivityY` to control the speed of rotation. You can also set `minimumX`, `maximumX`, `minimumY`, and `maximumY` to restrict the allowed rotation along the X and Y axes."
}