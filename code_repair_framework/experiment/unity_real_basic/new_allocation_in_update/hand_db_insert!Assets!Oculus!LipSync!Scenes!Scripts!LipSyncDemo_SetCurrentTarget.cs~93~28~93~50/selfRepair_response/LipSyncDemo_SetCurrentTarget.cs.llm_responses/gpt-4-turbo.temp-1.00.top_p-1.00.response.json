"{\"id\":\"chatcmpl-BrKN7D13HU17ziU5KSApybzgJM1Nl\",\"choices\":[{\"finish_reason\":\"stop\",\"index\":0,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n#if UNITY_2019_1_OR_NEWER\\nusing UnityEngine.XR;\\n#endif\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\npublic class LipSyncDemo_SetCurrentTarget : MonoBehaviour\\n{\\n    public EnableSwitch[] SwitchTargets;\\n\\n    private int targetSet = 0;\\n    private int maxTarget = 6;\\n    private bool XRButtonBeingPressed = false;\\n\\n#if UNITY_2019_1_OR_NEWER\\n    private List<InputDevice> inputDevices = new List<InputDevice>();\\n#endif\\n\\n    void Start ()\\n    {\\n\\n        OVRTouchpad.AddListener(LocalTouchEventCallback);\\n\\n        targetSet = 0;\\n        SwitchTargets[0].SetActive<OVRLipSyncContextMorphTarget>(0);\\n        SwitchTargets[1].SetActive<OVRLipSyncContextMorphTarget>(0);\\n    }\\n\\n    void Update ()\\n    {\\n        if (Input.GetKeyDown(KeyCode.Alpha1))\\n        {\\n            targetSet = 0;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha2))\\n        {\\n            targetSet = 1;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha3))\\n        {\\n            targetSet = 2;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha4))\\n        {\\n            targetSet = 3;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha5))\\n        {\\n            targetSet = 4;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha6))\\n        {\\n            targetSet = 5;\\n            SetCurrentTarget();\\n        }\\n\\n        if (Input.GetKeyDown(KeyCode.Escape))\\n        {\\n            Application.Quit();\\n        }\\n\\n#if UNITY_2019_1_OR_NEWER\\n#if UNITY_2019_3_OR_NEWER\\n        InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.HeldInHand, inputDevices);\\n#else\\n        InputDevices.GetDevicesWithRole(InputDeviceRole.RightHanded, inputDevices);\\n#endif\\n        var primaryButtonPressed = false;\\n        var secondaryButtonPressed = false;\\n        foreach (var device in inputDevices)\\n        {\\n            bool boolValue;\\n            if (device.TryGetFeatureValue(CommonUsages.primaryButton, out boolValue) && boolValue)\\n            {\\n                primaryButtonPressed = true;\\n            }\\n            if (device.TryGetFeatureValue(CommonUsages.secondaryButton, out boolValue) && boolValue)\\n            {\\n                secondaryButtonPressed = true;\\n            }\\n        }\\n        if (primaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet++;\\n            if (targetSet >= maxTarget)\\n            {\\n                targetSet = 0;\\n            }\\n            SetCurrentTarget();\\n        }\\n        if (secondaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet--;\\n            if (targetSet < 0)\\n            {\\n                targetSet = maxTarget - 1;\\n            }\\n            SetCurrentTarget();\\n        }\\n        XRButtonBeingPressed = primaryButtonPressed || secondaryButtonPressed;\\n#endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":1,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n#if UNITY_2019_1_OR_NEWER\\nusing UnityEngine.XR;\\n#endif\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\npublic class LipSyncDemo_SetCurrentTarget : MonoBehaviour\\n{\\n    public EnableSwitch[] SwitchTargets;\\n\\n    private int targetSet = 0;\\n    private int maxTarget = 6;\\n    private bool XRButtonBeingPressed = false;\\n\\n    // Move the allocation outside of Update method\\n    private List<InputDevice> inputDevices = new List<InputDevice>();\\n\\n    void Start()\\n    {\\n        OVRTouchpad.AddListener(LocalTouchEventCallback);\\n\\n        targetSet = 0;\\n        SwitchTargets[0].SetActive<OVRLipSyncContextMorphTarget>(0);\\n        SwitchTargets[1].SetActive<OVRLipSyncContextMorphTarget>(0);\\n    }\\n\\n    void Update()\\n    {\\n        if (Input.GetKeyDown(KeyCode.Alpha1))\\n        {\\n            targetSet = 0;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha2))\\n        {\\n            targetSet = 1;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha3))\\n        {\\n            targetSet = 2;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha4))\\n        {\\n            targetSet = 3;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha5))\\n        {\\n            targetSet = 4;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha6))\\n        {\\n            targetSet = 5;\\n            SetCurrentTarget();\\n        }\\n\\n        if (Input.GetKeyDown(KeyCode.Escape))\\n        {\\n            Application.Quit();\\n        }\\n\\n#if UNITY_2019_1_OR_NEWER\\n#if UNITY_2019_3_OR_NEWER\\n        InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.HeldInHand, inputDevices);\\n#else\\n        InputDevices.GetDevicesWithRole(InputDeviceRole.RightHanded, inputDevices);\\n#endif\\n        var primaryButtonPressed = false;\\n        var secondaryButtonPressed = false;\\n\\n        foreach (var device in inputDevices)\\n        {\\n            bool boolValue;\\n            if (device.TryGetFeatureValue(CommonUsages.primaryButton, out boolValue) && boolValue)\\n            {\\n                primaryButtonPressed = true;\\n            }\\n            if (device.TryGetFeatureValue(CommonUsages.secondaryButton, out boolValue) && boolValue)\\n            {\\n                secondaryButtonPressed = true;\\n            }\\n        }\\n        if (primaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet++;\\n            if (targetSet >= maxTarget)\\n            {\\n                targetSet = 0;\\n            }\\n            SetCurrentTarget();\\n        }\\n        if (secondaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet--;\\n            if (targetSet < 0)\\n            {\\n                targetSet = maxTarget - 1;\\n            }\\n            SetCurrentTarget();\\n        }\\n        XRButtonBeingPressed = primaryButtonPressed || secondaryButtonPressed;\\n#endif\\n    }\\n\\n    private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)\\n    {\\n        // Add the implementation if needed\\n    }\\n\\n    private void SetCurrentTarget()\\n    {\\n        // Add the implementation if needed\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":2,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n#if UNITY_2019_1_OR_NEWER\\nusing UnityEngine.XR;\\n#endif\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\npublic class LipSyncDemo_SetCurrentTarget : MonoBehaviour\\n{\\n    public EnableSwitch[] SwitchTargets;\\n\\n    private int targetSet = 0;\\n    private int maxTarget = 6;\\n    private bool XRButtonBeingPressed = false;\\n\\n#if UNITY_2019_1_OR_NEWER\\n    private List<InputDevice> inputDevices = new List<InputDevice>();\\n#endif\\n\\n    void Start ()\\n    {\\n        OVRTouchpad.AddListener(LocalTouchEventCallback);\\n\\n        targetSet = 0;\\n        SwitchTargets[0].SetActive<OVRLipSyncContextMorphTarget>(0);\\n        SwitchTargets[1].SetActive<OVRLipSyncContextMorphTarget>(0);\\n    }\\n\\n    void Update ()\\n    {\\n        if (Input.GetKeyDown(KeyCode.Alpha1))\\n        {\\n            targetSet = 0;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha2))\\n        {\\n            targetSet = 1;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha3))\\n        {\\n            targetSet = 2;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha4))\\n        {\\n            targetSet = 3;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha5))\\n        {\\n            targetSet = 4;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha6))\\n        {\\n            targetSet = 5;\\n            SetCurrentTarget();\\n        }\\n\\n        if (Input.GetKeyDown (KeyCode.Escape))\\n        {\\n            Application.Quit();\\n        }\\n\\n#if UNITY_2019_1_OR_NEWER\\n#if UNITY_2019_3_OR_NEWER\\n        InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.HeldInHand, inputDevices);\\n#else\\n        InputDevices.GetDevicesWithRole(InputDeviceRole.RightHanded, inputDevices);\\n#endif\\n        var primaryButtonPressed = false;\\n        var secondaryButtonPressed = false;\\n        foreach (var device in inputDevices)\\n        {\\n            bool boolValue;\\n            if (device.TryGetFeatureValue(CommonUsages.primaryButton, out boolValue) && boolValue)\\n            {\\n                primaryButtonPressed = true;\\n            }\\n            if (device.TryGetFeatureValue(CommonUsages.secondaryButton, out boolValue) && boolValue)\\n            {\\n                secondaryButtonPressed = true;\\n            }\\n        }\\n        if (primaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet++;\\n            if (targetSet >= maxTarget)\\n            {\\n                targetSet = 0;\\n            }\\n            SetCurrentTarget();\\n        }\\n        if (secondaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet--;\\n            if (targetSet < 0)\\n            {\\n                targetSet = maxTarget - 1;\\n            }\\n            SetCurrentTarget();\\n        }\\n        XRButtonBeingPressed = primaryButtonPressed || secondaryButtonPressed;\\n#endif\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":3,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\nusing UnityEngine;\\n#if UNITY_2019_1_OR_NEWER\\nusing UnityEngine.XR;\\n#endif\\nusing System.Collections;\\nusing System.Collections.Generic;\\n\\npublic class LipSyncDemo_SetCurrentTarget : MonoBehaviour\\n{\\n    public EnableSwitch[] SwitchTargets;\\n\\n    private int targetSet = 0;\\n    private int maxTarget = 6;\\n    private bool XRButtonBeingPressed = false;\\n    private List<InputDevice> inputDevices; // Moved allocation to class level\\n\\n    void Start ()\\n    {\\n        OVRTouchpad.AddListener(LocalTouchEventCallback);\\n        inputDevices = new List<InputDevice>(); // Allocate once at Start\\n\\n        targetSet = 0;\\n        SwitchTargets[0].SetActive<OVRLipSyncContextMorphTarget>(0);\\n        SwitchTargets[1].SetActive<OVRLipSyncContextMorphTarget>(0);\\n    }\\n\\n    void Update ()\\n    {\\n        if (Input.GetKeyDown(KeyCode.Alpha1))\\n        {\\n            targetSet = 0;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha2))\\n        {\\n            targetSet = 1;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha3))\\n        {\\n            targetSet = 2;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha4))\\n        {\\n            targetSet = 3;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha5))\\n        {\\n            targetSet = 4;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha6))\\n        {\\n            targetSet = 5;\\n            SetCurrentTarget();\\n        }\\n\\n        if (Input.GetKeyDown (KeyCode.Escape))\\n        {\\n           Application.Quit();\\n        }\\n\\n#if UNITY_2019_1_OR_NEWER\\n        inputDevices.Clear(); // Clear previous states\\n#if UNITY_2019_3_OR_NEWER\\n        InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.HeldInHand, inputDevices);\\n#else\\n        InputDevices.GetDevicesWithRole(InputDeviceRole.RightHanded, inputDevices);\\n#endif\\n        var primaryButtonPressed = false;\\n        var secondaryButtonPressed = false;\\n        foreach (var device in inputDevices)\\n        {\\n            bool boolValue;\\n            if (device.TryGetFeatureValue(CommonUsages.primaryButton, out boolValue) && boolValue)\\n            {\\n                primaryButtonPressed = true;\\n            }\\n            if (device.TryGetFeatureValue(CommonUsages.secondaryButton, out boolValue) && boolValue)\\n            {\\n                secondaryButtonPressed = true;\\n            }\\n        }\\n        if (primaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet++;\\n            if (targetSet >= maxTarget)\\n            {\\n              targetSet = 0;\\n            }\\n            SetCurrentTarget();\\n        }\\n        if (secondaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet--;\\n            if (targetSet < 0)\\n            {\\n              targetSet = maxTarget - 1;\\n            }\\n            SetCurrentTarget();\\n        }\\n        XRButtonBeingPressed = primaryButtonPressed || secondaryButtonPressed;\\n#endif\\n    }\\n\\n    private void SetCurrentTarget()\\n    {\\n        // Logic for setting the current target\\n    }\\n\\n    private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)\\n    {\\n        // Logic for handling touch events\\n    }\\n}\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}},{\"finish_reason\":\"stop\",\"index\":4,\"logprobs\":null,\"message\":{\"content\":\"```csharp\\n    private List<InputDevice> inputDevices = new List<InputDevice>();\\n\\n    void Update()\\n    {\\n        if (Input.GetKeyDown(KeyCode.Alpha1))\\n        {\\n            targetSet = 0;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha2))\\n        {\\n            targetSet = 1;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha3))\\n        {\\n            targetSet = 2;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha4))\\n        {\\n            targetSet = 3;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha5))\\n        {\\n            targetSet = 4;\\n            SetCurrentTarget();\\n        }\\n        else if (Input.GetKeyDown(KeyCode.Alpha6))\\n        {\\n            targetSet = 5;\\n            SetCurrentTarget();\\n        }\\n\\n        if (Input.GetKeyDown(KeyCode.Escape))\\n        {\\n           Application.Quit();\\n        }\\n        \\n#if UNITY_2019_1_OR_NEWER\\n        inputDevices.Clear();\\n#if UNITY_2019_3_OR_NEWER\\n        InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.HeldInHand, inputDevices);\\n#else\\n        InputDevices.GetDevicesWithRole(InputDeviceRole.RightHanded, inputDevices);\\n#endif\\n        var primaryButtonPressed = false;\\n        var secondaryButtonPressed = false;\\n        foreach (var device in inputDevices)\\n        {\\n            bool boolValue;\\n            if (device.TryGetFeatureValue(CommonUsages.primaryButton, out boolValue) && boolValue)\\n            {\\n                primaryButtonPressed = true;\\n            }\\n            if (device.TryGetFeatureValue(CommonUsages.secondaryButton, out boolValue) && boolValue)\\n            {\\n                secondaryButtonPressed = true;\\n            }\\n        }\\n        if (primaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet++;\\n            if (targetSet >= maxTarget)\\n            {\\n              targetSet = 0;\\n            }\\n            SetCurrentTarget();\\n        }\\n        if (secondaryButtonPressed && !XRButtonBeingPressed)\\n        {\\n            targetSet--;\\n            if (targetSet < 0)\\n            {\\n              targetSet = maxTarget - 1;\\n            }\\n            SetCurrentTarget();\\n        }\\n        XRButtonBeingPressed = primaryButtonPressed || secondaryButtonPressed;\\n#endif\\n    }\\n```\",\"refusal\":null,\"role\":\"assistant\",\"audio\":null,\"function_call\":null,\"tool_calls\":null,\"annotations\":[]}}],\"created\":1752049393,\"model\":\"gpt-4o-2024-08-06\",\"object\":\"chat.completion\",\"service_tier\":\"default\",\"system_fingerprint\":\"fp_a288987b44\",\"usage\":{\"completion_tokens\":3248,\"prompt_tokens\":860,\"total_tokens\":4108,\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":0,\"rejected_prediction_tokens\":0},\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0}}}"