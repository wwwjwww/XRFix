{
    "code_repairing_0": "using UnityEngine;\n\npublic class SwimControl : MonoBehaviour\n{\n\tpublic int swimForceMultiplier = 100;\n\tprivate Rigidbody rb;\n\tpublic Crest.SimpleFloatingObject sfo;\n\tpublic GameObject head;\n\tprivate float handUpTime = 0;\n\tprivate float handDeltaThreshold =.2f;\n\tpublic bool handUp = false;\n\tpublic GameObject boat;\n\tprivate Rigidbody boatRb;\n\tpublic int boatForceMultiplier = 5;\n\tpublic int boatDistanceThreshold = 5;\n\tpublic Animator lifeguardAnim;\n\n\tpublic Transform leftHand;\n\tpublic Transform rightHand;\n\tpublic TextMeshPro speedReadout;\n\tpublic TextMeshPro speedReadout2;\n\n\tprivate Vector3 lastLeftPosition;\n\tprivate Vector3 lastRightPosition;\n\n\tpublic AudioSource boatMotor;\n\n\tvoid Start()\n\t{\n\t\trb = GetComponent<Rigidbody>();\n\t\tboatRb = boat.GetComponent<Rigidbody>();\n\t\tlastLeftPosition = leftHand.localPosition;\n\t\tlastRightPosition = rightHand.localPosition;\n\t}\n\n\tvoid FixedUpdate()\n\t{\n\t\tfloat horizontal = Input.GetAxis(\"Horizontal\");\n\t\tfloat vertical = Input.GetAxis(\"Vertical\");\n\t\tVector3 force = new Vector3(horizontal, 0f, vertical);\n\t\trb.AddForce(force * Time.deltaTime * swimForceMultiplier);\n\n\t\t// if we have a Simple Floating Object attached to us, move towards it\n\t\tif (sfo!= null)\n\t\t{\n\t\t\tVector3 targetPosition = sfo.transform.position;\n\t\t\trb.AddForce((targetPosition - rb.transform.position).normalized * 5f, ForceMode.VelocityChange);\n\t\t}\n\n\t\t// detect if the player is holding their hands up\n\t\thandUp = (Vector3.Distance(leftHand.localPosition, lastLeftPosition) > handDeltaThreshold) || (Vector3.Distance(rightHand.localPosition, lastRightPosition) > handDeltaThreshold);\n\t\tif (handUp)\n\t\t{\n\t\t\thandUpTime = Time.time;\n\t\t}\n\n\t\t// move the boat towards the player\n\t\tif (handUp && boatRb!= null)\n\t\t{\n\t\t\tVector3 playerPos = rb.transform.position;\n\t\t\tVector3 boatPos = boatRb.transform.position;\n\t\t\tfloat dist = Vector3.Distance(playerPos, boatPos);\n\t\t\tif (dist > boatDistanceThreshold)\n\t\t\t{\n\t\t\t\tVector3 heading = (playerPos - boatPos).normalized;\n\t\t\t\tVector3 forceVector = heading * boatForceMultiplier;\n\t\t\t\tboatRb.AddForce(forceVector, ForceMode.VelocityChange);\n\t\t\t}\n\t\t}\n\n\t\t// play the boat motor based on the distance between the boat and player\n\t\tif (boatRb!= null)\n\t\t{\n\t\t\tVector3 playerPos = rb.transform.position;\n\t\t\tVector3 boatPos = boatRb.transform.position;\n\t\t\tfloat dist = Vector3.Distance(playerPos, boatPos);\n\t\t\tif (dist > boatDistanceThreshold)\n\t\t\t{\n\t\t\t\tboatMotor.volume = Mathf.InverseLerp(0f, boatDistanceThreshold, dist) *.75f;\n\t\t\t\tboatMotor.Play();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboatMotor.Stop();\n\t\t\t}\n\t\t}\n\n\t\t// update the readouts with the current speed\n\t\tVector3 velocity = rb.velocity;\n\t\tfloat speed = velocity.magnitude;\n\t\tspeedReadout.text = speed.ToString(\"F1\");\n\t\tspeedReadout2.text = speed.ToString(\"F1\");\n\n\t\t// animate the lifeguard based on the player's actions\n\t\tlifeguardAnim.SetBool(\"Swimming\", rb.velocity.magnitude >.1f);\n\t\tlifeguardAnim.SetBool(\"HandUp\", handUp);\n\t}\n}",
    "code_repairing_1": "class Node : IEnumerable<Node>\n{\n    public T Value { get; set; }\n\n    public List<Node> Children { get; } = new List<Node>();\n\n    public Node(T value)\n    {\n        Value = value;\n    }\n\n    public IEnumerator<Node> GetEnumerator()\n    {\n        yield return this;\n\n        foreach (var child in Children)\n        {\n            foreach (var node in child)\n            {\n                yield return node;\n            }\n        }\n    }\n\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n\n    public void AddChild(Node child)\n    {\n        Children.Add(",
    "code_repairing_2": "```javascript\n// \u0432\u0432\u043e\u0434 \u0447\u0438\u0441\u043b\u0430\nlet inputNumber = prompt(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e\")\n\n// \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0447\u0438\u0441\u043b\u043e\nlet number = Number(inputNumber)\n\n// \u0432\u044b\u0432\u043e\u0434 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0447\u0438\u0441\u043b\u0430",
    "code_repairing_3": "```csharp\nusing UnityEngine;\n\npublic class SwimControl : MonoBehaviour\n{\n    public int swimForceMultiplier = 100;\n    private Rigidbody rb;\n    public Crest.SimpleFloatingObject sfo;\n    public GameObject head;\n    private float handUpTime = 0;\n    private float handDeltaThreshold =.2f;\n    public bool handUp = false;\n    public GameObject boat;\n    private Rigidbody boatRb;\n    public int boatForceMultiplier = 5;\n    public int boatDistanceThreshold = 5;\n    public Animator lifeguardAnim;\n\n    public Transform leftHand;\n    public Transform rightHand;\n    public TextMeshPro speedReadout;\n    public TextMeshPro speedReadout2;\n\n    private Vector3 lastLeftPosition;\n    private Vector3 lastRightPosition;\n\n    public AudioSource boatMotor;\n\n    private float timeLimit = 5f;\n    private float timer  = 0f;\n    private bool instantiate_gobj = false;\n\n    protected Rigidbody rb2;\n    private float startTime;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody>();\n        boatRb = boat.GetComponent<Rigidbody>();\n        lastLeftPosition = leftHand.localPosition;\n        lastRightPosition = rightHand.localPosition;\n    }\n\n    void Update()\n    {\n        if (timer >= timeLimit)\n        {\n            timer -= timeLimit;\n            if (!instantiate_gobj)\n            {\n                Instantiate(Resources.Load<GameObject>(\"Prefabs/gobj9\"));\n                instantiate_gobj = true;\n            }\n            if (a9 == null)\n            {\n                a9 = GameObject.Find(\"gobj9 (1)\");\n            }\n            gobj9 = a9.transform.Find(\"Cube\").gameObject;\n            rb2 = gobj9.GetComponent<Rigidbody>();\n            startTime = Time.time;\n        }\n\n        if (timer > 0)\n        {\n            timer -= Time.deltaTime;\n            if (timer <= 0)\n            {\n                lifeguardAnim.SetTrigger(\"Die\");\n                Instantiate(Resources.Load<GameObject>(\"Prefabs/a9\"), transform.position, transform.rotation);\n                Destroy(gameObject);\n            }\n        }\n    }\n\n    void FixedUpdate()\n    {\n        Vector3 acceleration = Vector3.zero;\n        acceleration += CalculateHandDrag();\n        acceleration += CalculateBoatDrag();\n        rb.AddForce(acceleration * Time.deltaTime, ForceMode.VelocityChange);\n        rb2.AddForce(acceleration * Time.deltaTime, ForceMode.VelocityChange);\n        speedReadout.text = rb.velocity.ToString(\"F2\");\n        speedReadout2.text = rb2.velocity.ToString(\"F2\");\n    }\n\n    Vector3 CalculateHandDrag()\n    {\n        Vector3 acceleration = Vector3.zero;\n        Vector3 currentLeftPosition = leftHand.localPosition;\n        Vector3 currentRightPosition = rightHand.localPosition;\n\n        float deltaLeft = (currentLeftPosition - lastLeftPosition).magnitude;\n        float deltaRight = (currentRightPosition - lastRightPosition).magnitude;\n\n        acceleration += (currentLeftPosition - lastLeftPosition).normalized * (1 - handUpTime) * Mathf.Min(deltaLeft, handDeltaThreshold) * swimForceMultiplier;\n        acceleration += (currentRightPosition - lastRightPosition).normalized * (1 - handUpTime) * Mathf.Min(deltaRight, handDeltaThreshold) * swimForceMultiplier;\n\n        lastLeftPosition = currentLeftPosition;\n        lastRightPosition = currentRightPosition;\n\n        handUpTime = Mathf.Min(handUpTime + Time.deltaTime, 1);\n\n        if (handUpTime >= 1)\n        {\n            handUp = false;\n        }\n\n        return acceleration;\n    }\n\n    Vector3 CalculateBoatDrag()\n    {\n        Vector3 acceleration = Vector3.zero;\n        Vector3 boatPosition = boatRb.position;\n        float distanceToBoat = Vector3.Distance(transform.position, boatPosition);\n\n        if (distanceToBoat < boatDistanceThreshold)\n        {\n            acceleration += (transform.position - boatPosition).normalized * boatForceMultiplier;\n            boatMotor.Play",
    "code_repairing_4": "Le meilleur alcool connu est le whisky, qui date de 4000 ans! \nCe style alcoolique a fait ses preuves \u00e0 plusieurs reprises dans l'histoire, notamment durant l'\u00e8re industrielle o\u00f9 il sert \u00e0 produire de la bi\u00e8re alcoolis\u00e9e et \u00e9galement pour \u00e9conomiser l'alcool dans les camps militaires am\u00e9ricains.\n\nAu XIXe si\u00e8cle, le whisky a \u00e9t\u00e9 utilis\u00e9 \u00e0 la confection de liqueurs, sous la forme de whiskies bourbons ou ryes, qui seront de plus en plus utilis\u00e9s pendant les ann\u00e9es 20 en Am\u00e9rique du Nord, mais aussi en Europe.\n\nEn raison de sa longue con"
}