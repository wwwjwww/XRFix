{
    "code_repairing_0": "#if UNITY_2020_3_OR_NEWER\n        var targetOculusPlatform = new List<string> { \"android.hardware.vr.protected\" };\n#elif UNITY_2020_2_OR_NEWER\n        var targetOculusPlatform = new List<string> { \"android.hardward.vr.protected\" };\n#elif UNITY_2020_1_OR_NEWER\n        var targetOculusPlatform = new List<string> { \"android.software.vr.core\" };\n#elif UNITY_2019_3_OR_NEWER\n        var targetOculusPlatform = new List<string> { \"android.hardware.vr.required\" };\n#else\n        var targetOculusPlatform = new List<string> { \"android.software.vr.core\" };\n#endif\n\n\t\tstring targetPlatform = string.Join(\" \", targetOculusPlatform);\n\n\t\tstring gradle = File.ReadAllText(Path.Combine(path, \"build.gradle\"));\n\t\tgradle = gradle.Replace(\"apply plugin: 'com.android.application'\",\n\t\t\t\"apply plugin: 'com.android.application'\\n\\nandroid {\\n  compileSdkVersion rootProject.ext.compileSdkVersion\\n  buildToolsVersion rootProject.ext.buildToolsVersion\\n\\n  defaultConfig {\\n    applicationId 'com.companyname.productname'\\n    minSdkVersion 23\\n    targetSdkVersion 31\\n    versionCode rootProject.ext.versionCode\\n    versionName rootProject.ext.versionName\\n    ndk {\\n      abiFilters 'arm64-v8a', 'armeabi-v7a'\\n    }\\n\\n    manifestPlaceholders = [\\n      'target-oculus-platform': '\" + targetPlatform + \"'\\n    ]\\n\\n    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'\\n\\n    javaCompileOptions {\\n      annotationProcessorOptions {\\n        arguments = ['room.schemaLocation': '$projectDir/schemas'].withDefault{it}\\n      }\\n    }\\n  }\\n\\n  buildTypes {\\n    release {\\n      minifyEnabled false\\n      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\\n    }\\n  }\\n\\n  compileOptions {\\n    sourceCompatibility JavaVersion.VERSION_11\\n    targetCompatibility JavaVersion.VERSION_11\\n  }\\n\\n  packagingOptions {\\n    exclude 'META-INF/LICENSE.txt'\\n    exclude 'META-INF/LICENSE'\\n    exclude 'META-INF/NOTICE.txt'\\n    exclude 'META-INF/NOTICE'\\n    exclude 'META-INF/ASL2.0'\\n  }\\n\\n  // Oculus XR Plugin requirements\\n  gradle.ext.oculus.plugin_package = 'com.unity.xr.oculus:oculus-xr-plugin:' + rootProject.ext.xr_plugin_version\\n  dependencies {\\n    implementation 'com.unity.xr.arfoundation:com.unity.xr.arfoundation:' + rootProject.ext.xr_plugin_version\\n    implementation 'com.unity.xr.ovrinput:com.unity.xr.ovrinput:' + rootProject.ext.xr_plugin_version\\n    implementation gradle.ext.oculus.plugin_package\\n  }\\n}\\n\");\n\n\t\tFile.WriteAllText(Path.Combine(path, \"build.gradle\"), gradle);\n\t}\n\n\tpublic void OnPostprocessBuild(BuildReport report)\n\t{\n\t\tif (report.summary.platform!= BuildTarget.Android)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tBuild gradleBuild = new Build\n\t\t{\n\t\t\tproject = \":\",\n\t\t\ttarget = \"assembleDebug\",\n\t\t\tartifacts = new List<string>() { \"build/outputs/apk/debug/app-debug.apk\" }\n\t\t};\n\n\t\tusing (StringWriter sw = new StringWriter())\n\t\t{\n\t\t\tJsonWriter writer = new JsonTextWriter(sw);\n\t\t\twriter.WriteStartObject();\n\t\t\twriter.WritePropertyName(\"builds\");\n\t\t\twriter.WriteStartArray();\n\t\t\tgradleBuild.WriteJson(writer);\n\t\t\twriter.WriteEndArray();\n\t\t\twriter.WriteEndObject();\n\t\t\twriter.Flush();\n\n\t\t\tstring jsonPayload = sw.ToString();\n\n\t\t\tHttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(\"https://build.oculus.com/api/v1/prods/unity/builds\");\n\t\t\twebRequest.Method = \"POST\";\n\t\t\twebRequest.ContentType = \"application/json\";\n\n\t\t\tusing (var stream = webRequest.GetRequestStream())\n\t\t\t{\n\t\t\t\tvar bytes = Encoding.UTF8.GetBytes(jsonPayload);\n\t\t\t\tstream.Write(bytes, 0, bytes.Length);\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing (WebResponse webResponse = webRequest.GetResponse())\n\t\t\t\t{\n\t\t\t\t\tusing (var responseStream = webResponse.GetResponseStream())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (responseStream == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tUnityEngine.Debug.Log(\"Failed to get response stream from Oculus build server\");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tusing (StreamReader streamReader = new StreamReader(responseStream))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstring response = streamReader.ReadToEnd();\n\n\t\t\t\t\t\t\tJsonDocument doc = JsonDocument.Parse(response);\n\n\t\t\t\t\t\t\tJsonObject root = doc.RootElement.GetObject();\n\t\t\t\t\t\t\tJsonArray buildObjects = root.GetProperty(\"builds\").GetArray();\n\n\t\t\t\t\t\t\tstring buildUrl = buildObjects[0].GetProperty(\"url\").GetString();\n\n\t\t\t\t\t\t\tUnityEngine.Debug.Log(\"Uploaded APK to Oculus build server: \" + buildUrl);\n\n\t\t\t\t\t\t\tvar apkVersionCode = PlayerSettings.Android.bundleVersionCode;\n\t\t\t\t\t\t\tif (autoIncrementVersion && BuildPipeline.isBuildingPlayer)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Increase the version code by one for each successful build\n\t\t\t\t\t\t\t\tPlayerSettings.Android.bundleVersionCode = ++apkVersionCode;\n\t\t\t\t\t\t\t\tEditorUtility.SetDirty(PlayerSettings.instance);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (WebException e)\n\t\t\t{\n\t\t\t\tif (e.Status == WebExceptionStatus.ProtocolError)\n\t\t\t\t{\n\t\t\t\t\tHttpWebResponse response = (HttpWebResponse)e.Response;\n\t\t\t\t\tusing (StreamReader reader = new StreamReader(response.GetResponseStream()))\n\t\t\t\t\t{\n\t\t\t\t\t\tstring error = reader.ReadToEnd();\n\t\t\t\t\t\tUnityEngine.Debug.LogError(\"Failed to upload APK to Oculus build server:\\n\" + error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tUnityEngine.Debug.LogError(\"Failed to upload APK to Oculus build server:\\n\" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Build\n\t{\n\t\tpublic string project;\n\t\tpublic string target;\n\t\tpublic List<string> artifacts;\n\n\t\tpublic void WriteJson(JsonWriter writer)\n\t\t{\n\t\t\twriter.WriteStartObject();\n\t\t\twriter.WritePropertyName(\"project\");\n\t\t\twriter.WriteValue(project);\n\t\t\twriter.WritePropertyName(\"target\");\n\t\t\twriter.WriteValue(target);\n\t\t\twriter.WritePropertyName(\"artifacts\");\n\t\t\twriter.WriteStartArray();\n\t\t\tforeach (string artifact in artifacts)\n\t\t\t{\n\t\t\t\twriter.WriteValue(artifact);\n\t\t\t}\n\t\t\twriter.WriteEndArray();\n\t\t\twriter.WriteEndObject();\n\t\t}\n\t}\n}",
    "code_repairing_1": "Cierto, no hay problema. El c\u00f3digo que te he mostrado antes funciona de la siguiente manera:\nEn primer lugar, se importa la biblioteca `histogram` que se encuentra en el repositorio de github llamado `olahol/melium`. Esto se hace agregando la l\u00ednea `import \"github.com/ol",
    "code_repairing_2": "// \t\tandroid {\n// \t\t\tdefaultConfig {\n// \t\t\t\tmultiDexEnabled true\n// \t\t\t\tndk {\n// \t\t\t\t\tabiFilters \"arm64-v8a\", \"armeabi-v7a\", \"x86_64\", \"x86\"\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\taaptOptions {\n// \t\t\t\tnoCompress \"tflite\"\n// \t\t\t}\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\timplementation \"com.google.android.gms:play-services-basement:19.2.0\"\n// \t\t\timplementation \"com.google.android.gms:play-services-auth:19.2.0\"\n// \t\t}\n\n\t\t// Add the dependencies for the Oculus Integration, making sure the version is correct\n// \t\tdependencies {\n// \t\t\timplementation \"com.unity.xr.ovrinput:1.2.1\"\n// \t\t\timplementation \"com.unity.xr.openxr:0.10.0-preview.4\"\n// \t\t}\n\n// \t\t//Add the AndroidManifest.xml file for the Oculus Integration, making sure to replace PACKAGE_NAME with your actual package name\n// \t\tandroid {\n// \t\t\tsourceSets {\n// \t\t\t\tmain {\n// \t\t\t\t\tmanifest.srcFile \"AndroidManifest.xml\"\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n\n// \t\tapply plugin: \"com.android.application\"\n// \t\tapply plugin: \"kotlin-android\"\n// \t\tapply plugin: \"com.google.firebase.crashlytics\"\n\n\n// \t\tdependencies {\n// \t\t\timplementation 'com.squareup.okhttp3:okhttp:4.9.3'\n// \t\t}\n\n\n// \n// \t\tdependencies {\n// \t\t\tclasspath 'com.android.tools.build:gradle:4.2.2'\n// \t\t}\n\n\n// \n// \t\tapply plugin: 'com.android.application'\n// \t\tapply plugin: 'kotlin-android'\n// \t\tapply plugin: 'kotlin-android-extensions'\n\n// \n// \t\tdependencies {\n// \t\t\timplementation 'androidx.appcompat:appcompat:1.3.1'\n// \t\t\timplementation 'androidx.constraintlayout:constraintlayout:2.1.0'\n// \t\t\timplementation 'com.google.android.material:material:1.4.0'\n// \t\t}\n\n// \t\trepositories {\n// \t\t\tgoogle()\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\tcompile 'com.google.android.gms:play-services-auth:19.2.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\tclasspath 'com.android.tools.build:gradle:4.2.2'\n// \t\t}\n\n// \t\tapply plugin: 'com.android.application'\n\n// \t\tandroid {\n// \t\t\tcompileSdkVersion 30\n// \t\t\tdefaultConfig {\n// \t\t\t\tapplicationId \"com.example.myapplication\"\n// \t\t\t\tminSdkVersion 21\n// \t\t\t\ttargetSdkVersion 30\n// \t\t\t\tversionCode 1\n// \t\t\t\tversionName \"1.0\"\n// \t\t\t\ttestInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n// \t\t\t}\n\n// \t\t\tbuildTypes {\n// \t\t\t\trelease {\n// \t\t\t\t\tminifyEnabled false\n// \t\t\t\t\tproguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\timplementation fileTree(dir: 'libs', include: ['*.jar'])\n// \t\t\timplementation \"androidx.appcompat:appcompat:1.3.1\"\n// \t\t\timplementation \"androidx.constraintlayout:constraintlayout:2.1.0\"\n// \t\t\ttestImplementation 'junit:junit:4.12'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\tcompileOnly 'com.android.databinding:compiler:4.2.0'\n// \t\t}\n\n\n// \t\tdependencies {\n// \t\t\tclasspath 'com.android.tools.build:gradle:4.3.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\tclasspath 'com.android.tools.build:gradle:4.2.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\tcompileOnly 'com.android.support:appcompat-v7:28.0.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\timplementation 'com.squareup.okhttp3:okhttp:4.9.1'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'junit:junit:4.13'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation \"junit:junit:4.13\"\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\tcompileOnly 'com.android.support:appcompat-v7:29.0.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\tcompile 'com.android.support:appcompat-v7:29.0.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\timplementation 'com.android.support:recyclerview-v7:29.0.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestCompile 'junit:junit:4.13'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'junit:junit:4.12'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\tandroidTestImplementation 'com.android.support.test:runner:1.0.2'\n// \t\t\tandroidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\timplementation 'com.squareup.okhttp3:okhttp:4.9.1'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'junit:junit:4.13'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'junit:junit:4.13'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestCompile 'junit:junit:4.12'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'org.hamcrest:hamcrest-all:1.3'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'org.springframework:spring-test:5.3.8'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'org.mockito:mockito-core:4.1.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'org.assertj:assertj-core:3.21.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\ttestImplementation 'org.mockito:mockito-core:4.1.0'\n// \t\t}\n\n// \t\tdependencies {\n// \t\t\timplementation 'com.",
    "code_repairing_3": "It was the late summer of 1916, and 23-year-old Alexander Spencer had been called up for military service. He had never expected to be fighting on the Western Front, but the conflict in Europe had escalated in recent months, and now he found himself in the trenches of the First World War.\n\nAs he stepped out of the trench onto the battlefield, he was dazzled by the blinding sunlight and the deafening noise of artillery and machine guns. The smell of gunpowder and decaying flesh was overwhelming, and he felt his heart pounding as he scanned the horizon for signs of his company.\n\nSuddenly, he heard a faint rustling in the undergrowth next to him and felt himself being pulled into a hole in the ground. The earth seemed to swirl around him as he plummeted deeper and deeper, and he blacked out.\n\nWhen he woke up, he was lying in a muddy field, surrounded by barbed wire and machine guns. He looked around in confusion, trying to remember how he had ended up here. Then he heard voices coming from behind a nearby ditch, and he recognized the sound of his own accent.\n\n\"Alexander! Are you okay?\" the voice asked. It was his commanding officer from the training camp.\n\nAlexander felt a surge of adrenaline as he realized that he was not dreaming, and he scrambled to his feet.\n\n\"I'm okay, sir,\" he replied. \"I don't know how I got here, but I think I landed in a trench during the First World War.\"\n\nThe officer was astonished but also relieved.\n\n\"Well, that's certainly a unique way to get called up for service,\" he said. \"But I guess we'll have to make the best of it. I'm sure you'll fit right in with our unit.\"\n\nFor the next few weeks, Alexander lived and fought alongside the men of the 15th Battalion, experiencing the horrors of the trenches firsthand. He saw friends killed before his eyes, and he witnessed the devastating effects of mustard gas and chemical weapons on the battlefield.\n\nBut despite the brutality of the conflict, he also saw the compassion and bravery of the soldiers around him. He was struck by the way they helped each other",
    "code_repairing_4": "#if UNITY_ANDROID && USING_XR_SDK && USING_COMPATIBLE_OCULUS_XR_PLUGIN_VERSION\n\n\t\t// Get the version code from the ProjectSettings file, or create it if it doesn't exist\n\t\tint versionCode = GetVersionCode(path);\n\n\t\t// Increment the version code and write it back to the ProjectSettings file\n\t\tIncrementVersionCode(versionCode);\n\t\tWriteVersionCode(path, versionCode);\n\n\t\t// Parse the AndroidManifest file to get the package name\n\t\tstring manifestPath = Path.Combine(path, \"src\", \"main\", \"AndroidManifest.xml\");\n\t\tXmlDocument manifest = new XmlDocument();\n\t\tmanifest.Load(manifestPath);\n\t\tXmlElement manifestRoot = manifest.DocumentElement;\n\t\tstring packageName = manifestRoot.GetAttribute(\"package\");\n\n\t\t// Add the Oculus Android package to the gradle file\n\t\tusing (StreamWriter writer = new StreamWriter(Path.Combine(path, \"build.gradle\")))\n\t\t{\n\t\t\twriter.WriteLine(\"dependencies {\");\n\t\t\twriter.WriteLine(\"    implementation('com.oculus.xrplugin:android:1.18.0')\");\n\t\t\twriter.WriteLine(\"}\");\n\t\t}\n\n\t\t// Update the AndroidManifest to request the Oculus permissions\n\t\tUpdateManifest(path, packageName);\n#endif\n\t}\n\n\tpublic void OnPostprocessBuild(BuildReport report)\n\t{\n#if UNITY_ANDROID && USING_XR_SDK && USING_COMPATIBLE_OCULUS_XR_PLUGIN_VERSION\n\t\t// Get the version name from the BuildSettings file, or create it if it doesn't exist\n\t\tstring versionName = GetVersionName();\n\n\t\t// Update the AndroidManifest with the version name\n\t\tUpdateManifest(versionName);\n#endif\n\n#if BUILDSESSION\n\t\tif (File.Exists(\"build_session\"))\n\t\t{\n\t\t\tStreamReader reader = new StreamReader(\"build_session\");\n\t\t\tstring line = reader.ReadLine();\n\t\t\treader.Close();\n\t\t\tif (line!= buildGuid.ToString())\n\t\t\t{\n\t\t\t\tthrow new BuildFailedException(\"Build process terminated unexpectedly. This may indicate a bug in the Oculus Integration for Unity.\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUnityEngine.Debug.LogError(\"build_session file is missing. This may indicate a bug in the Oculus Integration for Unity.\");\n\t\t}\n#endif\n\t}\n\n#if UNITY_ANDROID && USING_XR_SDK && USING_COMPATIBLE_OCULUS_XR_PLUGIN_VERSION\n\tprivate void UpdateManifest(string versionName)\n\t{\n\t\t// Get the package name from the manifest\n\t\tstring manifestPath = Path.Combine(Build.androidBuildSubDirectory, \"src\", \"main\", \"AndroidManifest.xml\");\n\t\tXmlDocument manifest = new XmlDocument();\n\t\tmanifest.Load(manifestPath);\n\t\tXmlElement manifestRoot = manifest.DocumentElement;\n\t\tstring packageName = manifestRoot.GetAttribute(\"package\");\n\n\t\t// Update the manifest with the version name\n\t\tXmlElement usesSdkElement = manifestRoot.SelectSingleNode(\"uses-sdk\") as XmlElement;\n\t\tusesSdkElement.SetAttribute(\"android:minSdkVersion\", \"21\");\n\t\tusesSdkElement.SetAttribute(\"android:targetSdkVersion\", \"29\");\n\n\t\tXmlElement metaDataElement = manifestRoot.SelectSingleNode(\"meta-data\") as XmlElement;\n\t\tif (metaDataElement == null)\n\t\t{\n\t\t\tmetaDataElement = manifest.CreateElement(\"meta-data\");\n\t\t\tmanifestRoot.AppendChild(metaDataElement);\n\t\t}\n\t\tmetaDataElement.SetAttribute(\"android:name\", \"com.oculus.VersionName\");\n\t\tmetaDataElement.SetAttribute(\"android:value\", versionName);\n\n\t\t// Save the manifest\n\t\tmanifest.Save(manifestPath);\n\t}\n\n\tprivate void UpdateManifest(string path, string packageName)\n\t{\n\t\t// Get the version name from the BuildSettings file, or create it if it doesn't exist\n\t\tstring versionName = GetVersionName();\n\n\t\t// Update the manifest with the version name\n\t\tUpdateManifest(path, versionName, packageName);\n\t}\n\n\tprivate void UpdateManifest(string path, string versionName, string packageName)\n\t{\n\t\t// Get the package name from the manifest\n\t\tstring manifestPath = Path.Combine(path, \"src\", \"main\", \"AndroidManifest.xml\");\n\t\tXmlDocument manifest = new XmlDocument();\n\t\tmanifest.Load(manifestPath);\n\t\tXmlElement manifestRoot = manifest.DocumentElement;\n\n\t\t// Update the manifest with the version name\n\t\tXmlElement usesSdkElement = manifestRoot.SelectSingleNode(\"uses-sdk\") as XmlElement;\n\t\tusesSdkElement.SetAttribute(\"android:minSdkVersion\", \"21\");\n\t\tusesSdkElement.SetAttribute(\"android:targetSdkVersion\", \"29\");\n\n\t\tXmlElement metaDataElement = manifestRoot.SelectSingleNode(\"meta-data\") as XmlElement;\n\t\tif (metaDataElement == null)\n\t\t{\n\t\t\tmetaDataElement = manifest.CreateElement(\"meta-data\");\n\t\t\tmanifestRoot.AppendChild(metaDataElement);\n\t\t}\n\t\tmetaDataElement.SetAttribute(\"android:name\", \"com.oculus.VersionName\");\n\t\tmetaDataElement.SetAttribute(\"android:value\", versionName);\n\n\t\tXmlElement usesFeatureElement = manifestRoot.SelectSingleNode(\"uses-feature\") as XmlElement;\n\t\tif (usesFeatureElement == null)\n\t\t{\n\t\t\tusesFeatureElement = manifest.CreateElement(\"uses-feature\");\n\t\t\tmanifestRoot.AppendChild(usesFeatureElement);\n\t\t}\n\t\tusesFeatureElement.SetAttribute(\"android:name\", \"android.software.vr.controller\");\n\t\tusesFeatureElement.SetAttribute(\"android:required\", \"false\");\n\n\t\tXmlElement activityElement = manifestRoot.SelectSingleNode(\"activity\") as XmlElement;\n\t\tif (activityElement!= null)\n\t\t{\n\t\t\tXmlElement metaParent = activityElement.ParentNode as XmlElement;\n\t\t\tmetaParent.RemoveChild(activityElement);\n\t\t}\n\n\t\t// Add the Oculus Android package to the gradle file\n\t\tusing (StreamWriter writer = new StreamWriter(Path.Combine(path, \"build.gradle\")))\n\t\t{\n\t\t\twriter.WriteLine(\"dependencies {\");\n\t\t\twriter.WriteLine(\"    implementation('com.oculus.xrplugin:android:1.18.0')\");\n\t\t\twriter.WriteLine(\"}\");\n\t\t}\n\n\t\t// Save the manifest\n\t\tmanifest.Save(manifestPath);\n\t}\n\n\tprivate int GetVersionCode(string path)\n\t{\n\t\tstring projectName = Path.GetFileNameWithoutExtension(path);\n\t\tstring buildPath = \"ProjectSettings/\" + projectName + \".asset\";\n\t\tstring assetPath = Path.Combine(path, buildPath);\n\n\t\t// Load the ProjectSettings file\n\t\tAssetDatabase.LoadAssetAtPath<UnityEngine.Object>(assetPath);\n\t\tProjectSettings projectSettings = AssetDatabase.LoadAssetAtPath<ProjectSettings>(assetPath);\n\n\t\t// Get the version code from the ProjectSettings file\n\t\tif (projectSettings!= null)\n\t\t{\n\t\t\tType type = projectSettings.GetType();\n\t\t\tFieldInfo field = type.GetField(\"kVersionCode\", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static);\n\t\t\tint versionCode = (int)field.GetValue(projectSettings);\n\t\t\treturn versionCode;\n\t\t}\n\n\t\t// Create a new version code if it doesn't exist\n\t\telse\n\t\t{\n\t\t\tVersionControlHelper.CreateVersionFile(path);\n\t\t\tProjectSettings settings = CreateProjectSettings(projectName);"
}