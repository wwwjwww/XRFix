{
    "code_repairing_0": "Here is the corrected code:\n\n\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\n\ninternal static class OVRTask\n{\n    internal static OVRTask<TResult> FromGuid<TResult>(Guid id) => Create<TResult>(id);\n    internal static OVRTask<TResult> FromRequest<TResult>(ulong id) => Create<TResult>(GetId(id));\n\n    internal static OVRTask<TResult> FromResult<TResult>(TResult result)\n    {\n        var task = Create<TResult>(Guid.NewGuid());\n        task.SetResult(result);\n        return task;\n    }\n\n    internal static OVRTask<TResult> GetExisting<TResult>(Guid id) => Get<TResult>(id);\n    internal static OVRTask<TResult> GetExisting<TResult>(ulong id) => Get<TResult>(GetId(id));\n\n    internal static void SetResult<TResult>(Guid id, TResult result) =>\n        GetExisting<TResult>(id).SetResult(result);\n\n    internal static void SetResult<TResult>(ulong id, TResult result) =>\n        GetExisting<TResult>(id).SetResult(result);\n\n    private static OVRTask<TResult> Get<TResult>(Guid id)\n    {\n        return new OVRTask<TResult>(id);\n    }\n\n    private static OVRTask<TResult> Create<TResult>(Guid id)\n    {\n        var task = Get<TResult>(id);\n        task.AddToPending();\n        return task;\n    }\n\n    internal static unsafe Guid GetId(ulong value)\n    {\n        const ulong hashModifier1 = 0x319642b2d24d8ec3;\n        const ulong hashModifier2 = 0x96de1b173f119089;\n        var guid = default(Guid);\n        *(ulong*)&guid = unchecked(value + hashModifier1);\n        *((ulong*)&guid + 1) = hashModifier2;\n        return guid;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic readonly struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable\n{\n    #region static\n\n    private static readonly HashSet<Guid> Pending = new HashSet<Guid>();\n    private static readonly Dictionary<Guid, TResult> Results = new Dictionary<Guid, TResult>();\n    private static readonly Dictionary<Guid, Action> Continuations = new Dictionary<Guid, Action>();\n\n    private delegate void CallbackInvoker(Guid guid, TResult result);\n\n    private delegate bool CallbackRemover(Guid guid);\n\n    private static readonly Dictionary<Guid, CallbackInvoker>\n        CallbackInvokers = new Dictionary<Guid, CallbackInvoker>();\n\n    private static readonly Dictionary<Guid, CallbackRemover>\n        CallbackRemovers = new Dictionary<Guid, CallbackRemover>();\n\n    private static readonly HashSet<Action> CallbackClearers = new HashSet<Action>();\n\n    private delegate bool InternalDataRemover(Guid guid);\n\n    private static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers =\n        new Dictionary<Guid, InternalDataRemover>();\n\n    private static readonly HashSet<Action> InternalDataClearers = new HashSet<Action>();\n\n    private static readonly Dictionary<Guid, Action<Guid>> SubscriberRemovers =\n        new Dictionary<Guid, Action<Guid>>();\n\n    \n\n    #endregion\n\n    #region Instance\n\n    private readonly Guid id;\n\n    private OVRTask(Guid id)\n    {\n        this.id = id;\n    }\n\n    public bool Equals(OVRTask<TResult> other)\n    {\n        return id.Equals(other.id);\n    }\n\n    public void Dispose()\n    {\n        RemovePending();\n    }\n\n    internal TResult GetResult(ulong requestId)\n    {\n        if (!IsPending(requestId))\n        {\n            throw new InvalidOperationException(\"The task is not yet complete.\");\n        }\n\n        TResult result = Results[GetId(requestId)];\n        RemovePending();\n        return result;\n    }\n\n    internal void AddToPending()\n    {\n        Pending.Add(id);\n    }\n\n    internal void RemovePending()\n    {\n        Pending.Remove(id);\n    }\n\n    internal void RegisterContinuation(Action continuation)\n    {\n        Continuations.Add(id, continuation);\n    }\n\n    internal void InvokeContinuation(TResult result)\n    {\n        Continuations[id]?.Invoke();\n    }\n\n    internal void UnregisterContinuation()\n    {\n        Continuations.Remove(id);\n    }\n\n    internal bool IsPending(ulong requestId)\n    {\n        return Pending.Contains(GetId(requestId));\n    }\n\n    internal void SetResult(TResult result)\n    {\n        Results.Add(id, result);\n        Action continuation = Continuations[id];\n        InvokeContinuation(result);\n        UnregisterContinuation();\n        if (callbackInvoker != null)\n        {\n            callbackInvoker(id, result);\n        }\n    }\n\n    internal static void RegisterCallbackInvoker(CallbackInvoker invoker)\n    {\n        CallbackInvokers[id] = invoker;\n    }\n\n    internal static void RemoveCallbackInvoker()\n    {\n        CallbackInvokers.Remove(id);\n    }\n\n    internal static void InvokeCallback(Guid guid, TResult result)\n    {\n        CallbackInvokers[guid](guid, result);\n    }\n\n    internal static void RegisterCallbackRemover(CallbackRemover remover)\n    {\n        CallbackRemovers[id] = remover;\n    }\n\n    internal static void RemoveCallbackRemover()\n    {\n        CallbackRemovers.Remove(id);\n    }\n\n    internal static bool RemoveCallback(Guid guid)\n    {\n        return CallbackRemovers[guid](guid);\n    }\n\n    internal static void RegisterCallbackClearer(Action clearer)\n    {\n        CallbackClearers.Add(id);\n        clearer();\n        CallbackClearers.Remove(id);\n    }\n\n    internal static void ClearCallbacks()\n    {\n        foreach (var clearer in CallbackClearers)\n        {\n            clearer();\n        }\n    }\n\n    internal static void RegisterInternalDataRemover(InternalDataRemover remover)\n    {\n        InternalDataRemovers[id] = remover;\n    }\n\n    internal static void RemoveInternalDataRemover()\n    {\n        InternalDataRemovers.Remove(id);\n    }\n\n    internal static bool RemoveInternalData()\n    {\n        return InternalDataRemovers[id](id);\n    }\n\n    internal static void RegisterInternalDataClearer(Action clearer)\n    {\n        InternalDataClearers.Add(id);\n        clearer();\n        InternalDataClearers.Remove(id);\n    }\n\n    internal static void ClearInternalData()\n    {\n        foreach (var clearer in InternalDataClearers)\n        {\n            clearer();\n        }\n    }\n\n    internal static void RegisterSubscriberRemover(Action<Guid> remover)\n    {\n        SubscriberRemovers[id] = remover;\n    }\n\n    internal static void RemoveSubscriberRemover()\n    {\n        SubscriberRemovers.Remove(id);\n    }\n\n    internal static bool RemoveSubscriber(Guid guid)\n    {\n        return SubscriberRemovers[guid](guid);\n    }\n\n    #endregion\n}\n```",
    "code_repairing_1": "Here's the fixed code:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\n\ninternal static class OVRTask\n{\n    internal static OVRTask<TResult> FromGuid<TResult>(Guid id) => Create<TResult>(id);\n    internal static OVRTask<TResult> FromRequest<TResult>(ulong id) => Create<TResult>(GetId(id));\n\n    internal static OVRTask<TResult> FromResult<TResult>(TResult result)\n    {\n        var task = Create<TResult>(Guid.NewGuid());\n        task.SetResult(result);\n        return task;\n    }\n\n    internal static OVRTask<TResult> GetExisting<TResult>(Guid id) => Get<TResult>(id);\n    internal static OVRTask<TResult> GetExisting<TResult>(ulong id) => Get<TResult>(GetId(id));\n\n    internal static void SetResult<TResult>(Guid id, TResult result) =>\n        GetExisting<TResult>(id).SetResult(result);\n\n    internal static void SetResult<TResult>(ulong id, TResult result) =>\n        GetExisting<TResult>(id).SetResult(result);\n\n    private static OVRTask<TResult> Get<TResult>(Guid id)\n    {\n        return new OVRTask<TResult>(id);\n    }\n\n    private static OVRTask<TResult> Create<TResult>(Guid id)\n    {\n        var task = new OVRTask<TResult>(id);\n        task.AddToPending();\n        return task;\n    }\n\n    internal static unsafe Guid GetId(ulong value)\n    {\n        const ulong hashModifier1 = 0x319642b2d24d8ec3;\n        const ulong hashModifier2 = 0x96de1b173f119089;\n        var guid = default(Guid);\n        *(ulong*)&guid = unchecked(value + hashModifier1);\n        *((ulong*)&guid + 1) = hashModifier2;\n        return guid;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic readonly struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable\n{\n    #region static\n\n    private static readonly HashSet<Guid> Pending = new HashSet<Guid>();\n    private static readonly Dictionary<Guid, TResult> Results = new Dictionary<Guid, TResult>();\n    private static readonly Dictionary<Guid, Action> Continuations = new Dictionary<Guid, Action>();\n\n    private delegate void CallbackInvoker(Guid guid, TResult result);\n\n    private delegate bool CallbackRemover(Guid guid);\n\n    private static readonly Dictionary<Guid, CallbackInvoker>\n        CallbackInvokers = new Dictionary<Guid, CallbackInvoker>();\n\n    private static readonly Dictionary<Guid, CallbackRemover>\n        CallbackRemovers = new Dictionary<Guid, CallbackRemover>();\n\n    private static readonly HashSet<Action> CallbackClearers = new HashSet<Action>();\n\n    private delegate bool InternalDataRemover(Guid guid);\n\n    private static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers =\n        new Dictionary<Guid, InternalDataRemover>();\n\n    private static readonly HashSet<Action> InternalDataClearers = new HashSet<Action>();\n\n    private static readonly Dictionary<Guid, Action<Guid>> SubscriberRemovers =\n        new Dictionary<Guid, Action<Guid>>();\n\n    \n\n    #endregion\n\n    #region fields\n\n    private readonly Guid _id;\n    private readonly TResult _result;\n\n    #endregion\n\n    #region constructors\n\n    internal OVRTask(Guid id)\n    {\n        _id = id;\n    }\n\n    #endregion\n\n    #region methods\n\n    private void AddToPending()\n    {\n        Pending.Add(_id);\n    }\n\n    private void SetResult(TResult result)\n    {\n        _result = result;\n        Results[_id] = result;\n        Continuations[_id]?.Invoke();\n        Continuations[_id] = null;\n    }\n\n    #endregion\n\n    #region operators\n\n    public bool Equals(OVRTask<TResult> other)\n    {\n        return _id.Equals(other._id);\n    }\n\n    public override bool Equals(object obj)\n    {\n        return obj is OVRTask<TResult> && Equals((OVRTask<TResult>)obj);\n    }\n\n    public static bool operator ==(OVRTask<TResult> left, OVRTask<TResult> right)\n    {\n        return left.Equals(right);\n    }\n\n    public static bool operator !=(OVRTask<TResult> left, OVRTask<TResult> right)\n    {\n        return !(left == right);\n    }\n\n    #endregion\n\n    #region interface implementations\n\n    public void Dispose()\n    {\n        Pending.Remove(_id);\n        Results.Remove(_id);\n        Continuations.Remove(_id);\n        CallbackInvokers.Remove(_id);\n        CallbackRemovers.Remove(_id);\n        CallbackClearers.Remove(_id);\n        InternalDataRemovers.Remove(_id);\n        InternalDataClearers.Remove(_id);\n        SubscriberRemovers.Remove(_id);\n    }\n\n    public override int GetHashCode()\n    {\n        return _id.GetHashCode();\n    }\n\n    #endregion\n}",
    "code_repairing_2": "Here's the \"FIXED CODE\" section you provided:\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nHere's the fixed code snippet for the `OVRTask` class:\n```\npublic readonly struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable\n{\n    private readonly Guid _id;\n\n    public OVRTask(Guid id)\n    {\n        _id = id;\n    }\n\n    public void AddToPending()\n    {\n        Pending.Add(_id);\n    }\n\n    public void SetResult(TResult result)\n    {\n        Results[_id] = result;\n    }\n\n    public void SetContinuation(Action continuation)\n    {\n        Continuations[_id] = continuation;\n    }\n\n    public void ClearContinuation()\n    {\n        Continuations.Remove(_id);\n    }\n\n    public void Dispose()\n    {\n        if (Pending.Contains(_id))\n        {\n            Pending.Remove(_id);\n        }\n\n        if (Results.ContainsKey(_id))\n        {\n            Results.Remove(_id);\n        }\n\n        if (Continuations.ContainsKey(_id))\n        {\n            Continuations.Remove(_id);\n        }\n    }\n\n    public override int GetHashCode()\n    {\n        return _id.GetHashCode();\n    }\n\n    public override bool Equals(object obj)\n    {\n        if (obj is OVRTask<TResult> task)\n        {\n            return Equals(task);\n        }\n\n        return false;\n    }\n\n    public bool Equals(OVRTask<TResult> other)\n    {\n        return _id.Equals(other._id);\n    }\n\n    public static bool operator ==(OVRTask<TResult> left, OVRTask<TResult> right)\n    {\n        return left._id == right._id;\n    }\n\n    public static bool operator !=(OVRTask<TResult> left, OVRTask<TResult> right)\n    {\n        return left._id != right._id;\n    }\n\n    public override string ToString()\n    {\n        return $\"{{OVRTask: Id={_id}}}\";\n    }\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.FromGuid` method:\n```\ninternal static OVRTask<TResult> FromGuid<TResult>(Guid id)\n{\n    return new OVRTask<TResult>(id);\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.FromRequest` method:\n```\ninternal static OVRTask<TResult> FromRequest<TResult>(ulong id)\n{\n    return new OVRTask<TResult>(GetId(id));\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.FromResult` method:\n```\ninternal static OVRTask<TResult> FromResult<TResult>(TResult result)\n{\n    var task = new OVRTask<TResult>(Guid.NewGuid());\n    task.SetResult(result);\n    return task;\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.GetExisting` method:\n```\ninternal static OVRTask<TResult> GetExisting<TResult>(Guid id)\n{\n    return new OVRTask<TResult>(id);\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.GetExisting` method:\n```\ninternal static OVRTask<TResult> GetExisting<TResult>(ulong id)\n{\n    return new OVRTask<TResult>(GetId(id));\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.GetId` method:\n```\nprivate static unsafe Guid GetId(ulong value)\n{\n    const ulong hashModifier1 = 0x319642b2d24d8ec3;\n    const ulong hashModifier2 = 0x96de1b173f119089;\n    var guid = default(Guid);\n    *(ulong*)&guid = unchecked(value + hashModifier1);\n    *((ulong*)&guid + 1) = hashModifier2;\n    return guid;\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.SetResult` method:\n```\ninternal static void SetResult<TResult>(Guid id, TResult result)\n{\n    Results[id] = result;\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.SetResult` method:\n```\ninternal static void SetResult<TResult>(ulong id, TResult result)\n{\n    Results[GetId(id)] = result;\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>.Dispose` method:\n```\npublic void Dispose()\n{\n    if (Pending.Contains(_id))\n    {\n        Pending.Remove(_id);\n    }\n\n    if (Results.ContainsKey(_id))\n    {\n        Results.Remove(_id);\n    }\n\n    if (Continuations.ContainsKey(_id))\n    {\n        Continuations.Remove(_id);\n    }\n}\n```\n\nHere's the fixed code snippet for the `OVRTask<TResult>` struct:\n```\npublic struct OVRTask<TResult> : IEquatable<OVRTask<TResult>>, IDisposable\n{\n    private readonly Guid _id;\n\n    public OVRTask(Guid id)\n    {\n        _id = id;\n    }\n\n    public void AddToPending()\n    {\n        Pending.Add(_id);\n    }\n\n    public void SetResult(TResult result)\n    {\n        Results[_id] = result;\n    }\n\n    public void SetContinuation(Action continuation)\n    {\n        Continuations[_id] = continuation;\n    }\n\n    public void ClearContinuation()\n    {\n        Continuations.Remove(_id);\n    }\n\n    public void Dispose()\n    {\n        if (Pending.Contains(_id))\n        {\n            Pending.Remove(_id);\n        }\n\n        if (Results.ContainsKey(_id))\n        {\n            Results.Remove(_id);\n        }\n\n        if (Continuations.ContainsKey(_id))\n        {\n            Continuations.Remove(_id);\n        }\n    }\n\n    public override int GetHashCode()\n    {\n        return _id.GetHashCode();\n    }\n\n    public override bool Equals(object obj)\n    {\n        if (obj is OVRTask<TResult> task)\n        {\n            return Equals(task);\n        }\n\n        return false;\n    }\n\n    public bool Equals(OVRTask<TResult> other)\n    {\n        return _id.Equals(other._id);\n    }\n\n    public static bool operator ==(OVRTask<TResult> left, OVRTask<TResult> right)\n    {\n        return left._id == right._id;\n    }\n\n    public static bool operator !=(OVRTask<TResult> left, OVRTask<TResult> right)\n    {\n        return left._id != right._id;\n    }\n\n    public override string ToString()\n    {\n        return $\"{{OVRTask: Id={_id}}}\";\n    }\n}\n```\n\nHere's the fixed code snippet for the `OVRTask` class:\n```\ninternal static class OVRTask\n{\n    internal static OVRTask<TResult> FromGuid<TResult>(Guid id) => Create<TResult>(id);\n    internal static OVRTask<TResult> FromRequest<TResult>(ulong id) => Create<TResult>(GetId(id));\n\n    internal static OVRTask<TResult> FromResult<TResult>(TResult result)\n    {\n        var task = Create<TResult>(",
    "code_repairing_3": "FIXED CODE:\n\nprivate delegate void CallbackInvoker(Guid guid, TResult result);\n\nprivate delegate bool CallbackRemover(Guid guid);\n\nprivate static readonly Dictionary<Guid, CallbackInvoker>\n    CallbackInvokers = new Dictionary<Guid, CallbackInvoker>();\n\nprivate static readonly Dictionary<Guid, CallbackRemover>\n    CallbackRemovers = new Dictionary<Guid, CallbackRemover>();\n\nprivate static readonly HashSet<Action> CallbackClearers = new HashSet<Action>();\n\nprivate delegate bool InternalDataRemover(Guid guid);\n\nprivate static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers =\n    new Dictionary<Guid, InternalDataRemover>();\n\nprivate static readonly HashSet<Action> InternalDataClearers = new HashSet<Action>();\n\nprivate static readonly Dictionary<Guid, Action<Guid>> SubscriberRemovers =\n    new Dictionary<Guid, Action<Guid>>();\n\nprivate delegate void Callback(Guid guid);\n\nprivate delegate bool CallbackAddition(Guid guid, Action<Guid> callback);\n\nprivate static readonly Dictionary<Guid, CallbackAddition> CallbackAdditions =\n    new Dictionary<Guid, CallbackAddition>();\n\nprivate delegate bool CallbackRemoval(Guid guid, Action<Guid> callback);\n\nprivate static readonly Dictionary<Guid, CallbackRemoval> CallbackRemovals =\n    new Dictionary<Guid, CallbackRemoval>();\n\nprivate static readonly HashSet<Action<Guid>> CallbackClearers = new HashSet<Action<Guid>>();\n\nprivate delegate bool InternalDataAddition(Guid guid, TResult value);\n\nprivate static readonly Dictionary<Guid, InternalDataAddition> InternalDataAdditions =\n    new Dictionary<Guid, InternalDataAddition>();\n\nprivate delegate bool InternalDataRemoval(Guid guid);\n\nprivate static readonly Dictionary<Guid, InternalDataRemoval> InternalDataRemovals =\n    new Dictionary<Guid, InternalDataRemoval>();\n\nprivate static readonly HashSet<Action<Guid>> InternalDataClearers = new HashSet<Action<Guid>>();\n\nprivate static readonly Dictionary<Guid, Action<Guid, TResult>> SubscriberAdditions =\n    new Dictionary<Guid, Action<Guid, TResult>>();\n\nprivate static readonly Dictionary<Guid, Action<Guid, TResult>> SubscriberRemovals =\n    new Dictionary<Guid, Action<Guid, TResult>>();\n\nprivate static readonly HashSet<Action<Guid, TResult>> SubscriberClearers = new HashSet<Action<Guid, TResult>>();\n```\n\nThe code snippet you provided was a C# class that I'll call `OVRTask` that defines a `Callback` delegate, a `CallbackRemover` delegate, and a `SubscriberRemover` delegate.\n\nThe `Callback` and `SubscriberRemover` delegates are used to manage callbacks and subscribers for a particular task. The `CallbackRemover` delegate is used to remove a specific callback or subscriber for a particular task.\n\nThe `OVRTask` class also defines a number of extension methods for `OVRTask<TResult>`, including `FromGuid`, `FromResult`, `FromRequest`, `GetExisting`, `SetResult`, and `AddCallback`.\n\nTo fix the code, I would recommend the following changes:\n\n* Remove the `internal` modifier from the `OVRTask` class.\n* Remove the `internal` modifier from the `Callback` and `SubscriberRemover` delegates.\n* Remove the `internal` modifier from the `FromGuid`, `FromRequest`, and `GetExisting` methods.\n* Remove the `internal` modifier from the `SetResult` method.\n* Remove the `internal` modifier from the `AddCallback` method.\n* Remove the `internal` modifier from the `CallbackInvokers`, `CallbackRemovers`, `CallbackClearers`, `InternalDataRemovers`, `InternalDataClearers`, and `SubscriberClearers` fields.\n* Remove the `internal` modifier from the `CallbackAdditions`, `CallbackRemovals`, and `InternalDataAdditions` fields.\n* Remove the `internal` modifier from the `CallbackClearers` and `InternalDataClearers` fields.\n\nAfter making these changes, the code should compile and run correctly.",
    "code_repairing_4": "```\ninternal static readonly HashSet<Guid> Pending = new();\ninternal static readonly Dictionary<Guid, TResult> Results = new();\ninternal static readonly Dictionary<Guid, Action> Continuations = new();\n\nprivate delegate void CallbackInvoker(Guid guid, TResult result);\nprivate delegate bool CallbackRemover(Guid guid);\nprivate static readonly Dictionary<Guid, CallbackInvoker> CallbackInvokers = new();\nprivate static readonly Dictionary<Guid, CallbackRemover> CallbackRemovers = new();\nprivate static readonly HashSet<Action> CallbackClearers = new();\n\nprivate delegate bool InternalDataRemover(Guid guid);\nprivate static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers = new();\nprivate static readonly HashSet<Action> InternalDataClearers = new();\n\nprivate delegate bool SubscriberRemover(Guid guid);\nprivate static readonly Dictionary<Guid, SubscriberRemover> SubscriberRemovers = new();\n```\n\nFixed Code:\n```\ninternal static readonly HashSet<Guid> Pending = new();\ninternal static readonly Dictionary<Guid, TResult> Results = new();\ninternal static readonly Dictionary<Guid, Action> Continuations = new();\n\nprivate delegate void CallbackInvoker(Guid guid, TResult result);\nprivate delegate bool CallbackRemover(Guid guid);\nprivate static readonly Dictionary<Guid, CallbackInvoker> CallbackInvokers = new();\nprivate static readonly Dictionary<Guid, CallbackRemover> CallbackRemovers = new();\nprivate static readonly HashSet<Action> CallbackClearers = new();\n\nprivate delegate bool InternalDataRemover(Guid guid);\nprivate static readonly Dictionary<Guid, InternalDataRemover> InternalDataRemovers = new();\nprivate static readonly HashSet<Action> InternalDataClearers = new();\n\nprivate delegate bool SubscriberRemover(Guid guid);\nprivate static readonly Dictionary<Guid, SubscriberRemover> SubscriberRemovers = new();\n```"
}