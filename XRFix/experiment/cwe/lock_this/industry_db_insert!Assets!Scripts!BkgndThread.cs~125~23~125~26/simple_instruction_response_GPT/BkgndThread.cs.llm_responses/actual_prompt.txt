using System;
using System.Collections.Generic;
using System.Threading;
using UnityEngine;


public static class BkgndThread
{
    public class Dispatcher
    {
        /* Create one Dispatcher instance per independent queue of requests.
         * Each Dispatcher holds only a queue of length one, so unprocessed requests
         * will be overwritten with newer requests.  The actual implementation will
         * round-robin between all Dispatchers.
         */

        ThreadStart pending;

        public void Schedule(ThreadStart function)
        {
            if (requestQueue == null)
                MakeRequestQueue();

            bool must_release = false;
            lock (requestQueue)
            {
                if (pending == null)
                {
                    requestQueue.Enqueue(this);
                    must_release = true;
                }
                pending = function;
            }
            if (must_release)
                semaphore.Release();
            bkgnd_thread_dispatcher_working = true;
        }

        ThreadStart Pop()
        {
            ThreadStart result = pending;
            pending = null;
            return result;
        }

        static Queue<Dispatcher> requestQueue;
        static Semaphore semaphore;
        static bool bkgnd_thread_dispatcher_working = false;

        static void MakeRequestQueue()
        {
            requestQueue = new Queue<Dispatcher>();
            semaphore = new Semaphore(0, int.MaxValue);
            Start(() =>
            {
                while (true)
                {
                    semaphore.WaitOne();

                    Dispatcher dispatcher;
                    ThreadStart function;
                    lock (requestQueue)
                    {
                        dispatcher = requestQueue.Dequeue();
                        function = dispatcher.Pop();
                    }
                    function();
                }
            });
        }

        public static void WaitUntilThreadIdle()
        {
            if (bkgnd_thread_dispatcher_working)
            {
                var wait_until_done = new Dispatcher();
                var ev = new AutoResetEvent(false);
                wait_until_done.Schedule(() => ev.Set());
                ev.WaitOne();
                bkgnd_thread_dispatcher_working = false;
            }
        }
    }


    public class Compute<T> : Dispatcher
    {
        volatile bool got_answer;
        public volatile bool interrupt;
        T result;

        public delegate T RunDelegate();
        public delegate T RunDelegateWithCompute(Compute<T> compute);

        public Compute(RunDelegate run_delegate)
        {
            Schedule(() =>
            {
                T result1 = run_delegate();
                lock (this)
                {
                    result = result1;
                    got_answer = true;
                }
            });
        }

        public Compute(RunDelegateWithCompute run_delegate)
        {
            Schedule(() =>
            {
                T result1 = run_delegate(this);
                lock (this)
                {
                    result = result1;
                    got_answer = true;
                }
            });
        }

///         public bool TryGetAnswer(out T answer)
//         {
//             if (got_answer)
//             {
                //                 lock (this)
                //                     answer = result;
                //                 return true;
                //             }
                //             else
                //             {
                //                 answer = default(T);
                //                 return false;
                //             }
                //         }

                // FIXED CODE:
